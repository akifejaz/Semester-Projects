
lab12_b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014118  0800e280  0800e280  0001e280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022398  08022398  000401e4  2**0
                  CONTENTS
  4 .ARM          00000008  08022398  08022398  00032398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080223a0  080223a0  000401e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080223a0  080223a0  000323a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080223a4  080223a4  000323a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080223a8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010a10  200001e4  0802258c  000401e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010bf4  0802258c  00040bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b656  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005656  00000000  00000000  0006b86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b40  00000000  00000000  00070ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019d0  00000000  00000000  00072a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af7b  00000000  00000000  000743d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000203d9  00000000  00000000  0009f34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001057a6  00000000  00000000  000bf724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001c4eca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083c4  00000000  00000000  001c4f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00004102  00000000  00000000  001cd354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e268 	.word	0x0800e268

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800e268 	.word	0x0800e268

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <vApplicationGetIdleTaskMemory+0x2c>)
 8000efc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <vApplicationGetIdleTaskMemory+0x30>)
 8000f02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000200 	.word	0x20000200
 8000f1c:	200002b4 	.word	0x200002b4

08000f20 <get_sine_arr>:
#include "stdio.h"

float amplitude = 0.0f;   // used in task1
uint32_t sine_arr[100];
void get_sine_arr()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
	for (int i=0;i<100;i++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	e038      	b.n	8000f9e <get_sine_arr+0x7e>
	{
		sine_arr[i] = ((sin(2*M_PI*i/100)+1)*(4095/2));
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff faf9 	bl	8000524 <__aeabi_i2d>
 8000f32:	a324      	add	r3, pc, #144	; (adr r3, 8000fc4 <get_sine_arr+0xa4>)
 8000f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f38:	f7ff fb5e 	bl	80005f8 <__aeabi_dmul>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <get_sine_arr+0x98>)
 8000f4a:	f7ff fc7f 	bl	800084c <__aeabi_ddiv>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	ec43 2b17 	vmov	d7, r2, r3
 8000f56:	eeb0 0a47 	vmov.f32	s0, s14
 8000f5a:	eef0 0a67 	vmov.f32	s1, s15
 8000f5e:	f00b ff9b 	bl	800ce98 <sin>
 8000f62:	ec51 0b10 	vmov	r0, r1, d0
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <get_sine_arr+0x9c>)
 8000f6c:	f7ff f98e 	bl	800028c <__adddf3>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	a30d      	add	r3, pc, #52	; (adr r3, 8000fb0 <get_sine_arr+0x90>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	f7ff fb3b 	bl	80005f8 <__aeabi_dmul>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f7ff fe0d 	bl	8000ba8 <__aeabi_d2uiz>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	490b      	ldr	r1, [pc, #44]	; (8000fc0 <get_sine_arr+0xa0>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0;i<100;i++)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b63      	cmp	r3, #99	; 0x63
 8000fa2:	ddc3      	ble.n	8000f2c <get_sine_arr+0xc>
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	409ffc00 	.word	0x409ffc00
 8000fb8:	40590000 	.word	0x40590000
 8000fbc:	3ff00000 	.word	0x3ff00000
 8000fc0:	200004b8 	.word	0x200004b8
 8000fc4:	54442d18 	.word	0x54442d18
 8000fc8:	401921fb 	.word	0x401921fb

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b0a0      	sub	sp, #128	; 0x80
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f001 fb20 	bl	8002616 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f90b 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f000 fabf 	bl	800155c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fde:	f000 fa97 	bl	8001510 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000fe2:	f000 f9b3 	bl	800134c <MX_DFSDM1_Init>
  MX_USART1_UART_Init();
 8000fe6:	f000 fa63 	bl	80014b0 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000fea:	f000 f97d 	bl	80012e8 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000fee:	f000 fa13 	bl	8001418 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4868      	ldr	r0, [pc, #416]	; (8001198 <main+0x1cc>)
 8000ff6:	f001 fc6f 	bl	80028d8 <HAL_DAC_Start>
    HAL_TIM_Base_Start(&htim2);
 8000ffa:	4868      	ldr	r0, [pc, #416]	; (800119c <main+0x1d0>)
 8000ffc:	f004 fa90 	bl	8005520 <HAL_TIM_Base_Start>
    get_sine_arr();
 8001000:	f7ff ff8e 	bl	8000f20 <get_sine_arr>


  printf("\r\n\n**************** Program start! ****************\r\n\n");
 8001004:	4866      	ldr	r0, [pc, #408]	; (80011a0 <main+0x1d4>)
 8001006:	f009 ffc1 	bl	800af8c <puts>
  HAL_Delay(100);
 800100a:	2064      	movs	r0, #100	; 0x64
 800100c:	f001 fb3c 	bl	8002688 <HAL_Delay>

	if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, Buff, FFT_SampleNum) != HAL_OK)
 8001010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001014:	4963      	ldr	r1, [pc, #396]	; (80011a4 <main+0x1d8>)
 8001016:	4864      	ldr	r0, [pc, #400]	; (80011a8 <main+0x1dc>)
 8001018:	f002 f960 	bl	80032dc <HAL_DFSDM_FilterRegularStart_DMA>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <main+0x5a>
	{
		Error_Handler();
 8001022:	f000 ff49 	bl	8001eb8 <Error_Handler>
	}

	// FFT init
	FFT_SampleRate = SystemCoreClock / hdfsdm1_channel2.Init.OutputClock.Divider
 8001026:	4b61      	ldr	r3, [pc, #388]	; (80011ac <main+0x1e0>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4b61      	ldr	r3, [pc, #388]	; (80011b0 <main+0x1e4>)
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	fbb2 f2f3 	udiv	r2, r2, r3
			/ hdfsdm1_filter0.Init.FilterParam.Oversampling
 8001032:	4b5d      	ldr	r3, [pc, #372]	; (80011a8 <main+0x1dc>)
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	fbb2 f2f3 	udiv	r2, r2, r3
			/ hdfsdm1_filter0.Init.FilterParam.IntOversampling;
 800103a:	4b5b      	ldr	r3, [pc, #364]	; (80011a8 <main+0x1dc>)
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
	FFT_SampleRate = SystemCoreClock / hdfsdm1_channel2.Init.OutputClock.Divider
 8001042:	ee07 3a90 	vmov	s15, r3
 8001046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800104a:	4b5a      	ldr	r3, [pc, #360]	; (80011b4 <main+0x1e8>)
 800104c:	edc3 7a00 	vstr	s15, [r3]

	// Hanning window
	const float tmp = 2.0f * M_PI / (float) FFT_SampleNum;
 8001050:	4b59      	ldr	r3, [pc, #356]	; (80011b8 <main+0x1ec>)
 8001052:	677b      	str	r3, [r7, #116]	; 0x74
	for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8001054:	2300      	movs	r3, #0
 8001056:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001058:	e01f      	b.n	800109a <main+0xce>
		*(FFT_window + i) = 0.5f - 0.5f * arm_cos_f32((float) i * tmp);
 800105a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001064:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106c:	eeb0 0a67 	vmov.f32	s0, s15
 8001070:	f008 fd26 	bl	8009ac0 <arm_cos_f32>
 8001074:	eef0 7a40 	vmov.f32	s15, s0
 8001078:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800107c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4a4d      	ldr	r2, [pc, #308]	; (80011bc <main+0x1f0>)
 8001086:	4413      	add	r3, r2
 8001088:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800108c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001090:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8001094:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001096:	3301      	adds	r3, #1
 8001098:	67fb      	str	r3, [r7, #124]	; 0x7c
 800109a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800109c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010a0:	d3db      	bcc.n	800105a <main+0x8e>

	for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80010a6:	e016      	b.n	80010d6 <main+0x10a>
		*(FFT_frq + i) = (float)i * (float)FFT_SampleRate / (float) FFT_SampleNum;
 80010a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b2:	4b40      	ldr	r3, [pc, #256]	; (80011b4 <main+0x1e8>)
 80010b4:	edd3 7a00 	vldr	s15, [r3]
 80010b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4a3f      	ldr	r2, [pc, #252]	; (80011c0 <main+0x1f4>)
 80010c2:	4413      	add	r3, r2
 80010c4:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80011c4 <main+0x1f8>
 80010c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010cc:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 80010d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010d2:	3301      	adds	r3, #1
 80010d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80010d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010dc:	d3e4      	bcc.n	80010a8 <main+0xdc>

	arm_rfft_fast_init_f32(&S, FFT_SampleNum );
 80010de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e2:	4839      	ldr	r0, [pc, #228]	; (80011c8 <main+0x1fc>)
 80010e4:	f007 ff06 	bl	8008ef4 <arm_rfft_fast_init_f32>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue01 */
  osMessageQDef(Queue01, 256, uint32_t);
 80010e8:	4b38      	ldr	r3, [pc, #224]	; (80011cc <main+0x200>)
 80010ea:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80010ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue01Handle = osMessageCreate(osMessageQ(Queue01), NULL);
 80010f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 fcac 	bl	8006a58 <osMessageCreate>
 8001100:	4603      	mov	r3, r0
 8001102:	4a33      	ldr	r2, [pc, #204]	; (80011d0 <main+0x204>)
 8001104:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue02 */
  osMessageQDef(Queue02, 256, uint32_t);
 8001106:	4b31      	ldr	r3, [pc, #196]	; (80011cc <main+0x200>)
 8001108:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800110c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue02Handle = osMessageCreate(osMessageQ(Queue02), NULL);
 8001112:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f005 fc9d 	bl	8006a58 <osMessageCreate>
 800111e:	4603      	mov	r3, r0
 8001120:	4a2c      	ldr	r2, [pc, #176]	; (80011d4 <main+0x208>)
 8001122:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1_init, osPriorityAboveNormal, 0, 128);
 8001124:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <main+0x20c>)
 8001126:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800112a:	461d      	mov	r5, r3
 800112c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001130:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001134:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8001138:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f005 fc2a 	bl	8006998 <osThreadCreate>
 8001144:	4603      	mov	r3, r0
 8001146:	4a25      	ldr	r2, [pc, #148]	; (80011dc <main+0x210>)
 8001148:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask2_init, osPriorityNormal, 0, 128);
 800114a:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <main+0x214>)
 800114c:	f107 041c 	add.w	r4, r7, #28
 8001150:	461d      	mov	r5, r3
 8001152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001156:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800115a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f005 fc17 	bl	8006998 <osThreadCreate>
 800116a:	4603      	mov	r3, r0
 800116c:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <main+0x218>)
 800116e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, StartTask3_init, osPriorityBelowNormal, 0, 128);
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <main+0x21c>)
 8001172:	463c      	mov	r4, r7
 8001174:	461d      	mov	r5, r3
 8001176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800117e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8001182:	463b      	mov	r3, r7
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f005 fc06 	bl	8006998 <osThreadCreate>
 800118c:	4603      	mov	r3, r0
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <main+0x220>)
 8001190:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001192:	f005 fbfa 	bl	800698a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001196:	e7fe      	b.n	8001196 <main+0x1ca>
 8001198:	20000648 	.word	0x20000648
 800119c:	20000778 	.word	0x20000778
 80011a0:	0800e298 	.word	0x0800e298
 80011a4:	20000860 	.word	0x20000860
 80011a8:	200006a4 	.word	0x200006a4
 80011ac:	20000004 	.word	0x20000004
 80011b0:	200006f8 	.word	0x200006f8
 80011b4:	20004878 	.word	0x20004878
 80011b8:	3b490fdb 	.word	0x3b490fdb
 80011bc:	2000d87c 	.word	0x2000d87c
 80011c0:	2000c87c 	.word	0x2000c87c
 80011c4:	45000000 	.word	0x45000000
 80011c8:	20004860 	.word	0x20004860
 80011cc:	0800e2d0 	.word	0x0800e2d0
 80011d0:	20000854 	.word	0x20000854
 80011d4:	20000858 	.word	0x20000858
 80011d8:	0800e2e0 	.word	0x0800e2e0
 80011dc:	20000848 	.word	0x20000848
 80011e0:	0800e2fc 	.word	0x0800e2fc
 80011e4:	2000084c 	.word	0x2000084c
 80011e8:	0800e318 	.word	0x0800e318
 80011ec:	20000850 	.word	0x20000850

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0b8      	sub	sp, #224	; 0xe0
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011fa:	2244      	movs	r2, #68	; 0x44
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f009 f937 	bl	800a472 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	463b      	mov	r3, r7
 8001216:	2288      	movs	r2, #136	; 0x88
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f009 f929 	bl	800a472 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001220:	2310      	movs	r3, #16
 8001222:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001226:	2301      	movs	r3, #1
 8001228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001232:	2360      	movs	r3, #96	; 0x60
 8001234:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800123e:	2301      	movs	r3, #1
 8001240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001244:	2301      	movs	r3, #1
 8001246:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800124a:	2328      	movs	r3, #40	; 0x28
 800124c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001250:	2307      	movs	r3, #7
 8001252:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001266:	4618      	mov	r0, r3
 8001268:	f002 fe14 	bl	8003e94 <HAL_RCC_OscConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001272:	f000 fe21 	bl	8001eb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001276:	230f      	movs	r3, #15
 8001278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2303      	movs	r3, #3
 800127e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001294:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001298:	2104      	movs	r1, #4
 800129a:	4618      	mov	r0, r3
 800129c:	f003 f9d6 	bl	800464c <HAL_RCC_ClockConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80012a6:	f000 fe07 	bl	8001eb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_DFSDM1;
 80012aa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80012ae:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 fc1b 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80012c8:	f000 fdf6 	bl	8001eb8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012d0:	f002 fd8a 	bl	8003de8 <HAL_PWREx_ControlVoltageScaling>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0xee>
  {
    Error_Handler();
 80012da:	f000 fded 	bl	8001eb8 <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	37e0      	adds	r7, #224	; 0xe0
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2224      	movs	r2, #36	; 0x24
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f009 f8bc 	bl	800a472 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_DAC1_Init+0x5c>)
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <MX_DAC1_Init+0x60>)
 80012fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001300:	4810      	ldr	r0, [pc, #64]	; (8001344 <MX_DAC1_Init+0x5c>)
 8001302:	f001 fac7 	bl	8002894 <HAL_DAC_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800130c:	f000 fdd4 	bl	8001eb8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001314:	2324      	movs	r3, #36	; 0x24
 8001316:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <MX_DAC1_Init+0x5c>)
 800132c:	f001 fc51 	bl	8002bd2 <HAL_DAC_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001336:	f000 fdbf 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000648 	.word	0x20000648
 8001348:	40007400 	.word	0x40007400

0800134c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <MX_DFSDM1_Init+0xb8>)
 8001352:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <MX_DFSDM1_Init+0xbc>)
 8001354:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <MX_DFSDM1_Init+0xb8>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800135c:	4b29      	ldr	r3, [pc, #164]	; (8001404 <MX_DFSDM1_Init+0xb8>)
 800135e:	2201      	movs	r2, #1
 8001360:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8001362:	4b28      	ldr	r3, [pc, #160]	; (8001404 <MX_DFSDM1_Init+0xb8>)
 8001364:	2201      	movs	r2, #1
 8001366:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001368:	4b26      	ldr	r3, [pc, #152]	; (8001404 <MX_DFSDM1_Init+0xb8>)
 800136a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800136e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 32;
 8001370:	4b24      	ldr	r3, [pc, #144]	; (8001404 <MX_DFSDM1_Init+0xb8>)
 8001372:	2220      	movs	r2, #32
 8001374:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <MX_DFSDM1_Init+0xb8>)
 8001378:	2201      	movs	r2, #1
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800137c:	4821      	ldr	r0, [pc, #132]	; (8001404 <MX_DFSDM1_Init+0xb8>)
 800137e:	f001 fe8d 	bl	800309c <HAL_DFSDM_FilterInit>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8001388:	f000 fd96 	bl	8001eb8 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_DFSDM1_Init+0xc0>)
 800138e:	4a20      	ldr	r2, [pc, #128]	; (8001410 <MX_DFSDM1_Init+0xc4>)
 8001390:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_DFSDM1_Init+0xc0>)
 8001394:	2201      	movs	r2, #1
 8001396:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_DFSDM1_Init+0xc0>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 17;
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_DFSDM1_Init+0xc0>)
 80013a0:	2211      	movs	r2, #17
 80013a2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_DFSDM1_Init+0xc0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_DFSDM1_Init+0xc0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_DFSDM1_Init+0xc0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <MX_DFSDM1_Init+0xc0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_DFSDM1_Init+0xc0>)
 80013be:	2204      	movs	r2, #4
 80013c0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_DFSDM1_Init+0xc0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 10;
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_DFSDM1_Init+0xc0>)
 80013ca:	220a      	movs	r2, #10
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_DFSDM1_Init+0xc0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x02;
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <MX_DFSDM1_Init+0xc0>)
 80013d6:	2202      	movs	r2, #2
 80013d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80013da:	480c      	ldr	r0, [pc, #48]	; (800140c <MX_DFSDM1_Init+0xc0>)
 80013dc:	f001 fd9e 	bl	8002f1c <HAL_DFSDM_ChannelInit>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 80013e6:	f000 fd67 	bl	8001eb8 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80013ea:	2201      	movs	r2, #1
 80013ec:	4909      	ldr	r1, [pc, #36]	; (8001414 <MX_DFSDM1_Init+0xc8>)
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_DFSDM1_Init+0xb8>)
 80013f0:	f001 ff2e 	bl	8003250 <HAL_DFSDM_FilterConfigRegChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 80013fa:	f000 fd5d 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200006a4 	.word	0x200006a4
 8001408:	40016100 	.word	0x40016100
 800140c:	200006f8 	.word	0x200006f8
 8001410:	40016040 	.word	0x40016040
 8001414:	00020004 	.word	0x00020004

08001418 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_TIM2_Init+0x94>)
 8001438:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_TIM2_Init+0x94>)
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_TIM2_Init+0x94>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (int)(80000000/(FOUT*100));
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_TIM2_Init+0x94>)
 800144c:	22fa      	movs	r2, #250	; 0xfa
 800144e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_TIM2_Init+0x94>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_TIM2_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800145c:	4813      	ldr	r0, [pc, #76]	; (80014ac <MX_TIM2_Init+0x94>)
 800145e:	f004 f807 	bl	8005470 <HAL_TIM_Base_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001468:	f000 fd26 	bl	8001eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001470:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <MX_TIM2_Init+0x94>)
 800147a:	f004 fa48 	bl	800590e <HAL_TIM_ConfigClockSource>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001484:	f000 fd18 	bl	8001eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001488:	2320      	movs	r3, #32
 800148a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_TIM2_Init+0x94>)
 8001496:	f004 fc5f 	bl	8005d58 <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014a0:	f000 fd0a 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000778 	.word	0x20000778

080014b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014b6:	4a15      	ldr	r2, [pc, #84]	; (800150c <MX_USART1_UART_Init+0x5c>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014f4:	f004 fcd6 	bl	8005ea4 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014fe:	f000 fcdb 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200007c4 	.word	0x200007c4
 800150c:	40013800 	.word	0x40013800

08001510 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <MX_DMA_Init+0x48>)
 8001518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151a:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <MX_DMA_Init+0x48>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6493      	str	r3, [r2, #72]	; 0x48
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <MX_DMA_Init+0x48>)
 8001524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2105      	movs	r1, #5
 8001532:	200d      	movs	r0, #13
 8001534:	f001 f984 	bl	8002840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001538:	200d      	movs	r0, #13
 800153a:	f001 f99d 	bl	8002878 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2105      	movs	r1, #5
 8001542:	200e      	movs	r0, #14
 8001544:	f001 f97c 	bl	8002840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001548:	200e      	movs	r0, #14
 800154a:	f001 f995 	bl	8002878 <HAL_NVIC_EnableIRQ>

}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001572:	4bbd      	ldr	r3, [pc, #756]	; (8001868 <MX_GPIO_Init+0x30c>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	4abc      	ldr	r2, [pc, #752]	; (8001868 <MX_GPIO_Init+0x30c>)
 8001578:	f043 0310 	orr.w	r3, r3, #16
 800157c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157e:	4bba      	ldr	r3, [pc, #744]	; (8001868 <MX_GPIO_Init+0x30c>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158a:	4bb7      	ldr	r3, [pc, #732]	; (8001868 <MX_GPIO_Init+0x30c>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	4ab6      	ldr	r2, [pc, #728]	; (8001868 <MX_GPIO_Init+0x30c>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001596:	4bb4      	ldr	r3, [pc, #720]	; (8001868 <MX_GPIO_Init+0x30c>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4bb1      	ldr	r3, [pc, #708]	; (8001868 <MX_GPIO_Init+0x30c>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4ab0      	ldr	r2, [pc, #704]	; (8001868 <MX_GPIO_Init+0x30c>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4bae      	ldr	r3, [pc, #696]	; (8001868 <MX_GPIO_Init+0x30c>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	4bab      	ldr	r3, [pc, #684]	; (8001868 <MX_GPIO_Init+0x30c>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	4aaa      	ldr	r2, [pc, #680]	; (8001868 <MX_GPIO_Init+0x30c>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c6:	4ba8      	ldr	r3, [pc, #672]	; (8001868 <MX_GPIO_Init+0x30c>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d2:	4ba5      	ldr	r3, [pc, #660]	; (8001868 <MX_GPIO_Init+0x30c>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	4aa4      	ldr	r2, [pc, #656]	; (8001868 <MX_GPIO_Init+0x30c>)
 80015d8:	f043 0308 	orr.w	r3, r3, #8
 80015dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015de:	4ba2      	ldr	r3, [pc, #648]	; (8001868 <MX_GPIO_Init+0x30c>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 718a 	mov.w	r1, #276	; 0x114
 80015f0:	489e      	ldr	r0, [pc, #632]	; (800186c <MX_GPIO_Init+0x310>)
 80015f2:	f002 fbaf 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	f248 1104 	movw	r1, #33028	; 0x8104
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001600:	f002 fba8 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001604:	2200      	movs	r2, #0
 8001606:	f24f 0114 	movw	r1, #61460	; 0xf014
 800160a:	4899      	ldr	r0, [pc, #612]	; (8001870 <MX_GPIO_Init+0x314>)
 800160c:	f002 fba2 	bl	8003d54 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	f241 0181 	movw	r1, #4225	; 0x1081
 8001616:	4897      	ldr	r0, [pc, #604]	; (8001874 <MX_GPIO_Init+0x318>)
 8001618:	f002 fb9c 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001622:	4894      	ldr	r0, [pc, #592]	; (8001874 <MX_GPIO_Init+0x318>)
 8001624:	f002 fb96 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800162e:	4892      	ldr	r0, [pc, #584]	; (8001878 <MX_GPIO_Init+0x31c>)
 8001630:	f002 fb90 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	2120      	movs	r1, #32
 8001638:	488d      	ldr	r0, [pc, #564]	; (8001870 <MX_GPIO_Init+0x314>)
 800163a:	f002 fb8b 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800163e:	2201      	movs	r2, #1
 8001640:	2101      	movs	r1, #1
 8001642:	488a      	ldr	r0, [pc, #552]	; (800186c <MX_GPIO_Init+0x310>)
 8001644:	f002 fb86 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001648:	f240 1315 	movw	r3, #277	; 0x115
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4882      	ldr	r0, [pc, #520]	; (800186c <MX_GPIO_Init+0x310>)
 8001662:	f002 f9cd 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001666:	236a      	movs	r3, #106	; 0x6a
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800166e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	487c      	ldr	r0, [pc, #496]	; (800186c <MX_GPIO_Init+0x310>)
 800167c:	f002 f9c0 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001686:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800168a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	4878      	ldr	r0, [pc, #480]	; (8001878 <MX_GPIO_Init+0x31c>)
 8001698:	f002 f9b2 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800169c:	233f      	movs	r3, #63	; 0x3f
 800169e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016a0:	230b      	movs	r3, #11
 80016a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	4872      	ldr	r0, [pc, #456]	; (8001878 <MX_GPIO_Init+0x31c>)
 80016b0:	f002 f9a6 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80016b4:	2303      	movs	r3, #3
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016c4:	2308      	movs	r3, #8
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d2:	f002 f995 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80016d6:	f248 1304 	movw	r3, #33028	; 0x8104
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f2:	f002 f985 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80016f6:	2310      	movs	r3, #16
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fa:	2303      	movs	r3, #3
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170c:	f002 f978 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001710:	23e0      	movs	r3, #224	; 0xe0
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001720:	2305      	movs	r3, #5
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172e:	f002 f967 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001732:	2301      	movs	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001736:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	484a      	ldr	r0, [pc, #296]	; (8001870 <MX_GPIO_Init+0x314>)
 8001748:	f002 f95a 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800174c:	2302      	movs	r3, #2
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001750:	230b      	movs	r3, #11
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4844      	ldr	r0, [pc, #272]	; (8001870 <MX_GPIO_Init+0x314>)
 8001760:	f002 f94e 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001764:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001768:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	483c      	ldr	r0, [pc, #240]	; (8001870 <MX_GPIO_Init+0x314>)
 800177e:	f002 f93f 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001782:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001786:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001794:	230a      	movs	r3, #10
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	4833      	ldr	r0, [pc, #204]	; (800186c <MX_GPIO_Init+0x310>)
 80017a0:	f002 f92e 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80017a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017aa:	2312      	movs	r3, #18
 80017ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017b6:	2304      	movs	r3, #4
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	482b      	ldr	r0, [pc, #172]	; (8001870 <MX_GPIO_Init+0x314>)
 80017c2:	f002 f91d 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80017c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017d8:	2307      	movs	r3, #7
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	4824      	ldr	r0, [pc, #144]	; (8001874 <MX_GPIO_Init+0x318>)
 80017e4:	f002 f90c 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80017e8:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80017ec:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	481d      	ldr	r0, [pc, #116]	; (8001874 <MX_GPIO_Init+0x318>)
 8001800:	f002 f8fe 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001804:	f243 0381 	movw	r3, #12417	; 0x3081
 8001808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	2301      	movs	r3, #1
 800180c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4815      	ldr	r0, [pc, #84]	; (8001874 <MX_GPIO_Init+0x318>)
 800181e:	f002 f8ef 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001822:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	480f      	ldr	r0, [pc, #60]	; (8001878 <MX_GPIO_Init+0x31c>)
 800183c:	f002 f8e0 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001840:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001846:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	4808      	ldr	r0, [pc, #32]	; (8001878 <MX_GPIO_Init+0x31c>)
 8001858:	f002 f8d2 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800185c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001862:	2300      	movs	r3, #0
 8001864:	e00a      	b.n	800187c <MX_GPIO_Init+0x320>
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	48001000 	.word	0x48001000
 8001870:	48000400 	.word	0x48000400
 8001874:	48000c00 	.word	0x48000c00
 8001878:	48000800 	.word	0x48000800
 800187c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188c:	f002 f8b8 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001890:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018a2:	230a      	movs	r3, #10
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b0:	f002 f8a6 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80018b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018c6:	2306      	movs	r3, #6
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4823      	ldr	r0, [pc, #140]	; (8001960 <MX_GPIO_Init+0x404>)
 80018d2:	f002 f895 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80018d6:	2302      	movs	r3, #2
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018e6:	2305      	movs	r3, #5
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	481c      	ldr	r0, [pc, #112]	; (8001964 <MX_GPIO_Init+0x408>)
 80018f2:	f002 f885 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80018f6:	2378      	movs	r3, #120	; 0x78
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001906:	2307      	movs	r3, #7
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4814      	ldr	r0, [pc, #80]	; (8001964 <MX_GPIO_Init+0x408>)
 8001912:	f002 f875 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001916:	f44f 7340 	mov.w	r3, #768	; 0x300
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191c:	2312      	movs	r3, #18
 800191e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001920:	2301      	movs	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001928:	2304      	movs	r3, #4
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_GPIO_Init+0x40c>)
 8001934:	f002 f864 	bl	8003a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2105      	movs	r1, #5
 800193c:	2017      	movs	r0, #23
 800193e:	f000 ff7f 	bl	8002840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001942:	2017      	movs	r0, #23
 8001944:	f000 ff98 	bl	8002878 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2105      	movs	r1, #5
 800194c:	2028      	movs	r0, #40	; 0x28
 800194e:	f000 ff77 	bl	8002840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001952:	2028      	movs	r0, #40	; 0x28
 8001954:	f000 ff90 	bl	8002878 <HAL_NVIC_EnableIRQ>

}
 8001958:	bf00      	nop
 800195a:	3728      	adds	r7, #40	; 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	48000800 	.word	0x48000800
 8001964:	48000c00 	.word	0x48000c00
 8001968:	48000400 	.word	0x48000400

0800196c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
    /*static int i = 0;
    printf("%d\r\n", i);
    i++;*/
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_DFSDM_FilterRegConvCpltCallback>:
            using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
    if (flag)
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x48>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d015      	beq.n	80019bc <HAL_DFSDM_FilterRegConvCpltCallback+0x3c>
    {
        for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	e00b      	b.n	80019ae <HAL_DFSDM_FilterRegConvCpltCallback+0x2e>
        {
            FFT_inp_int32[i] = Buff[i]>>8;
 8001996:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <HAL_DFSDM_FilterRegConvCpltCallback+0x4c>)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199e:	121a      	asrs	r2, r3, #8
 80019a0:	490b      	ldr	r1, [pc, #44]	; (80019d0 <HAL_DFSDM_FilterRegConvCpltCallback+0x50>)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (uint32_t i = 0; i < FFT_SampleNum; i++)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3301      	adds	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019b4:	d3ef      	bcc.n	8001996 <HAL_DFSDM_FilterRegConvCpltCallback+0x16>
        }
        flag = false;
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x48>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
    }
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000860 	.word	0x20000860
 80019d0:	2000487c 	.word	0x2000487c

080019d4 <_write>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
int _write(int file, char *ptr, int len)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 0xFFFFFFFF);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	4804      	ldr	r0, [pc, #16]	; (80019fc <_write+0x28>)
 80019ec:	f004 faa8 	bl	8005f40 <HAL_UART_Transmit>
    return len;
 80019f0:	687b      	ldr	r3, [r7, #4]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200007c4 	.word	0x200007c4

08001a00 <StartTask1_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1_init */
void StartTask1_init(void const * argument)
{
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	ed2d 8b02 	vpush	{d8}
 8001a06:	b08e      	sub	sp, #56	; 0x38
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount ();
 8001a0c:	f006 f8ea 	bl	8007be4 <xTaskGetTickCount>
 8001a10:	4603      	mov	r3, r0
 8001a12:	617b      	str	r3, [r7, #20]
	printf("\r\n==========Task 1 Started, Detecting Wave and Comput. FFT =========== \r\n");
 8001a14:	4888      	ldr	r0, [pc, #544]	; (8001c38 <StartTask1_init+0x238>)
 8001a16:	f009 fab9 	bl	800af8c <puts>

	  /* Infinite loop */
	  for(;;)
	  {
		  //Running Task for 0.1 sec
		  vTaskDelayUntil( &xLastWakeTime, 100);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	2164      	movs	r1, #100	; 0x64
 8001a20:	4618      	mov	r0, r3
 8001a22:	f005 fe87 	bl	8007734 <vTaskDelayUntil>

			  // Wait
			  while (flag);
 8001a26:	bf00      	nop
 8001a28:	4b84      	ldr	r3, [pc, #528]	; (8001c3c <StartTask1_init+0x23c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1fb      	bne.n	8001a28 <StartTask1_init+0x28>

			  // Set input data
			  for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a34:	e010      	b.n	8001a58 <StartTask1_init+0x58>
				  FFT_inp[i] = (float) FFT_inp_int32[i];
 8001a36:	4a82      	ldr	r2, [pc, #520]	; (8001c40 <StartTask1_init+0x240>)
 8001a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a46:	4a7f      	ldr	r2, [pc, #508]	; (8001c44 <StartTask1_init+0x244>)
 8001a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	edc3 7a00 	vstr	s15, [r3]
			  for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	3301      	adds	r3, #1
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a5e:	d3ea      	bcc.n	8001a36 <StartTask1_init+0x36>

			  // Windowing
			  arm_mult_f32(FFT_inp, FFT_window, FFT_inp, FFT_SampleNum);
 8001a60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a64:	4a77      	ldr	r2, [pc, #476]	; (8001c44 <StartTask1_init+0x244>)
 8001a66:	4978      	ldr	r1, [pc, #480]	; (8001c48 <StartTask1_init+0x248>)
 8001a68:	4876      	ldr	r0, [pc, #472]	; (8001c44 <StartTask1_init+0x244>)
 8001a6a:	f008 f8b7 	bl	8009bdc <arm_mult_f32>

			  // Execute FFT
			  arm_rfft_fast_f32(&S, FFT_inp, FFT_oup, 0);
 8001a6e:	2300      	movs	r3, #0
 8001a70:	4a76      	ldr	r2, [pc, #472]	; (8001c4c <StartTask1_init+0x24c>)
 8001a72:	4974      	ldr	r1, [pc, #464]	; (8001c44 <StartTask1_init+0x244>)
 8001a74:	4876      	ldr	r0, [pc, #472]	; (8001c50 <StartTask1_init+0x250>)
 8001a76:	f007 fb21 	bl	80090bc <arm_rfft_fast_f32>

			  // calculate magnitude
			  arm_cmplx_mag_f32(FFT_oup, FFT_mag, FFT_SampleNum / 2);
 8001a7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a7e:	4975      	ldr	r1, [pc, #468]	; (8001c54 <StartTask1_init+0x254>)
 8001a80:	4872      	ldr	r0, [pc, #456]	; (8001c4c <StartTask1_init+0x24c>)
 8001a82:	f007 fef9 	bl	8009878 <arm_cmplx_mag_f32>

			  // Normalization (Unitary transformation) of magnitude
			  arm_scale_f32(FFT_mag, 1.0f / sqrtf((float) FFT_SampleNum), FFT_mag, FFT_SampleNum / 2);
 8001a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8a:	4972      	ldr	r1, [pc, #456]	; (8001c54 <StartTask1_init+0x254>)
 8001a8c:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8001c58 <StartTask1_init+0x258>
 8001a90:	4870      	ldr	r0, [pc, #448]	; (8001c54 <StartTask1_init+0x254>)
 8001a92:	f008 f85f 	bl	8009b54 <arm_scale_f32>

			  // AC coupling
			  for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a9a:	e017      	b.n	8001acc <StartTask1_init+0xcc>
			  {
				  if (*(FFT_frq + i) < FFT_AC_COUPLING_HZ)
 8001a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4a6e      	ldr	r2, [pc, #440]	; (8001c5c <StartTask1_init+0x25c>)
 8001aa2:	4413      	add	r3, r2
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001c60 <StartTask1_init+0x260>
 8001aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab4:	d400      	bmi.n	8001ab8 <StartTask1_init+0xb8>
					  FFT_mag[i] = 1.0f;
				  else
					  break;
 8001ab6:	e00d      	b.n	8001ad4 <StartTask1_init+0xd4>
					  FFT_mag[i] = 1.0f;
 8001ab8:	4a66      	ldr	r2, [pc, #408]	; (8001c54 <StartTask1_init+0x254>)
 8001aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ac4:	601a      	str	r2, [r3, #0]
			  for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 8001ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac8:	3301      	adds	r3, #1
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8001acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad2:	d3e3      	bcc.n	8001a9c <StartTask1_init+0x9c>
			  }

			  float inv_dB_base_mag = 1.0f / 1.0f;
 8001ad4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ad8:	61fb      	str	r3, [r7, #28]
			  for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	e01c      	b.n	8001b1a <StartTask1_init+0x11a>
				  FFT_dB[i] = 10.0f * log10f(FFT_mag[i] * inv_dB_base_mag);
 8001ae0:	4a5c      	ldr	r2, [pc, #368]	; (8001c54 <StartTask1_init+0x254>)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	ed93 7a00 	vldr	s14, [r3]
 8001aec:	edd7 7a07 	vldr	s15, [r7, #28]
 8001af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af4:	eeb0 0a67 	vmov.f32	s0, s15
 8001af8:	f00b fa26 	bl	800cf48 <log10f>
 8001afc:	eef0 7a40 	vmov.f32	s15, s0
 8001b00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b08:	4a56      	ldr	r2, [pc, #344]	; (8001c64 <StartTask1_init+0x264>)
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	edc3 7a00 	vstr	s15, [r3]
			  for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	3301      	adds	r3, #1
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b20:	d3de      	bcc.n	8001ae0 <StartTask1_init+0xe0>

			  // calc max mag
			  float mag_max, frq_max;
			  uint32_t maxIndex;
			  arm_max_f32(FFT_mag, FFT_SampleNum / 2, &mag_max, &maxIndex);
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	f107 0210 	add.w	r2, r7, #16
 8001b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b2e:	4849      	ldr	r0, [pc, #292]	; (8001c54 <StartTask1_init+0x254>)
 8001b30:	f007 f8ac 	bl	8008c8c <arm_max_f32>
			  frq_max = *(FFT_frq + maxIndex);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4a48      	ldr	r2, [pc, #288]	; (8001c5c <StartTask1_init+0x25c>)
 8001b3a:	4413      	add	r3, r2
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	61bb      	str	r3, [r7, #24]

				 // amplitude = mag_max;
				for (uint32_t i = 0; i < FFT_SampleNum / 2; i++){
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
 8001b44:	e010      	b.n	8001b68 <StartTask1_init+0x168>
							amplitude += FFT_mag[i];
 8001b46:	4a43      	ldr	r2, [pc, #268]	; (8001c54 <StartTask1_init+0x254>)
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	ed93 7a00 	vldr	s14, [r3]
 8001b52:	4b45      	ldr	r3, [pc, #276]	; (8001c68 <StartTask1_init+0x268>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5c:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <StartTask1_init+0x268>)
 8001b5e:	edc3 7a00 	vstr	s15, [r3]
				for (uint32_t i = 0; i < FFT_SampleNum / 2; i++){
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	3301      	adds	r3, #1
 8001b66:	623b      	str	r3, [r7, #32]
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6e:	d3ea      	bcc.n	8001b46 <StartTask1_init+0x146>

				}

			   amplitude = 2*amplitude/FFT_SampleNum ;
 8001b70:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <StartTask1_init+0x268>)
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b7a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001c6c <StartTask1_init+0x26c>
 8001b7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b82:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <StartTask1_init+0x268>)
 8001b84:	edc3 7a00 	vstr	s15, [r3]
			//printf("Average Amplitude is: %f\r\n", amplitude);

			  printf("\r\nSampleRate=%d, frq_max = %.1f, mag_max = %f\r\n", (int)FFT_SampleRate, frq_max, mag_max);
 8001b88:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <StartTask1_init+0x270>)
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8001b92:	69b8      	ldr	r0, [r7, #24]
 8001b94:	f7fe fcd8 	bl	8000548 <__aeabi_f2d>
 8001b98:	4604      	mov	r4, r0
 8001b9a:	460d      	mov	r5, r1
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcd2 	bl	8000548 <__aeabi_f2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	e9cd 2300 	strd	r2, r3, [sp]
 8001bac:	4622      	mov	r2, r4
 8001bae:	462b      	mov	r3, r5
 8001bb0:	ee18 1a10 	vmov	r1, s16
 8001bb4:	482f      	ldr	r0, [pc, #188]	; (8001c74 <StartTask1_init+0x274>)
 8001bb6:	f009 f963 	bl	800ae80 <iprintf>

			  HAL_Delay(1000);
 8001bba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bbe:	f000 fd63 	bl	8002688 <HAL_Delay>
			  flag = true;        // <- Continuous transformation
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <StartTask1_init+0x23c>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]


			  if(frq_max >= FREQ-DELTA && frq_max <= FREQ+DELTA){
 8001bc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bcc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001c78 <StartTask1_init+0x278>
 8001bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd8:	db2d      	blt.n	8001c36 <StartTask1_init+0x236>
 8001bda:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bde:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001c7c <StartTask1_init+0x27c>
 8001be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bea:	d824      	bhi.n	8001c36 <StartTask1_init+0x236>

					osMessagePut(Queue01Handle, frq_max, 100); //writing freq into queue!
 8001bec:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <StartTask1_init+0x280>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf8:	2264      	movs	r2, #100	; 0x64
 8001bfa:	ee17 1a90 	vmov	r1, s15
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f004 ff52 	bl	8006aa8 <osMessagePut>

					printf("\r\n\n ===============     Freq Detected :   =============== \r\n" );
 8001c04:	481f      	ldr	r0, [pc, #124]	; (8001c84 <StartTask1_init+0x284>)
 8001c06:	f009 f9c1 	bl	800af8c <puts>
					printf("\r ===== Freq. is withing Range [%d, %d] as Value of frq is %f: ==== \r\n",(FREQ-DELTA), (FREQ+DELTA), frq_max);
 8001c0a:	69b8      	ldr	r0, [r7, #24]
 8001c0c:	f7fe fc9c 	bl	8000548 <__aeabi_f2d>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	e9cd 2300 	strd	r2, r3, [sp]
 8001c18:	f640 421c 	movw	r2, #3100	; 0xc1c
 8001c1c:	f640 3154 	movw	r1, #2900	; 0xb54
 8001c20:	4819      	ldr	r0, [pc, #100]	; (8001c88 <StartTask1_init+0x288>)
 8001c22:	f009 f92d 	bl	800ae80 <iprintf>
					printf(" ===============    Task1 Suspended :   =============== \r\n\n" );
 8001c26:	4819      	ldr	r0, [pc, #100]	; (8001c8c <StartTask1_init+0x28c>)
 8001c28:	f009 f9b0 	bl	800af8c <puts>


					vTaskSuspend(Task1Handle);
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <StartTask1_init+0x290>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f005 fe31 	bl	8007898 <vTaskSuspend>
	  {
 8001c36:	e6f0      	b.n	8001a1a <StartTask1_init+0x1a>
 8001c38:	0800e334 	.word	0x0800e334
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	2000487c 	.word	0x2000487c
 8001c44:	2000687c 	.word	0x2000687c
 8001c48:	2000d87c 	.word	0x2000d87c
 8001c4c:	2000887c 	.word	0x2000887c
 8001c50:	20004860 	.word	0x20004860
 8001c54:	2000a87c 	.word	0x2000a87c
 8001c58:	3cb504f3 	.word	0x3cb504f3
 8001c5c:	2000c87c 	.word	0x2000c87c
 8001c60:	447a0000 	.word	0x447a0000
 8001c64:	2000b87c 	.word	0x2000b87c
 8001c68:	200004b4 	.word	0x200004b4
 8001c6c:	45000000 	.word	0x45000000
 8001c70:	20004878 	.word	0x20004878
 8001c74:	0800e380 	.word	0x0800e380
 8001c78:	45354000 	.word	0x45354000
 8001c7c:	4541c000 	.word	0x4541c000
 8001c80:	20000854 	.word	0x20000854
 8001c84:	0800e3b0 	.word	0x0800e3b0
 8001c88:	0800e3ec 	.word	0x0800e3ec
 8001c8c:	0800e434 	.word	0x0800e434
 8001c90:	20000848 	.word	0x20000848

08001c94 <StartTask2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2_init */
void StartTask2_init(void const * argument)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2_init */
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount ();
 8001c9c:	f005 ffa2 	bl	8007be4 <xTaskGetTickCount>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60fb      	str	r3, [r7, #12]

	printf("\r\n==========Task 2 Started, Detecting Silence =========== \r\n");
 8001ca4:	4852      	ldr	r0, [pc, #328]	; (8001df0 <StartTask2_init+0x15c>)
 8001ca6:	f009 f971 	bl	800af8c <puts>
  /* Infinite loop */

  for(;;)
  {
	 vTaskDelayUntil( &xLastWakeTime, 100);
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	2164      	movs	r1, #100	; 0x64
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f005 fd3f 	bl	8007734 <vTaskDelayUntil>
	 flag = true;  // starting again fft process
 8001cb6:	4b4f      	ldr	r3, [pc, #316]	; (8001df4 <StartTask2_init+0x160>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]

	 while(flag);
 8001cbc:	bf00      	nop
 8001cbe:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <StartTask2_init+0x160>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1fb      	bne.n	8001cbe <StartTask2_init+0x2a>

	 for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e010      	b.n	8001cee <StartTask2_init+0x5a>
		  FFT_inp[i] = (float) FFT_inp_int32[i];
 8001ccc:	4a4a      	ldr	r2, [pc, #296]	; (8001df8 <StartTask2_init+0x164>)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cdc:	4a47      	ldr	r2, [pc, #284]	; (8001dfc <StartTask2_init+0x168>)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	edc3 7a00 	vstr	s15, [r3]
	 for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	3301      	adds	r3, #1
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cf4:	d3ea      	bcc.n	8001ccc <StartTask2_init+0x38>

	  // Windowing
	  arm_mult_f32(FFT_inp, FFT_window, FFT_inp, FFT_SampleNum);
 8001cf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cfa:	4a40      	ldr	r2, [pc, #256]	; (8001dfc <StartTask2_init+0x168>)
 8001cfc:	4940      	ldr	r1, [pc, #256]	; (8001e00 <StartTask2_init+0x16c>)
 8001cfe:	483f      	ldr	r0, [pc, #252]	; (8001dfc <StartTask2_init+0x168>)
 8001d00:	f007 ff6c 	bl	8009bdc <arm_mult_f32>

	  // Execute FFT
	  arm_rfft_fast_f32(&S, FFT_inp, FFT_oup, 0);
 8001d04:	2300      	movs	r3, #0
 8001d06:	4a3f      	ldr	r2, [pc, #252]	; (8001e04 <StartTask2_init+0x170>)
 8001d08:	493c      	ldr	r1, [pc, #240]	; (8001dfc <StartTask2_init+0x168>)
 8001d0a:	483f      	ldr	r0, [pc, #252]	; (8001e08 <StartTask2_init+0x174>)
 8001d0c:	f007 f9d6 	bl	80090bc <arm_rfft_fast_f32>

	  // calculate magnitude
	  arm_cmplx_mag_f32(FFT_oup, FFT_mag, FFT_SampleNum / 2);
 8001d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d14:	493d      	ldr	r1, [pc, #244]	; (8001e0c <StartTask2_init+0x178>)
 8001d16:	483b      	ldr	r0, [pc, #236]	; (8001e04 <StartTask2_init+0x170>)
 8001d18:	f007 fdae 	bl	8009878 <arm_cmplx_mag_f32>

	  // Normalization (Unitary transformation) of magnitude
	  arm_scale_f32(FFT_mag, 1.0f / sqrtf((float) FFT_SampleNum), FFT_mag, FFT_SampleNum / 2);
 8001d1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d20:	493a      	ldr	r1, [pc, #232]	; (8001e0c <StartTask2_init+0x178>)
 8001d22:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8001e10 <StartTask2_init+0x17c>
 8001d26:	4839      	ldr	r0, [pc, #228]	; (8001e0c <StartTask2_init+0x178>)
 8001d28:	f007 ff14 	bl	8009b54 <arm_scale_f32>

	  // AC coupling
	  for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	e017      	b.n	8001d62 <StartTask2_init+0xce>
	  {
		  if (*(FFT_frq + i) < FFT_AC_COUPLING_HZ)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4a37      	ldr	r2, [pc, #220]	; (8001e14 <StartTask2_init+0x180>)
 8001d38:	4413      	add	r3, r2
 8001d3a:	edd3 7a00 	vldr	s15, [r3]
 8001d3e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001e18 <StartTask2_init+0x184>
 8001d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4a:	d400      	bmi.n	8001d4e <StartTask2_init+0xba>
			  FFT_mag[i] = 1.0f;
		  else
			  break;
 8001d4c:	e00d      	b.n	8001d6a <StartTask2_init+0xd6>
			  FFT_mag[i] = 1.0f;
 8001d4e:	4a2f      	ldr	r2, [pc, #188]	; (8001e0c <StartTask2_init+0x178>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d5a:	601a      	str	r2, [r3, #0]
	  for (uint32_t i = 0; i < FFT_SampleNum / 2; i++)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d68:	d3e3      	bcc.n	8001d32 <StartTask2_init+0x9e>
	  }



	 float avgamp = 0.0f;
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
	 for (uint32_t i = 0; i < FFT_SampleNum / 2; i++){
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	e00e      	b.n	8001d94 <StartTask2_init+0x100>
		 avgamp += FFT_mag[i];
 8001d76:	4a25      	ldr	r2, [pc, #148]	; (8001e0c <StartTask2_init+0x178>)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8a:	edc7 7a05 	vstr	s15, [r7, #20]
	 for (uint32_t i = 0; i < FFT_SampleNum / 2; i++){
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	3301      	adds	r3, #1
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9a:	d3ec      	bcc.n	8001d76 <StartTask2_init+0xe2>
	 }
	 avgamp = 2*avgamp/FFT_SampleNum ;
 8001d9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001da0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001da4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001e1c <StartTask2_init+0x188>
 8001da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dac:	edc7 7a05 	vstr	s15, [r7, #20]
	 printf("\r\namp value : %f",avgamp);
 8001db0:	6978      	ldr	r0, [r7, #20]
 8001db2:	f7fe fbc9 	bl	8000548 <__aeabi_f2d>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4819      	ldr	r0, [pc, #100]	; (8001e20 <StartTask2_init+0x18c>)
 8001dbc:	f009 f860 	bl	800ae80 <iprintf>

	  if(avgamp < 1.5){
 8001dc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dc4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd0:	d50d      	bpl.n	8001dee <StartTask2_init+0x15a>


		printf("\r\n\n ===============     Silence Detected :   =============== \r\n");
 8001dd2:	4814      	ldr	r0, [pc, #80]	; (8001e24 <StartTask2_init+0x190>)
 8001dd4:	f009 f8da 	bl	800af8c <puts>
		task3_flag = true;
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <StartTask2_init+0x194>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]

		printf("===============    Task2 Suspended    =============== \r\n\n");
 8001dde:	4813      	ldr	r0, [pc, #76]	; (8001e2c <StartTask2_init+0x198>)
 8001de0:	f009 f8d4 	bl	800af8c <puts>
		vTaskSuspend(Task2Handle);
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <StartTask2_init+0x19c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f005 fd55 	bl	8007898 <vTaskSuspend>
  {
 8001dee:	e75c      	b.n	8001caa <StartTask2_init+0x16>
 8001df0:	0800e470 	.word	0x0800e470
 8001df4:	20000000 	.word	0x20000000
 8001df8:	2000487c 	.word	0x2000487c
 8001dfc:	2000687c 	.word	0x2000687c
 8001e00:	2000d87c 	.word	0x2000d87c
 8001e04:	2000887c 	.word	0x2000887c
 8001e08:	20004860 	.word	0x20004860
 8001e0c:	2000a87c 	.word	0x2000a87c
 8001e10:	3cb504f3 	.word	0x3cb504f3
 8001e14:	2000c87c 	.word	0x2000c87c
 8001e18:	447a0000 	.word	0x447a0000
 8001e1c:	45000000 	.word	0x45000000
 8001e20:	0800e4ac 	.word	0x0800e4ac
 8001e24:	0800e4c0 	.word	0x0800e4c0
 8001e28:	2000085c 	.word	0x2000085c
 8001e2c:	0800e500 	.word	0x0800e500
 8001e30:	2000084c 	.word	0x2000084c

08001e34 <StartTask3_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3_init */
void StartTask3_init(void const * argument)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	6078      	str	r0, [r7, #4]

   /* Infinite loop */
  for(;;)
  {

	  if(task3_flag == true){
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <StartTask3_init+0x48>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0fb      	beq.n	8001e3c <StartTask3_init+0x8>

		  printf("================ Generating Wave ================ \r\n");
 8001e44:	480e      	ldr	r0, [pc, #56]	; (8001e80 <StartTask3_init+0x4c>)
 8001e46:	f009 f8a1 	bl	800af8c <puts>
		  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_arr, 100, DAC_ALIGN_12B_R);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2364      	movs	r3, #100	; 0x64
 8001e50:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <StartTask3_init+0x50>)
 8001e52:	2100      	movs	r1, #0
 8001e54:	480c      	ldr	r0, [pc, #48]	; (8001e88 <StartTask3_init+0x54>)
 8001e56:	f000 fd8d 	bl	8002974 <HAL_DAC_Start_DMA>
		  osDelay(TOUT);
 8001e5a:	f242 7010 	movw	r0, #10000	; 0x2710
 8001e5e:	f004 fde7 	bl	8006a30 <osDelay>
		  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001e62:	2100      	movs	r1, #0
 8001e64:	4808      	ldr	r0, [pc, #32]	; (8001e88 <StartTask3_init+0x54>)
 8001e66:	f000 fe51 	bl	8002b0c <HAL_DAC_Stop_DMA>

		  printf("================ Task3 Suspended ================ \r\n");
 8001e6a:	4808      	ldr	r0, [pc, #32]	; (8001e8c <StartTask3_init+0x58>)
 8001e6c:	f009 f88e 	bl	800af8c <puts>
		  vTaskSuspend(Task3Handle);
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <StartTask3_init+0x5c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f005 fd0f 	bl	8007898 <vTaskSuspend>
	  if(task3_flag == true){
 8001e7a:	e7df      	b.n	8001e3c <StartTask3_init+0x8>
 8001e7c:	2000085c 	.word	0x2000085c
 8001e80:	0800e53c 	.word	0x0800e53c
 8001e84:	200004b8 	.word	0x200004b8
 8001e88:	20000648 	.word	0x20000648
 8001e8c:	0800e570 	.word	0x0800e570
 8001e90:	20000850 	.word	0x20000850

08001e94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d101      	bne.n	8001eaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ea6:	f000 fbcf 	bl	8002648 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40012c00 	.word	0x40012c00

08001eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ebc:	b672      	cpsid	i
}
 8001ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <Error_Handler+0x8>
	...

08001ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ece:	4a10      	ldr	r2, [pc, #64]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eec:	6593      	str	r3, [r2, #88]	; 0x58
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	210f      	movs	r1, #15
 8001efe:	f06f 0001 	mvn.w	r0, #1
 8001f02:	f000 fc9d 	bl	8002840 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000

08001f14 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a2b      	ldr	r2, [pc, #172]	; (8001fe0 <HAL_DAC_MspInit+0xcc>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d14f      	bne.n	8001fd6 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001f36:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	4a2a      	ldr	r2, [pc, #168]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001f3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f40:	6593      	str	r3, [r2, #88]	; 0x58
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <HAL_DAC_MspInit+0xd0>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001f66:	2310      	movs	r3, #16
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f6a:	230b      	movs	r3, #11
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7c:	f001 fd40 	bl	8003a00 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_DAC_MspInit+0xd4>)
 8001f82:	4a1a      	ldr	r2, [pc, #104]	; (8001fec <HAL_DAC_MspInit+0xd8>)
 8001f84:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_DAC_MspInit+0xd4>)
 8001f88:	2206      	movs	r2, #6
 8001f8a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_DAC_MspInit+0xd4>)
 8001f8e:	2210      	movs	r2, #16
 8001f90:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_DAC_MspInit+0xd4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <HAL_DAC_MspInit+0xd4>)
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_DAC_MspInit+0xd4>)
 8001fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_DAC_MspInit+0xd4>)
 8001fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fac:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_DAC_MspInit+0xd4>)
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <HAL_DAC_MspInit+0xd4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001fba:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <HAL_DAC_MspInit+0xd4>)
 8001fbc:	f001 faea 	bl	8003594 <HAL_DMA_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001fc6:	f7ff ff77 	bl	8001eb8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a06      	ldr	r2, [pc, #24]	; (8001fe8 <HAL_DAC_MspInit+0xd4>)
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <HAL_DAC_MspInit+0xd4>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	; 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40007400 	.word	0x40007400
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	2000065c 	.word	0x2000065c
 8001fec:	40020030 	.word	0x40020030

08001ff0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8002008:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_DFSDM_FilterMspInit+0x104>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d136      	bne.n	800207e <HAL_DFSDM_FilterMspInit+0x8e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8002010:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <HAL_DFSDM_FilterMspInit+0x108>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	4a38      	ldr	r2, [pc, #224]	; (80020f8 <HAL_DFSDM_FilterMspInit+0x108>)
 8002018:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800201a:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <HAL_DFSDM_FilterMspInit+0x108>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d10b      	bne.n	800203a <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002022:	4b36      	ldr	r3, [pc, #216]	; (80020fc <HAL_DFSDM_FilterMspInit+0x10c>)
 8002024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002026:	4a35      	ldr	r2, [pc, #212]	; (80020fc <HAL_DFSDM_FilterMspInit+0x10c>)
 8002028:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800202c:	6613      	str	r3, [r2, #96]	; 0x60
 800202e:	4b33      	ldr	r3, [pc, #204]	; (80020fc <HAL_DFSDM_FilterMspInit+0x10c>)
 8002030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_DFSDM_FilterMspInit+0x10c>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	4a2f      	ldr	r2, [pc, #188]	; (80020fc <HAL_DFSDM_FilterMspInit+0x10c>)
 8002040:	f043 0310 	orr.w	r3, r3, #16
 8002044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002046:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <HAL_DFSDM_FilterMspInit+0x10c>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002052:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002064:	2306      	movs	r3, #6
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	4824      	ldr	r0, [pc, #144]	; (8002100 <HAL_DFSDM_FilterMspInit+0x110>)
 8002070:	f001 fcc6 	bl	8003a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <HAL_DFSDM_FilterMspInit+0x104>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3301      	adds	r3, #1
 800207a:	4a1e      	ldr	r2, [pc, #120]	; (80020f4 <HAL_DFSDM_FilterMspInit+0x104>)
 800207c:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a20      	ldr	r2, [pc, #128]	; (8002104 <HAL_DFSDM_FilterMspInit+0x114>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d130      	bne.n	80020ea <HAL_DFSDM_FilterMspInit+0xfa>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <HAL_DFSDM_FilterMspInit+0x118>)
 800208a:	4a20      	ldr	r2, [pc, #128]	; (800210c <HAL_DFSDM_FilterMspInit+0x11c>)
 800208c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_DFSDM_FilterMspInit+0x118>)
 8002090:	2200      	movs	r2, #0
 8002092:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_DFSDM_FilterMspInit+0x118>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800209a:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_DFSDM_FilterMspInit+0x118>)
 800209c:	2200      	movs	r2, #0
 800209e:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_DFSDM_FilterMspInit+0x118>)
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_DFSDM_FilterMspInit+0x118>)
 80020a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ac:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <HAL_DFSDM_FilterMspInit+0x118>)
 80020b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b4:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_DFSDM_FilterMspInit+0x118>)
 80020b8:	2220      	movs	r2, #32
 80020ba:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_DFSDM_FilterMspInit+0x118>)
 80020be:	2200      	movs	r2, #0
 80020c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80020c2:	4811      	ldr	r0, [pc, #68]	; (8002108 <HAL_DFSDM_FilterMspInit+0x118>)
 80020c4:	f001 fa66 	bl	8003594 <HAL_DMA_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_DFSDM_FilterMspInit+0xe2>
    {
      Error_Handler();
 80020ce:	f7ff fef3 	bl	8001eb8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <HAL_DFSDM_FilterMspInit+0x118>)
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80020d8:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <HAL_DFSDM_FilterMspInit+0x118>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_DFSDM_FilterMspInit+0x118>)
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
 80020e4:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_DFSDM_FilterMspInit+0x118>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80020ea:	bf00      	nop
 80020ec:	3728      	adds	r7, #40	; 0x28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000f880 	.word	0x2000f880
 80020f8:	2000f87c 	.word	0x2000f87c
 80020fc:	40021000 	.word	0x40021000
 8002100:	48001000 	.word	0x48001000
 8002104:	40016100 	.word	0x40016100
 8002108:	20000730 	.word	0x20000730
 800210c:	40020044 	.word	0x40020044

08002110 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8002128:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <HAL_DFSDM_ChannelMspInit+0x98>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d136      	bne.n	800219e <HAL_DFSDM_ChannelMspInit+0x8e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8002130:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <HAL_DFSDM_ChannelMspInit+0x9c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	3301      	adds	r3, #1
 8002136:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_DFSDM_ChannelMspInit+0x9c>)
 8002138:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_DFSDM_ChannelMspInit+0x9c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10b      	bne.n	800215a <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8002144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002146:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8002148:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214c:	6613      	str	r3, [r2, #96]	; 0x60
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8002150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_DFSDM_ChannelMspInit+0xa0>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215e:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8002160:	f043 0310 	orr.w	r3, r3, #16
 8002164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_DFSDM_ChannelMspInit+0xa0>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002172:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002184:	2306      	movs	r3, #6
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4619      	mov	r1, r3
 800218e:	4809      	ldr	r0, [pc, #36]	; (80021b4 <HAL_DFSDM_ChannelMspInit+0xa4>)
 8002190:	f001 fc36 	bl	8003a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <HAL_DFSDM_ChannelMspInit+0x98>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	4a03      	ldr	r2, [pc, #12]	; (80021a8 <HAL_DFSDM_ChannelMspInit+0x98>)
 800219c:	6013      	str	r3, [r2, #0]
  }

}
 800219e:	bf00      	nop
 80021a0:	3728      	adds	r7, #40	; 0x28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000f880 	.word	0x2000f880
 80021ac:	2000f87c 	.word	0x2000f87c
 80021b0:	40021000 	.word	0x40021000
 80021b4:	48001000 	.word	0x48001000

080021b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d8:	d130      	bne.n	800223c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_TIM_Base_MspInit+0x8c>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	4a19      	ldr	r2, [pc, #100]	; (8002244 <HAL_TIM_Base_MspInit+0x8c>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_TIM_Base_MspInit+0x8c>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <HAL_TIM_Base_MspInit+0x8c>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	4a13      	ldr	r2, [pc, #76]	; (8002244 <HAL_TIM_Base_MspInit+0x8c>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_TIM_Base_MspInit+0x8c>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 800220a:	2308      	movs	r3, #8
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800221a:	2301      	movs	r3, #1
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002228:	f001 fbea 	bl	8003a00 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2105      	movs	r1, #5
 8002230:	201c      	movs	r0, #28
 8002232:	f000 fb05 	bl	8002840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002236:	201c      	movs	r0, #28
 8002238:	f000 fb1e 	bl	8002878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <HAL_UART_MspInit+0x7c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d127      	bne.n	80022ba <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <HAL_UART_MspInit+0x80>)
 800226c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226e:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <HAL_UART_MspInit+0x80>)
 8002270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002274:	6613      	str	r3, [r2, #96]	; 0x60
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <HAL_UART_MspInit+0x80>)
 8002278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_UART_MspInit+0x80>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <HAL_UART_MspInit+0x80>)
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_UART_MspInit+0x80>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800229a:	23c0      	movs	r3, #192	; 0xc0
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a6:	2303      	movs	r3, #3
 80022a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022aa:	2307      	movs	r3, #7
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4805      	ldr	r0, [pc, #20]	; (80022cc <HAL_UART_MspInit+0x84>)
 80022b6:	f001 fba3 	bl	8003a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022ba:	bf00      	nop
 80022bc:	3728      	adds	r7, #40	; 0x28
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40013800 	.word	0x40013800
 80022c8:	40021000 	.word	0x40021000
 80022cc:	48000400 	.word	0x48000400

080022d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08c      	sub	sp, #48	; 0x30
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	2019      	movs	r0, #25
 80022e6:	f000 faab 	bl	8002840 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80022ea:	2019      	movs	r0, #25
 80022ec:	f000 fac4 	bl	8002878 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022f0:	4b1e      	ldr	r3, [pc, #120]	; (800236c <HAL_InitTick+0x9c>)
 80022f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f4:	4a1d      	ldr	r2, [pc, #116]	; (800236c <HAL_InitTick+0x9c>)
 80022f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022fa:	6613      	str	r3, [r2, #96]	; 0x60
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_InitTick+0x9c>)
 80022fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002308:	f107 0210 	add.w	r2, r7, #16
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f002 fb5e 	bl	80049d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002318:	f002 fb46 	bl	80049a8 <HAL_RCC_GetPCLK2Freq>
 800231c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002320:	4a13      	ldr	r2, [pc, #76]	; (8002370 <HAL_InitTick+0xa0>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	0c9b      	lsrs	r3, r3, #18
 8002328:	3b01      	subs	r3, #1
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_InitTick+0xa4>)
 800232e:	4a12      	ldr	r2, [pc, #72]	; (8002378 <HAL_InitTick+0xa8>)
 8002330:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_InitTick+0xa4>)
 8002334:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002338:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800233a:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <HAL_InitTick+0xa4>)
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_InitTick+0xa4>)
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_InitTick+0xa4>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800234c:	4809      	ldr	r0, [pc, #36]	; (8002374 <HAL_InitTick+0xa4>)
 800234e:	f003 f88f 	bl	8005470 <HAL_TIM_Base_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d104      	bne.n	8002362 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002358:	4806      	ldr	r0, [pc, #24]	; (8002374 <HAL_InitTick+0xa4>)
 800235a:	f003 f949 	bl	80055f0 <HAL_TIM_Base_Start_IT>
 800235e:	4603      	mov	r3, r0
 8002360:	e000      	b.n	8002364 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
}
 8002364:	4618      	mov	r0, r3
 8002366:	3730      	adds	r7, #48	; 0x30
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	431bde83 	.word	0x431bde83
 8002374:	2000f884 	.word	0x2000f884
 8002378:	40012c00 	.word	0x40012c00

0800237c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002380:	e7fe      	b.n	8002380 <NMI_Handler+0x4>

08002382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002386:	e7fe      	b.n	8002386 <HardFault_Handler+0x4>

08002388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800238c:	e7fe      	b.n	800238c <MemManage_Handler+0x4>

0800238e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002392:	e7fe      	b.n	8002392 <BusFault_Handler+0x4>

08002394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <UsageFault_Handler+0x4>

0800239a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <DMA1_Channel3_IRQHandler+0x10>)
 80023ae:	f001 fa47 	bl	8003840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	2000065c 	.word	0x2000065c

080023bc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <DMA1_Channel4_IRQHandler+0x10>)
 80023c2:	f001 fa3d 	bl	8003840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000730 	.word	0x20000730

080023d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80023d4:	2020      	movs	r0, #32
 80023d6:	f001 fcd5 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80023da:	2040      	movs	r0, #64	; 0x40
 80023dc:	f001 fcd2 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80023e0:	2080      	movs	r0, #128	; 0x80
 80023e2:	f001 fccf 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80023e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023ea:	f001 fccb 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80023fa:	f003 f969 	bl	80056d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	2000f884 	.word	0x2000f884

08002408 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <TIM2_IRQHandler+0x10>)
 800240e:	f003 f95f 	bl	80056d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000778 	.word	0x20000778

0800241c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002420:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002424:	f001 fcae 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002428:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800242c:	f001 fcaa 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002430:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002434:	f001 fca6 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002438:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800243c:	f001 fca2 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002440:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002444:	f001 fc9e 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}

0800244c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
	return 1;
 8002450:	2301      	movs	r3, #1
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <_kill>:

int _kill(int pid, int sig)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002466:	f007 fed3 	bl	800a210 <__errno>
 800246a:	4603      	mov	r3, r0
 800246c:	2216      	movs	r2, #22
 800246e:	601a      	str	r2, [r3, #0]
	return -1;
 8002470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <_exit>:

void _exit (int status)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002484:	f04f 31ff 	mov.w	r1, #4294967295
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ffe7 	bl	800245c <_kill>
	while (1) {}		/* Make sure we hang here */
 800248e:	e7fe      	b.n	800248e <_exit+0x12>

08002490 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	e00a      	b.n	80024b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024a2:	f3af 8000 	nop.w
 80024a6:	4601      	mov	r1, r0
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	60ba      	str	r2, [r7, #8]
 80024ae:	b2ca      	uxtb	r2, r1
 80024b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	dbf0      	blt.n	80024a2 <_read+0x12>
	}

return len;
 80024c0:	687b      	ldr	r3, [r7, #4]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
	return -1;
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024f2:	605a      	str	r2, [r3, #4]
	return 0;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <_isatty>:

int _isatty(int file)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
	return 1;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
	return 0;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800253c:	4a14      	ldr	r2, [pc, #80]	; (8002590 <_sbrk+0x5c>)
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <_sbrk+0x60>)
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <_sbrk+0x64>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <_sbrk+0x64>)
 8002552:	4a12      	ldr	r2, [pc, #72]	; (800259c <_sbrk+0x68>)
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <_sbrk+0x64>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	429a      	cmp	r2, r3
 8002562:	d207      	bcs.n	8002574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002564:	f007 fe54 	bl	800a210 <__errno>
 8002568:	4603      	mov	r3, r0
 800256a:	220c      	movs	r2, #12
 800256c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
 8002572:	e009      	b.n	8002588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002574:	4b08      	ldr	r3, [pc, #32]	; (8002598 <_sbrk+0x64>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800257a:	4b07      	ldr	r3, [pc, #28]	; (8002598 <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	4a05      	ldr	r2, [pc, #20]	; (8002598 <_sbrk+0x64>)
 8002584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002586:	68fb      	ldr	r3, [r7, #12]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20018000 	.word	0x20018000
 8002594:	00000400 	.word	0x00000400
 8002598:	2000f8d0 	.word	0x2000f8d0
 800259c:	20010bf8 	.word	0x20010bf8

080025a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <SystemInit+0x20>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025aa:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <SystemInit+0x20>)
 80025ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <Reset_Handler>:
 80025c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025fc <LoopForever+0x2>
 80025c8:	f7ff ffea 	bl	80025a0 <SystemInit>
 80025cc:	480c      	ldr	r0, [pc, #48]	; (8002600 <LoopForever+0x6>)
 80025ce:	490d      	ldr	r1, [pc, #52]	; (8002604 <LoopForever+0xa>)
 80025d0:	4a0d      	ldr	r2, [pc, #52]	; (8002608 <LoopForever+0xe>)
 80025d2:	2300      	movs	r3, #0
 80025d4:	e002      	b.n	80025dc <LoopCopyDataInit>

080025d6 <CopyDataInit>:
 80025d6:	58d4      	ldr	r4, [r2, r3]
 80025d8:	50c4      	str	r4, [r0, r3]
 80025da:	3304      	adds	r3, #4

080025dc <LoopCopyDataInit>:
 80025dc:	18c4      	adds	r4, r0, r3
 80025de:	428c      	cmp	r4, r1
 80025e0:	d3f9      	bcc.n	80025d6 <CopyDataInit>
 80025e2:	4a0a      	ldr	r2, [pc, #40]	; (800260c <LoopForever+0x12>)
 80025e4:	4c0a      	ldr	r4, [pc, #40]	; (8002610 <LoopForever+0x16>)
 80025e6:	2300      	movs	r3, #0
 80025e8:	e001      	b.n	80025ee <LoopFillZerobss>

080025ea <FillZerobss>:
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	3204      	adds	r2, #4

080025ee <LoopFillZerobss>:
 80025ee:	42a2      	cmp	r2, r4
 80025f0:	d3fb      	bcc.n	80025ea <FillZerobss>
 80025f2:	f007 ff09 	bl	800a408 <__libc_init_array>
 80025f6:	f7fe fce9 	bl	8000fcc <main>

080025fa <LoopForever>:
 80025fa:	e7fe      	b.n	80025fa <LoopForever>
 80025fc:	20018000 	.word	0x20018000
 8002600:	20000000 	.word	0x20000000
 8002604:	200001e4 	.word	0x200001e4
 8002608:	080223a8 	.word	0x080223a8
 800260c:	200001e4 	.word	0x200001e4
 8002610:	20010bf4 	.word	0x20010bf4

08002614 <ADC1_2_IRQHandler>:
 8002614:	e7fe      	b.n	8002614 <ADC1_2_IRQHandler>

08002616 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002620:	2003      	movs	r0, #3
 8002622:	f000 f902 	bl	800282a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002626:	2000      	movs	r0, #0
 8002628:	f7ff fe52 	bl	80022d0 <HAL_InitTick>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	71fb      	strb	r3, [r7, #7]
 8002636:	e001      	b.n	800263c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002638:	f7ff fc44 	bl	8001ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800263c:	79fb      	ldrb	r3, [r7, #7]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_IncTick+0x20>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_IncTick+0x24>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4413      	add	r3, r2
 8002658:	4a04      	ldr	r2, [pc, #16]	; (800266c <HAL_IncTick+0x24>)
 800265a:	6013      	str	r3, [r2, #0]
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	2000000c 	.word	0x2000000c
 800266c:	2000f8d4 	.word	0x2000f8d4

08002670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return uwTick;
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <HAL_GetTick+0x14>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	2000f8d4 	.word	0x2000f8d4

08002688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002690:	f7ff ffee 	bl	8002670 <HAL_GetTick>
 8002694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d005      	beq.n	80026ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_Delay+0x44>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ae:	bf00      	nop
 80026b0:	f7ff ffde 	bl	8002670 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d8f7      	bhi.n	80026b0 <HAL_Delay+0x28>
  {
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2000000c 	.word	0x2000000c

080026d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002702:	4a04      	ldr	r2, [pc, #16]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	60d3      	str	r3, [r2, #12]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <__NVIC_GetPriorityGrouping+0x18>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	f003 0307 	and.w	r3, r3, #7
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	2b00      	cmp	r3, #0
 8002744:	db0b      	blt.n	800275e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <__NVIC_EnableIRQ+0x38>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2001      	movs	r0, #1
 8002756:	fa00 f202 	lsl.w	r2, r0, r2
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000e100 	.word	0xe000e100

08002770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db0a      	blt.n	800279a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	490c      	ldr	r1, [pc, #48]	; (80027bc <__NVIC_SetPriority+0x4c>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	440b      	add	r3, r1
 8002794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002798:	e00a      	b.n	80027b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <__NVIC_SetPriority+0x50>)
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	3b04      	subs	r3, #4
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	440b      	add	r3, r1
 80027ae:	761a      	strb	r2, [r3, #24]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000e100 	.word	0xe000e100
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	2b04      	cmp	r3, #4
 80027e0:	bf28      	it	cs
 80027e2:	2304      	movcs	r3, #4
 80027e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d902      	bls.n	80027f4 <NVIC_EncodePriority+0x30>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3b03      	subs	r3, #3
 80027f2:	e000      	b.n	80027f6 <NVIC_EncodePriority+0x32>
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	401a      	ands	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800280c:	f04f 31ff 	mov.w	r1, #4294967295
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	43d9      	mvns	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	4313      	orrs	r3, r2
         );
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ff4c 	bl	80026d0 <__NVIC_SetPriorityGrouping>
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002852:	f7ff ff61 	bl	8002718 <__NVIC_GetPriorityGrouping>
 8002856:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	6978      	ldr	r0, [r7, #20]
 800285e:	f7ff ffb1 	bl	80027c4 <NVIC_EncodePriority>
 8002862:	4602      	mov	r2, r0
 8002864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff80 	bl	8002770 <__NVIC_SetPriority>
}
 8002870:	bf00      	nop
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff54 	bl	8002734 <__NVIC_EnableIRQ>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e014      	b.n	80028d0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	791b      	ldrb	r3, [r3, #4]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff fb2c 	bl	8001f14 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	795b      	ldrb	r3, [r3, #5]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_DAC_Start+0x16>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e03b      	b.n	8002966 <HAL_DAC_Start+0x8e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6819      	ldr	r1, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2201      	movs	r2, #1
 8002908:	409a      	lsls	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10f      	bne.n	8002938 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002922:	2b04      	cmp	r3, #4
 8002924:	d118      	bne.n	8002958 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0201 	orr.w	r2, r2, #1
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	e00f      	b.n	8002958 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002942:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002946:	d107      	bne.n	8002958 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0202 	orr.w	r2, r2, #2
 8002956:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	795b      	ldrb	r3, [r3, #5]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_DAC_Start_DMA+0x1e>
 800298e:	2302      	movs	r3, #2
 8002990:	e0ab      	b.n	8002aea <HAL_DAC_Start_DMA+0x176>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2202      	movs	r2, #2
 800299c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d12f      	bne.n	8002a04 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4a52      	ldr	r2, [pc, #328]	; (8002af4 <HAL_DAC_Start_DMA+0x180>)
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a51      	ldr	r2, [pc, #324]	; (8002af8 <HAL_DAC_Start_DMA+0x184>)
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a50      	ldr	r2, [pc, #320]	; (8002afc <HAL_DAC_Start_DMA+0x188>)
 80029ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029ca:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d013      	beq.n	80029fa <HAL_DAC_Start_DMA+0x86>
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d845      	bhi.n	8002a64 <HAL_DAC_Start_DMA+0xf0>
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_DAC_Start_DMA+0x72>
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d005      	beq.n	80029f0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80029e4:	e03e      	b.n	8002a64 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3308      	adds	r3, #8
 80029ec:	613b      	str	r3, [r7, #16]
        break;
 80029ee:	e03c      	b.n	8002a6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	613b      	str	r3, [r7, #16]
        break;
 80029f8:	e037      	b.n	8002a6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	3310      	adds	r3, #16
 8002a00:	613b      	str	r3, [r7, #16]
        break;
 8002a02:	e032      	b.n	8002a6a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a3d      	ldr	r2, [pc, #244]	; (8002b00 <HAL_DAC_Start_DMA+0x18c>)
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4a3c      	ldr	r2, [pc, #240]	; (8002b04 <HAL_DAC_Start_DMA+0x190>)
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4a3b      	ldr	r2, [pc, #236]	; (8002b08 <HAL_DAC_Start_DMA+0x194>)
 8002a1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a2a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d013      	beq.n	8002a5a <HAL_DAC_Start_DMA+0xe6>
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d817      	bhi.n	8002a68 <HAL_DAC_Start_DMA+0xf4>
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_DAC_Start_DMA+0xd2>
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d005      	beq.n	8002a50 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002a44:	e010      	b.n	8002a68 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3314      	adds	r3, #20
 8002a4c:	613b      	str	r3, [r7, #16]
        break;
 8002a4e:	e00c      	b.n	8002a6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3318      	adds	r3, #24
 8002a56:	613b      	str	r3, [r7, #16]
        break;
 8002a58:	e007      	b.n	8002a6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	331c      	adds	r3, #28
 8002a60:	613b      	str	r3, [r7, #16]
        break;
 8002a62:	e002      	b.n	8002a6a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002a64:	bf00      	nop
 8002a66:	e000      	b.n	8002a6a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002a68:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d111      	bne.n	8002a94 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6898      	ldr	r0, [r3, #8]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	f000 fe3b 	bl	8003704 <HAL_DMA_Start_IT>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	75fb      	strb	r3, [r7, #23]
 8002a92:	e010      	b.n	8002ab6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002aa2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68d8      	ldr	r0, [r3, #12]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	f000 fe29 	bl	8003704 <HAL_DMA_Start_IT>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002abc:	7dfb      	ldrb	r3, [r7, #23]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10c      	bne.n	8002adc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6819      	ldr	r1, [r3, #0]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2201      	movs	r2, #1
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	e005      	b.n	8002ae8 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f043 0204 	orr.w	r2, r3, #4
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	08002e07 	.word	0x08002e07
 8002af8:	08002e29 	.word	0x08002e29
 8002afc:	08002e45 	.word	0x08002e45
 8002b00:	08002eaf 	.word	0x08002eaf
 8002b04:	08002ed1 	.word	0x08002ed1
 8002b08:	08002eed 	.word	0x08002eed

08002b0c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6819      	ldr	r1, [r3, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	400a      	ands	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2201      	movs	r2, #1
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10d      	bne.n	8002b72 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fe32 	bl	80037c4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e00c      	b.n	8002b8c <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fe24 	bl	80037c4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002b8a:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b088      	sub	sp, #32
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	795b      	ldrb	r3, [r3, #5]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_DAC_ConfigChannel+0x1c>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e107      	b.n	8002dfe <HAL_DAC_ConfigChannel+0x22c>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d174      	bne.n	8002cec <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002c02:	f7ff fd35 	bl	8002670 <HAL_GetTick>
 8002c06:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d134      	bne.n	8002c78 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c0e:	e011      	b.n	8002c34 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c10:	f7ff fd2e 	bl	8002670 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d90a      	bls.n	8002c34 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f043 0208 	orr.w	r2, r3, #8
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0e4      	b.n	8002dfe <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1e6      	bne.n	8002c10 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002c42:	2001      	movs	r0, #1
 8002c44:	f7ff fd20 	bl	8002688 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	6992      	ldr	r2, [r2, #24]
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40
 8002c52:	e01e      	b.n	8002c92 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c54:	f7ff fd0c 	bl	8002670 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d90a      	bls.n	8002c78 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f043 0208 	orr.w	r2, r3, #8
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2203      	movs	r2, #3
 8002c72:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e0c2      	b.n	8002dfe <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	dbe8      	blt.n	8002c54 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002c82:	2001      	movs	r0, #1
 8002c84:	f7ff fd00 	bl	8002688 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	6992      	ldr	r2, [r2, #24]
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	ea02 0103 	and.w	r1, r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	21ff      	movs	r1, #255	; 0xff
 8002cce:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	ea02 0103 	and.w	r1, r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	6a1a      	ldr	r2, [r3, #32]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d11d      	bne.n	8002d30 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	221f      	movs	r2, #31
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2207      	movs	r2, #7
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6819      	ldr	r1, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43da      	mvns	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	400a      	ands	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6819      	ldr	r1, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	22c0      	movs	r2, #192	; 0xc0
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	400a      	ands	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3720      	adds	r7, #32
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f7ff febe 	bl	8002b96 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	711a      	strb	r2, [r3, #4]
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff feb7 	bl	8002baa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f043 0204 	orr.w	r2, r3, #4
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f7ff fead 	bl	8002bbe <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	711a      	strb	r2, [r3, #4]
}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff ffd8 	bl	8002e72 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	711a      	strb	r2, [r3, #4]
}
 8002ec8:	bf00      	nop
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff ffd1 	bl	8002e86 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f043 0204 	orr.w	r2, r3, #4
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff ffc7 	bl	8002e9a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	711a      	strb	r2, [r3, #4]
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0ac      	b.n	8003088 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fa8c 	bl	8003450 <DFSDM_GetChannelFromInstance>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4a55      	ldr	r2, [pc, #340]	; (8003090 <HAL_DFSDM_ChannelInit+0x174>)
 8002f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e09f      	b.n	8003088 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff f8e1 	bl	8002110 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002f4e:	4b51      	ldr	r3, [pc, #324]	; (8003094 <HAL_DFSDM_ChannelInit+0x178>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3301      	adds	r3, #1
 8002f54:	4a4f      	ldr	r2, [pc, #316]	; (8003094 <HAL_DFSDM_ChannelInit+0x178>)
 8002f56:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002f58:	4b4e      	ldr	r3, [pc, #312]	; (8003094 <HAL_DFSDM_ChannelInit+0x178>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d125      	bne.n	8002fac <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002f60:	4b4d      	ldr	r3, [pc, #308]	; (8003098 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a4c      	ldr	r2, [pc, #304]	; (8003098 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f6a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002f6c:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4948      	ldr	r1, [pc, #288]	; (8003098 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002f7a:	4b47      	ldr	r3, [pc, #284]	; (8003098 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a46      	ldr	r2, [pc, #280]	; (8003098 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f80:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002f84:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	791b      	ldrb	r3, [r3, #4]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d108      	bne.n	8002fa0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002f8e:	4b42      	ldr	r3, [pc, #264]	; (8003098 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	493f      	ldr	r1, [pc, #252]	; (8003098 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002fa0:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <HAL_DFSDM_ChannelInit+0x17c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3c      	ldr	r2, [pc, #240]	; (8003098 <HAL_DFSDM_ChannelInit+0x17c>)
 8002fa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002faa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002fba:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002fca:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002fd0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 020f 	bic.w	r2, r2, #15
 8002fe8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6819      	ldr	r1, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003010:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	3b01      	subs	r3, #1
 8003022:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f002 0207 	and.w	r2, r2, #7
 800303c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003068:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f9ea 	bl	8003450 <DFSDM_GetChannelFromInstance>
 800307c:	4602      	mov	r2, r0
 800307e:	4904      	ldr	r1, [pc, #16]	; (8003090 <HAL_DFSDM_ChannelInit+0x174>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	2000f8dc 	.word	0x2000f8dc
 8003094:	2000f8d8 	.word	0x2000f8d8
 8003098:	40016000 	.word	0x40016000

0800309c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0ca      	b.n	8003244 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a66      	ldr	r2, [pc, #408]	; (800324c <HAL_DFSDM_FilterInit+0x1b0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d109      	bne.n	80030cc <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d003      	beq.n	80030c8 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0bb      	b.n	8003244 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7fe ff83 	bl	8001ff0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80030f8:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	7a1b      	ldrb	r3, [r3, #8]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d108      	bne.n	8003114 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	e007      	b.n	8003124 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003122:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	7a5b      	ldrb	r3, [r3, #9]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d108      	bne.n	800313e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e007      	b.n	800314e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800314c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 800315c:	f023 0308 	bic.w	r3, r3, #8
 8003160:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d108      	bne.n	800317c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6819      	ldr	r1, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7c1b      	ldrb	r3, [r3, #16]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d108      	bne.n	8003196 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0210 	orr.w	r2, r2, #16
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	e007      	b.n	80031a6 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0210 	bic.w	r2, r2, #16
 80031a4:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	7c5b      	ldrb	r3, [r3, #17]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d108      	bne.n	80031c0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0220 	orr.w	r2, r2, #32
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e007      	b.n	80031d0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0220 	bic.w	r2, r2, #32
 80031ce:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80031de:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80031e2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6959      	ldr	r1, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80031f6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80031fe:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699a      	ldr	r2, [r3, #24]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	7c1a      	ldrb	r2, [r3, #16]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40016100 	.word	0x40016100

08003250 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d02e      	beq.n	80032c8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003270:	2bff      	cmp	r3, #255	; 0xff
 8003272:	d029      	beq.n	80032c8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003286:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d10d      	bne.n	80032aa <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800329c:	431a      	orrs	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	e00a      	b.n	80032c0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6819      	ldr	r1, [r3, #0]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
 80032c6:	e001      	b.n	80032cc <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	75fb      	strb	r3, [r7, #23]
 80032fc:	e064      	b.n	80033c8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800330c:	d002      	beq.n	8003314 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	75fb      	strb	r3, [r7, #23]
 8003312:	e059      	b.n	80033c8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10e      	bne.n	800333a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800332a:	2b00      	cmp	r3, #0
 800332c:	d105      	bne.n	800333a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d002      	beq.n	800333a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	75fb      	strb	r3, [r7, #23]
 8003338:	e046      	b.n	80033c8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10b      	bne.n	800335a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003346:	2b00      	cmp	r3, #0
 8003348:	d107      	bne.n	800335a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003350:	2b20      	cmp	r3, #32
 8003352:	d102      	bne.n	800335a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	75fb      	strb	r3, [r7, #23]
 8003358:	e036      	b.n	80033c8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d004      	beq.n	800336e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800336a:	2b03      	cmp	r3, #3
 800336c:	d12a      	bne.n	80033c4 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003374:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	4a17      	ldr	r2, [pc, #92]	; (80033d8 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003384:	2b20      	cmp	r3, #32
 8003386:	d101      	bne.n	800338c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8003388:	4a14      	ldr	r2, [pc, #80]	; (80033dc <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800338a:	e000      	b.n	800338e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 800338c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	331c      	adds	r3, #28
 800339e:	4619      	mov	r1, r3
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f000 f9ae 	bl	8003704 <HAL_DMA_Start_IT>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	22ff      	movs	r2, #255	; 0xff
 80033b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80033ba:	e005      	b.n	80033c8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f893 	bl	80034e8 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80033c2:	e001      	b.n	80033c8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	08003411 	.word	0x08003411
 80033d8:	0800342d 	.word	0x0800342d
 80033dc:	080033f5 	.word	0x080033f5

080033e0 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f7fe fab2 	bl	800196c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f7fe faae 	bl	8001980 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2203      	movs	r2, #3
 800343e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff ffcd 	bl	80033e0 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <DFSDM_GetChannelFromInstance+0x7c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d102      	bne.n	8003466 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e02b      	b.n	80034be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <DFSDM_GetChannelFromInstance+0x80>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d102      	bne.n	8003474 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e024      	b.n	80034be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a17      	ldr	r2, [pc, #92]	; (80034d4 <DFSDM_GetChannelFromInstance+0x84>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d102      	bne.n	8003482 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800347c:	2302      	movs	r3, #2
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	e01d      	b.n	80034be <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a14      	ldr	r2, [pc, #80]	; (80034d8 <DFSDM_GetChannelFromInstance+0x88>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d102      	bne.n	8003490 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800348a:	2304      	movs	r3, #4
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	e016      	b.n	80034be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <DFSDM_GetChannelFromInstance+0x8c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d102      	bne.n	800349e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003498:	2305      	movs	r3, #5
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	e00f      	b.n	80034be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <DFSDM_GetChannelFromInstance+0x90>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d102      	bne.n	80034ac <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80034a6:	2306      	movs	r3, #6
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	e008      	b.n	80034be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a0d      	ldr	r2, [pc, #52]	; (80034e4 <DFSDM_GetChannelFromInstance+0x94>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d102      	bne.n	80034ba <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80034b4:	2307      	movs	r3, #7
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	e001      	b.n	80034be <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80034ba:	2303      	movs	r3, #3
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80034be:	68fb      	ldr	r3, [r7, #12]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	40016000 	.word	0x40016000
 80034d0:	40016020 	.word	0x40016020
 80034d4:	40016040 	.word	0x40016040
 80034d8:	40016080 	.word	0x40016080
 80034dc:	400160a0 	.word	0x400160a0
 80034e0:	400160c0 	.word	0x400160c0
 80034e4:	400160e0 	.word	0x400160e0

080034e8 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d108      	bne.n	800350a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e033      	b.n	8003572 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0201 	bic.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003528:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003540:	2b03      	cmp	r3, #3
 8003542:	d116      	bne.n	8003572 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	2b00      	cmp	r3, #0
 800354a:	d107      	bne.n	800355c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0202 	orr.w	r2, r2, #2
 800355a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8003562:	2b01      	cmp	r3, #1
 8003564:	d102      	bne.n	800356c <DFSDM_RegConvStart+0x84>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	e000      	b.n	800356e <DFSDM_RegConvStart+0x86>
 800356c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <DFSDM_RegConvStart+0x98>
 800357c:	2202      	movs	r2, #2
 800357e:	e000      	b.n	8003582 <DFSDM_RegConvStart+0x9a>
 8003580:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e098      	b.n	80036d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b4d      	ldr	r3, [pc, #308]	; (80036e4 <HAL_DMA_Init+0x150>)
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d80f      	bhi.n	80035d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_DMA_Init+0x154>)
 80035ba:	4413      	add	r3, r2
 80035bc:	4a4b      	ldr	r2, [pc, #300]	; (80036ec <HAL_DMA_Init+0x158>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	009a      	lsls	r2, r3, #2
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a48      	ldr	r2, [pc, #288]	; (80036f0 <HAL_DMA_Init+0x15c>)
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
 80035d0:	e00e      	b.n	80035f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	4b46      	ldr	r3, [pc, #280]	; (80036f4 <HAL_DMA_Init+0x160>)
 80035da:	4413      	add	r3, r2
 80035dc:	4a43      	ldr	r2, [pc, #268]	; (80036ec <HAL_DMA_Init+0x158>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	009a      	lsls	r2, r3, #2
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a42      	ldr	r2, [pc, #264]	; (80036f8 <HAL_DMA_Init+0x164>)
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003614:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800364a:	d039      	beq.n	80036c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <HAL_DMA_Init+0x15c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d11a      	bne.n	800368c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003656:	4b29      	ldr	r3, [pc, #164]	; (80036fc <HAL_DMA_Init+0x168>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f003 031c 	and.w	r3, r3, #28
 8003662:	210f      	movs	r1, #15
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	4924      	ldr	r1, [pc, #144]	; (80036fc <HAL_DMA_Init+0x168>)
 800366c:	4013      	ands	r3, r2
 800366e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003670:	4b22      	ldr	r3, [pc, #136]	; (80036fc <HAL_DMA_Init+0x168>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6859      	ldr	r1, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367c:	f003 031c 	and.w	r3, r3, #28
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	491d      	ldr	r1, [pc, #116]	; (80036fc <HAL_DMA_Init+0x168>)
 8003686:	4313      	orrs	r3, r2
 8003688:	600b      	str	r3, [r1, #0]
 800368a:	e019      	b.n	80036c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800368c:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <HAL_DMA_Init+0x16c>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	f003 031c 	and.w	r3, r3, #28
 8003698:	210f      	movs	r1, #15
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	4917      	ldr	r1, [pc, #92]	; (8003700 <HAL_DMA_Init+0x16c>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_DMA_Init+0x16c>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6859      	ldr	r1, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f003 031c 	and.w	r3, r3, #28
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	4911      	ldr	r1, [pc, #68]	; (8003700 <HAL_DMA_Init+0x16c>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40020407 	.word	0x40020407
 80036e8:	bffdfff8 	.word	0xbffdfff8
 80036ec:	cccccccd 	.word	0xcccccccd
 80036f0:	40020000 	.word	0x40020000
 80036f4:	bffdfbf8 	.word	0xbffdfbf8
 80036f8:	40020400 	.word	0x40020400
 80036fc:	400200a8 	.word	0x400200a8
 8003700:	400204a8 	.word	0x400204a8

08003704 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_DMA_Start_IT+0x20>
 8003720:	2302      	movs	r3, #2
 8003722:	e04b      	b.n	80037bc <HAL_DMA_Start_IT+0xb8>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d13a      	bne.n	80037ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f91e 	bl	800399e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 020e 	orr.w	r2, r2, #14
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e00f      	b.n	800379c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0204 	bic.w	r2, r2, #4
 800378a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 020a 	orr.w	r2, r2, #10
 800379a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e005      	b.n	80037ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
 80037b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d008      	beq.n	80037ee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2204      	movs	r2, #4
 80037e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e022      	b.n	8003834 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 020e 	bic.w	r2, r2, #14
 80037fc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	f003 021c 	and.w	r2, r3, #28
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2101      	movs	r1, #1
 800381c:	fa01 f202 	lsl.w	r2, r1, r2
 8003820:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003832:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	f003 031c 	and.w	r3, r3, #28
 8003860:	2204      	movs	r2, #4
 8003862:	409a      	lsls	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d026      	beq.n	80038ba <HAL_DMA_IRQHandler+0x7a>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d021      	beq.n	80038ba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d107      	bne.n	8003894 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0204 	bic.w	r2, r2, #4
 8003892:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	f003 021c 	and.w	r2, r3, #28
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2104      	movs	r1, #4
 80038a2:	fa01 f202 	lsl.w	r2, r1, r2
 80038a6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d071      	beq.n	8003994 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80038b8:	e06c      	b.n	8003994 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	f003 031c 	and.w	r3, r3, #28
 80038c2:	2202      	movs	r2, #2
 80038c4:	409a      	lsls	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d02e      	beq.n	800392c <HAL_DMA_IRQHandler+0xec>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d029      	beq.n	800392c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10b      	bne.n	80038fe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 020a 	bic.w	r2, r2, #10
 80038f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003902:	f003 021c 	and.w	r2, r3, #28
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	2102      	movs	r1, #2
 800390c:	fa01 f202 	lsl.w	r2, r1, r2
 8003910:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d038      	beq.n	8003994 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800392a:	e033      	b.n	8003994 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	f003 031c 	and.w	r3, r3, #28
 8003934:	2208      	movs	r2, #8
 8003936:	409a      	lsls	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4013      	ands	r3, r2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d02a      	beq.n	8003996 <HAL_DMA_IRQHandler+0x156>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d025      	beq.n	8003996 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 020e 	bic.w	r2, r2, #14
 8003958:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f003 021c 	and.w	r2, r3, #28
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	2101      	movs	r1, #1
 8003968:	fa01 f202 	lsl.w	r2, r1, r2
 800396c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003988:	2b00      	cmp	r3, #0
 800398a:	d004      	beq.n	8003996 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003994:	bf00      	nop
 8003996:	bf00      	nop
}
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800399e:	b480      	push	{r7}
 80039a0:	b085      	sub	sp, #20
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b0:	f003 021c 	and.w	r2, r3, #28
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	2101      	movs	r1, #1
 80039ba:	fa01 f202 	lsl.w	r2, r1, r2
 80039be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	d108      	bne.n	80039e2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039e0:	e007      	b.n	80039f2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	60da      	str	r2, [r3, #12]
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a0e:	e17f      	b.n	8003d10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2101      	movs	r1, #1
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8171 	beq.w	8003d0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d005      	beq.n	8003a40 <HAL_GPIO_Init+0x40>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d130      	bne.n	8003aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a76:	2201      	movs	r2, #1
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	f003 0201 	and.w	r2, r3, #1
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d118      	bne.n	8003ae0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	08db      	lsrs	r3, r3, #3
 8003aca:	f003 0201 	and.w	r2, r3, #1
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d017      	beq.n	8003b1c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	2203      	movs	r2, #3
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d123      	bne.n	8003b70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	08da      	lsrs	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3208      	adds	r2, #8
 8003b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	220f      	movs	r2, #15
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	08da      	lsrs	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3208      	adds	r2, #8
 8003b6a:	6939      	ldr	r1, [r7, #16]
 8003b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0203 	and.w	r2, r3, #3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80ac 	beq.w	8003d0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb2:	4b5f      	ldr	r3, [pc, #380]	; (8003d30 <HAL_GPIO_Init+0x330>)
 8003bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb6:	4a5e      	ldr	r2, [pc, #376]	; (8003d30 <HAL_GPIO_Init+0x330>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6613      	str	r3, [r2, #96]	; 0x60
 8003bbe:	4b5c      	ldr	r3, [pc, #368]	; (8003d30 <HAL_GPIO_Init+0x330>)
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bca:	4a5a      	ldr	r2, [pc, #360]	; (8003d34 <HAL_GPIO_Init+0x334>)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	089b      	lsrs	r3, r3, #2
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	220f      	movs	r2, #15
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bf4:	d025      	beq.n	8003c42 <HAL_GPIO_Init+0x242>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4f      	ldr	r2, [pc, #316]	; (8003d38 <HAL_GPIO_Init+0x338>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01f      	beq.n	8003c3e <HAL_GPIO_Init+0x23e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4e      	ldr	r2, [pc, #312]	; (8003d3c <HAL_GPIO_Init+0x33c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d019      	beq.n	8003c3a <HAL_GPIO_Init+0x23a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4d      	ldr	r2, [pc, #308]	; (8003d40 <HAL_GPIO_Init+0x340>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <HAL_GPIO_Init+0x236>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4c      	ldr	r2, [pc, #304]	; (8003d44 <HAL_GPIO_Init+0x344>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00d      	beq.n	8003c32 <HAL_GPIO_Init+0x232>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a4b      	ldr	r2, [pc, #300]	; (8003d48 <HAL_GPIO_Init+0x348>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <HAL_GPIO_Init+0x22e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4a      	ldr	r2, [pc, #296]	; (8003d4c <HAL_GPIO_Init+0x34c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_GPIO_Init+0x22a>
 8003c26:	2306      	movs	r3, #6
 8003c28:	e00c      	b.n	8003c44 <HAL_GPIO_Init+0x244>
 8003c2a:	2307      	movs	r3, #7
 8003c2c:	e00a      	b.n	8003c44 <HAL_GPIO_Init+0x244>
 8003c2e:	2305      	movs	r3, #5
 8003c30:	e008      	b.n	8003c44 <HAL_GPIO_Init+0x244>
 8003c32:	2304      	movs	r3, #4
 8003c34:	e006      	b.n	8003c44 <HAL_GPIO_Init+0x244>
 8003c36:	2303      	movs	r3, #3
 8003c38:	e004      	b.n	8003c44 <HAL_GPIO_Init+0x244>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e002      	b.n	8003c44 <HAL_GPIO_Init+0x244>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <HAL_GPIO_Init+0x244>
 8003c42:	2300      	movs	r3, #0
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	f002 0203 	and.w	r2, r2, #3
 8003c4a:	0092      	lsls	r2, r2, #2
 8003c4c:	4093      	lsls	r3, r2
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c54:	4937      	ldr	r1, [pc, #220]	; (8003d34 <HAL_GPIO_Init+0x334>)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	089b      	lsrs	r3, r3, #2
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c62:	4b3b      	ldr	r3, [pc, #236]	; (8003d50 <HAL_GPIO_Init+0x350>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c86:	4a32      	ldr	r2, [pc, #200]	; (8003d50 <HAL_GPIO_Init+0x350>)
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c8c:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <HAL_GPIO_Init+0x350>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cb0:	4a27      	ldr	r2, [pc, #156]	; (8003d50 <HAL_GPIO_Init+0x350>)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cb6:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <HAL_GPIO_Init+0x350>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cda:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <HAL_GPIO_Init+0x350>)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ce0:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <HAL_GPIO_Init+0x350>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4013      	ands	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d04:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <HAL_GPIO_Init+0x350>)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f47f ae78 	bne.w	8003a10 <HAL_GPIO_Init+0x10>
  }
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40021000 	.word	0x40021000
 8003d34:	40010000 	.word	0x40010000
 8003d38:	48000400 	.word	0x48000400
 8003d3c:	48000800 	.word	0x48000800
 8003d40:	48000c00 	.word	0x48000c00
 8003d44:	48001000 	.word	0x48001000
 8003d48:	48001400 	.word	0x48001400
 8003d4c:	48001800 	.word	0x48001800
 8003d50:	40010400 	.word	0x40010400

08003d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]
 8003d60:	4613      	mov	r3, r2
 8003d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d64:	787b      	ldrb	r3, [r7, #1]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d70:	e002      	b.n	8003d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d72:	887a      	ldrh	r2, [r7, #2]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d006      	beq.n	8003da8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d9a:	4a05      	ldr	r2, [pc, #20]	; (8003db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f806 	bl	8003db4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40010400 	.word	0x40010400

08003db4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
	...

08003dcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003dd0:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40007000 	.word	0x40007000

08003de8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df6:	d130      	bne.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003df8:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e04:	d038      	beq.n	8003e78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e06:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e0e:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e16:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2232      	movs	r2, #50	; 0x32
 8003e1c:	fb02 f303 	mul.w	r3, r2, r3
 8003e20:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	0c9b      	lsrs	r3, r3, #18
 8003e28:	3301      	adds	r3, #1
 8003e2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e2c:	e002      	b.n	8003e34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e34:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e40:	d102      	bne.n	8003e48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f2      	bne.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e48:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e54:	d110      	bne.n	8003e78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e00f      	b.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e66:	d007      	beq.n	8003e78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e68:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e70:	4a05      	ldr	r2, [pc, #20]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40007000 	.word	0x40007000
 8003e8c:	20000004 	.word	0x20000004
 8003e90:	431bde83 	.word	0x431bde83

08003e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e3ca      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ea6:	4b97      	ldr	r3, [pc, #604]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb0:	4b94      	ldr	r3, [pc, #592]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80e4 	beq.w	8004090 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <HAL_RCC_OscConfig+0x4a>
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b0c      	cmp	r3, #12
 8003ed2:	f040 808b 	bne.w	8003fec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	f040 8087 	bne.w	8003fec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ede:	4b89      	ldr	r3, [pc, #548]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x62>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e3a2      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1a      	ldr	r2, [r3, #32]
 8003efa:	4b82      	ldr	r3, [pc, #520]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <HAL_RCC_OscConfig+0x7c>
 8003f06:	4b7f      	ldr	r3, [pc, #508]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f0e:	e005      	b.n	8003f1c <HAL_RCC_OscConfig+0x88>
 8003f10:	4b7c      	ldr	r3, [pc, #496]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f16:	091b      	lsrs	r3, r3, #4
 8003f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d223      	bcs.n	8003f68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fd87 	bl	8004a38 <RCC_SetFlashLatencyFromMSIRange>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e383      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f34:	4b73      	ldr	r3, [pc, #460]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a72      	ldr	r2, [pc, #456]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003f3a:	f043 0308 	orr.w	r3, r3, #8
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	4b70      	ldr	r3, [pc, #448]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	496d      	ldr	r1, [pc, #436]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f52:	4b6c      	ldr	r3, [pc, #432]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	4968      	ldr	r1, [pc, #416]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	604b      	str	r3, [r1, #4]
 8003f66:	e025      	b.n	8003fb4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f68:	4b66      	ldr	r3, [pc, #408]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a65      	ldr	r2, [pc, #404]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003f6e:	f043 0308 	orr.w	r3, r3, #8
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	4b63      	ldr	r3, [pc, #396]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	4960      	ldr	r1, [pc, #384]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f86:	4b5f      	ldr	r3, [pc, #380]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	495b      	ldr	r1, [pc, #364]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d109      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fd47 	bl	8004a38 <RCC_SetFlashLatencyFromMSIRange>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e343      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fb4:	f000 fc4a 	bl	800484c <HAL_RCC_GetSysClockFreq>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	4b52      	ldr	r3, [pc, #328]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	091b      	lsrs	r3, r3, #4
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	4950      	ldr	r1, [pc, #320]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 8003fc6:	5ccb      	ldrb	r3, [r1, r3]
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd0:	4a4e      	ldr	r2, [pc, #312]	; (800410c <HAL_RCC_OscConfig+0x278>)
 8003fd2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fd4:	4b4e      	ldr	r3, [pc, #312]	; (8004110 <HAL_RCC_OscConfig+0x27c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe f979 	bl	80022d0 <HAL_InitTick>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d052      	beq.n	800408e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	e327      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d032      	beq.n	800405a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ff4:	4b43      	ldr	r3, [pc, #268]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a42      	ldr	r2, [pc, #264]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004000:	f7fe fb36 	bl	8002670 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004008:	f7fe fb32 	bl	8002670 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e310      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800401a:	4b3a      	ldr	r3, [pc, #232]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004026:	4b37      	ldr	r3, [pc, #220]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a36      	ldr	r2, [pc, #216]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 800402c:	f043 0308 	orr.w	r3, r3, #8
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	4b34      	ldr	r3, [pc, #208]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	4931      	ldr	r1, [pc, #196]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8004040:	4313      	orrs	r3, r2
 8004042:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004044:	4b2f      	ldr	r3, [pc, #188]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	021b      	lsls	r3, r3, #8
 8004052:	492c      	ldr	r1, [pc, #176]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]
 8004058:	e01a      	b.n	8004090 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800405a:	4b2a      	ldr	r3, [pc, #168]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a29      	ldr	r2, [pc, #164]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8004060:	f023 0301 	bic.w	r3, r3, #1
 8004064:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004066:	f7fe fb03 	bl	8002670 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800406e:	f7fe faff 	bl	8002670 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e2dd      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004080:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <HAL_RCC_OscConfig+0x1da>
 800408c:	e000      	b.n	8004090 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800408e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d074      	beq.n	8004186 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d005      	beq.n	80040ae <HAL_RCC_OscConfig+0x21a>
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b0c      	cmp	r3, #12
 80040a6:	d10e      	bne.n	80040c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d10b      	bne.n	80040c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ae:	4b15      	ldr	r3, [pc, #84]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d064      	beq.n	8004184 <HAL_RCC_OscConfig+0x2f0>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d160      	bne.n	8004184 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e2ba      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ce:	d106      	bne.n	80040de <HAL_RCC_OscConfig+0x24a>
 80040d0:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0b      	ldr	r2, [pc, #44]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 80040d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	e026      	b.n	800412c <HAL_RCC_OscConfig+0x298>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e6:	d115      	bne.n	8004114 <HAL_RCC_OscConfig+0x280>
 80040e8:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a05      	ldr	r2, [pc, #20]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 80040ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a02      	ldr	r2, [pc, #8]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 80040fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	e014      	b.n	800412c <HAL_RCC_OscConfig+0x298>
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	0800e5ac 	.word	0x0800e5ac
 800410c:	20000004 	.word	0x20000004
 8004110:	20000008 	.word	0x20000008
 8004114:	4ba0      	ldr	r3, [pc, #640]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a9f      	ldr	r2, [pc, #636]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 800411a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b9d      	ldr	r3, [pc, #628]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a9c      	ldr	r2, [pc, #624]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 8004126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d013      	beq.n	800415c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fe fa9c 	bl	8002670 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800413c:	f7fe fa98 	bl	8002670 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	; 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e276      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800414e:	4b92      	ldr	r3, [pc, #584]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0x2a8>
 800415a:	e014      	b.n	8004186 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7fe fa88 	bl	8002670 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004164:	f7fe fa84 	bl	8002670 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e262      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004176:	4b88      	ldr	r3, [pc, #544]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0x2d0>
 8004182:	e000      	b.n	8004186 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d060      	beq.n	8004254 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b04      	cmp	r3, #4
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_OscConfig+0x310>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b0c      	cmp	r3, #12
 800419c:	d119      	bne.n	80041d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d116      	bne.n	80041d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041a4:	4b7c      	ldr	r3, [pc, #496]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_OscConfig+0x328>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e23f      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041bc:	4b76      	ldr	r3, [pc, #472]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	061b      	lsls	r3, r3, #24
 80041ca:	4973      	ldr	r1, [pc, #460]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d0:	e040      	b.n	8004254 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d023      	beq.n	8004222 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041da:	4b6f      	ldr	r3, [pc, #444]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a6e      	ldr	r2, [pc, #440]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 80041e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fe fa43 	bl	8002670 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ee:	f7fe fa3f 	bl	8002670 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e21d      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004200:	4b65      	ldr	r3, [pc, #404]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420c:	4b62      	ldr	r3, [pc, #392]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	061b      	lsls	r3, r3, #24
 800421a:	495f      	ldr	r1, [pc, #380]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 800421c:	4313      	orrs	r3, r2
 800421e:	604b      	str	r3, [r1, #4]
 8004220:	e018      	b.n	8004254 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004222:	4b5d      	ldr	r3, [pc, #372]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a5c      	ldr	r2, [pc, #368]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 8004228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800422c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422e:	f7fe fa1f 	bl	8002670 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004236:	f7fe fa1b 	bl	8002670 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e1f9      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004248:	4b53      	ldr	r3, [pc, #332]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f0      	bne.n	8004236 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d03c      	beq.n	80042da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01c      	beq.n	80042a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004268:	4b4b      	ldr	r3, [pc, #300]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 800426a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800426e:	4a4a      	ldr	r2, [pc, #296]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fe f9fa 	bl	8002670 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004280:	f7fe f9f6 	bl	8002670 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e1d4      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004292:	4b41      	ldr	r3, [pc, #260]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 8004294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0ef      	beq.n	8004280 <HAL_RCC_OscConfig+0x3ec>
 80042a0:	e01b      	b.n	80042da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a2:	4b3d      	ldr	r3, [pc, #244]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 80042a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a8:	4a3b      	ldr	r2, [pc, #236]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b2:	f7fe f9dd 	bl	8002670 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ba:	f7fe f9d9 	bl	8002670 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e1b7      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042cc:	4b32      	ldr	r3, [pc, #200]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 80042ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1ef      	bne.n	80042ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 80a6 	beq.w	8004434 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e8:	2300      	movs	r3, #0
 80042ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042ec:	4b2a      	ldr	r3, [pc, #168]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10d      	bne.n	8004314 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f8:	4b27      	ldr	r3, [pc, #156]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 80042fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fc:	4a26      	ldr	r2, [pc, #152]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 80042fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004302:	6593      	str	r3, [r2, #88]	; 0x58
 8004304:	4b24      	ldr	r3, [pc, #144]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004310:	2301      	movs	r3, #1
 8004312:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004314:	4b21      	ldr	r3, [pc, #132]	; (800439c <HAL_RCC_OscConfig+0x508>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d118      	bne.n	8004352 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004320:	4b1e      	ldr	r3, [pc, #120]	; (800439c <HAL_RCC_OscConfig+0x508>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1d      	ldr	r2, [pc, #116]	; (800439c <HAL_RCC_OscConfig+0x508>)
 8004326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432c:	f7fe f9a0 	bl	8002670 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004334:	f7fe f99c 	bl	8002670 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e17a      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004346:	4b15      	ldr	r3, [pc, #84]	; (800439c <HAL_RCC_OscConfig+0x508>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d108      	bne.n	800436c <HAL_RCC_OscConfig+0x4d8>
 800435a:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004360:	4a0d      	ldr	r2, [pc, #52]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800436a:	e029      	b.n	80043c0 <HAL_RCC_OscConfig+0x52c>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b05      	cmp	r3, #5
 8004372:	d115      	bne.n	80043a0 <HAL_RCC_OscConfig+0x50c>
 8004374:	4b08      	ldr	r3, [pc, #32]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	4a07      	ldr	r2, [pc, #28]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 800437c:	f043 0304 	orr.w	r3, r3, #4
 8004380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004384:	4b04      	ldr	r3, [pc, #16]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	4a03      	ldr	r2, [pc, #12]	; (8004398 <HAL_RCC_OscConfig+0x504>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004394:	e014      	b.n	80043c0 <HAL_RCC_OscConfig+0x52c>
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	40007000 	.word	0x40007000
 80043a0:	4b9c      	ldr	r3, [pc, #624]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a6:	4a9b      	ldr	r2, [pc, #620]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043b0:	4b98      	ldr	r3, [pc, #608]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	4a97      	ldr	r2, [pc, #604]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80043b8:	f023 0304 	bic.w	r3, r3, #4
 80043bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d016      	beq.n	80043f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c8:	f7fe f952 	bl	8002670 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d0:	f7fe f94e 	bl	8002670 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	; 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e12a      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e6:	4b8b      	ldr	r3, [pc, #556]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80043e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0ed      	beq.n	80043d0 <HAL_RCC_OscConfig+0x53c>
 80043f4:	e015      	b.n	8004422 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f6:	f7fe f93b 	bl	8002670 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043fc:	e00a      	b.n	8004414 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fe:	f7fe f937 	bl	8002670 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f241 3288 	movw	r2, #5000	; 0x1388
 800440c:	4293      	cmp	r3, r2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e113      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004414:	4b7f      	ldr	r3, [pc, #508]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1ed      	bne.n	80043fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004422:	7ffb      	ldrb	r3, [r7, #31]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d105      	bne.n	8004434 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004428:	4b7a      	ldr	r3, [pc, #488]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	4a79      	ldr	r2, [pc, #484]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 800442e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004432:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80fe 	beq.w	800463a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	2b02      	cmp	r3, #2
 8004444:	f040 80d0 	bne.w	80045e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004448:	4b72      	ldr	r3, [pc, #456]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f003 0203 	and.w	r2, r3, #3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	429a      	cmp	r2, r3
 800445a:	d130      	bne.n	80044be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	3b01      	subs	r3, #1
 8004468:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d127      	bne.n	80044be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004478:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d11f      	bne.n	80044be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004488:	2a07      	cmp	r2, #7
 800448a:	bf14      	ite	ne
 800448c:	2201      	movne	r2, #1
 800448e:	2200      	moveq	r2, #0
 8004490:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004492:	4293      	cmp	r3, r2
 8004494:	d113      	bne.n	80044be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	3b01      	subs	r3, #1
 80044a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d109      	bne.n	80044be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	3b01      	subs	r3, #1
 80044b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d06e      	beq.n	800459c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b0c      	cmp	r3, #12
 80044c2:	d069      	beq.n	8004598 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044c4:	4b53      	ldr	r3, [pc, #332]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d105      	bne.n	80044dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044d0:	4b50      	ldr	r3, [pc, #320]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e0ad      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044e0:	4b4c      	ldr	r3, [pc, #304]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a4b      	ldr	r2, [pc, #300]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80044e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044ec:	f7fe f8c0 	bl	8002670 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fe f8bc 	bl	8002670 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e09a      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004506:	4b43      	ldr	r3, [pc, #268]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004512:	4b40      	ldr	r3, [pc, #256]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	4b40      	ldr	r3, [pc, #256]	; (8004618 <HAL_RCC_OscConfig+0x784>)
 8004518:	4013      	ands	r3, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004522:	3a01      	subs	r2, #1
 8004524:	0112      	lsls	r2, r2, #4
 8004526:	4311      	orrs	r1, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800452c:	0212      	lsls	r2, r2, #8
 800452e:	4311      	orrs	r1, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004534:	0852      	lsrs	r2, r2, #1
 8004536:	3a01      	subs	r2, #1
 8004538:	0552      	lsls	r2, r2, #21
 800453a:	4311      	orrs	r1, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004540:	0852      	lsrs	r2, r2, #1
 8004542:	3a01      	subs	r2, #1
 8004544:	0652      	lsls	r2, r2, #25
 8004546:	4311      	orrs	r1, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800454c:	0912      	lsrs	r2, r2, #4
 800454e:	0452      	lsls	r2, r2, #17
 8004550:	430a      	orrs	r2, r1
 8004552:	4930      	ldr	r1, [pc, #192]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 8004554:	4313      	orrs	r3, r2
 8004556:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004558:	4b2e      	ldr	r3, [pc, #184]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a2d      	ldr	r2, [pc, #180]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 800455e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004562:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004564:	4b2b      	ldr	r3, [pc, #172]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4a2a      	ldr	r2, [pc, #168]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 800456a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800456e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004570:	f7fe f87e 	bl	8002670 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004578:	f7fe f87a 	bl	8002670 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e058      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458a:	4b22      	ldr	r3, [pc, #136]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004596:	e050      	b.n	800463a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e04f      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459c:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d148      	bne.n	800463a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045a8:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a19      	ldr	r2, [pc, #100]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80045ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045b4:	4b17      	ldr	r3, [pc, #92]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a16      	ldr	r2, [pc, #88]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80045ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045c0:	f7fe f856 	bl	8002670 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fe f852 	bl	8002670 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e030      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0x734>
 80045e6:	e028      	b.n	800463a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	2b0c      	cmp	r3, #12
 80045ec:	d023      	beq.n	8004636 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ee:	4b09      	ldr	r3, [pc, #36]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a08      	ldr	r2, [pc, #32]	; (8004614 <HAL_RCC_OscConfig+0x780>)
 80045f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fa:	f7fe f839 	bl	8002670 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004600:	e00c      	b.n	800461c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004602:	f7fe f835 	bl	8002670 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d905      	bls.n	800461c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e013      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
 8004614:	40021000 	.word	0x40021000
 8004618:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800461c:	4b09      	ldr	r3, [pc, #36]	; (8004644 <HAL_RCC_OscConfig+0x7b0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1ec      	bne.n	8004602 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <HAL_RCC_OscConfig+0x7b0>)
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	4905      	ldr	r1, [pc, #20]	; (8004644 <HAL_RCC_OscConfig+0x7b0>)
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_RCC_OscConfig+0x7b4>)
 8004630:	4013      	ands	r3, r2
 8004632:	60cb      	str	r3, [r1, #12]
 8004634:	e001      	b.n	800463a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3720      	adds	r7, #32
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40021000 	.word	0x40021000
 8004648:	feeefffc 	.word	0xfeeefffc

0800464c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0e7      	b.n	8004830 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004660:	4b75      	ldr	r3, [pc, #468]	; (8004838 <HAL_RCC_ClockConfig+0x1ec>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d910      	bls.n	8004690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b72      	ldr	r3, [pc, #456]	; (8004838 <HAL_RCC_ClockConfig+0x1ec>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 0207 	bic.w	r2, r3, #7
 8004676:	4970      	ldr	r1, [pc, #448]	; (8004838 <HAL_RCC_ClockConfig+0x1ec>)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b6e      	ldr	r3, [pc, #440]	; (8004838 <HAL_RCC_ClockConfig+0x1ec>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0cf      	b.n	8004830 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d010      	beq.n	80046be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	4b66      	ldr	r3, [pc, #408]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d908      	bls.n	80046be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ac:	4b63      	ldr	r3, [pc, #396]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4960      	ldr	r1, [pc, #384]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d04c      	beq.n	8004764 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d107      	bne.n	80046e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d2:	4b5a      	ldr	r3, [pc, #360]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d121      	bne.n	8004722 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e0a6      	b.n	8004830 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ea:	4b54      	ldr	r3, [pc, #336]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d115      	bne.n	8004722 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e09a      	b.n	8004830 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d107      	bne.n	8004712 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004702:	4b4e      	ldr	r3, [pc, #312]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e08e      	b.n	8004830 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004712:	4b4a      	ldr	r3, [pc, #296]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e086      	b.n	8004830 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004722:	4b46      	ldr	r3, [pc, #280]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f023 0203 	bic.w	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	4943      	ldr	r1, [pc, #268]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004734:	f7fd ff9c 	bl	8002670 <HAL_GetTick>
 8004738:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473a:	e00a      	b.n	8004752 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800473c:	f7fd ff98 	bl	8002670 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f241 3288 	movw	r2, #5000	; 0x1388
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e06e      	b.n	8004830 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004752:	4b3a      	ldr	r3, [pc, #232]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 020c 	and.w	r2, r3, #12
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	429a      	cmp	r2, r3
 8004762:	d1eb      	bne.n	800473c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d010      	beq.n	8004792 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	4b31      	ldr	r3, [pc, #196]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800477c:	429a      	cmp	r2, r3
 800477e:	d208      	bcs.n	8004792 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004780:	4b2e      	ldr	r3, [pc, #184]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	492b      	ldr	r1, [pc, #172]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004792:	4b29      	ldr	r3, [pc, #164]	; (8004838 <HAL_RCC_ClockConfig+0x1ec>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d210      	bcs.n	80047c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a0:	4b25      	ldr	r3, [pc, #148]	; (8004838 <HAL_RCC_ClockConfig+0x1ec>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f023 0207 	bic.w	r2, r3, #7
 80047a8:	4923      	ldr	r1, [pc, #140]	; (8004838 <HAL_RCC_ClockConfig+0x1ec>)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b0:	4b21      	ldr	r3, [pc, #132]	; (8004838 <HAL_RCC_ClockConfig+0x1ec>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d001      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e036      	b.n	8004830 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ce:	4b1b      	ldr	r3, [pc, #108]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	4918      	ldr	r1, [pc, #96]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ec:	4b13      	ldr	r3, [pc, #76]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4910      	ldr	r1, [pc, #64]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004800:	f000 f824 	bl	800484c <HAL_RCC_GetSysClockFreq>
 8004804:	4602      	mov	r2, r0
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <HAL_RCC_ClockConfig+0x1f0>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	091b      	lsrs	r3, r3, #4
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	490b      	ldr	r1, [pc, #44]	; (8004840 <HAL_RCC_ClockConfig+0x1f4>)
 8004812:	5ccb      	ldrb	r3, [r1, r3]
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
 800481c:	4a09      	ldr	r2, [pc, #36]	; (8004844 <HAL_RCC_ClockConfig+0x1f8>)
 800481e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004820:	4b09      	ldr	r3, [pc, #36]	; (8004848 <HAL_RCC_ClockConfig+0x1fc>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f7fd fd53 	bl	80022d0 <HAL_InitTick>
 800482a:	4603      	mov	r3, r0
 800482c:	72fb      	strb	r3, [r7, #11]

  return status;
 800482e:	7afb      	ldrb	r3, [r7, #11]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40022000 	.word	0x40022000
 800483c:	40021000 	.word	0x40021000
 8004840:	0800e5ac 	.word	0x0800e5ac
 8004844:	20000004 	.word	0x20000004
 8004848:	20000008 	.word	0x20000008

0800484c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800484c:	b480      	push	{r7}
 800484e:	b089      	sub	sp, #36	; 0x24
 8004850:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	2300      	movs	r3, #0
 8004858:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800485a:	4b3e      	ldr	r3, [pc, #248]	; (8004954 <HAL_RCC_GetSysClockFreq+0x108>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004864:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <HAL_RCC_GetSysClockFreq+0x108>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0x34>
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b0c      	cmp	r3, #12
 8004878:	d121      	bne.n	80048be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d11e      	bne.n	80048be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004880:	4b34      	ldr	r3, [pc, #208]	; (8004954 <HAL_RCC_GetSysClockFreq+0x108>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d107      	bne.n	800489c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800488c:	4b31      	ldr	r3, [pc, #196]	; (8004954 <HAL_RCC_GetSysClockFreq+0x108>)
 800488e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004892:	0a1b      	lsrs	r3, r3, #8
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	e005      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800489c:	4b2d      	ldr	r3, [pc, #180]	; (8004954 <HAL_RCC_GetSysClockFreq+0x108>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048a8:	4a2b      	ldr	r2, [pc, #172]	; (8004958 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10d      	bne.n	80048d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048bc:	e00a      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d102      	bne.n	80048ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048c4:	4b25      	ldr	r3, [pc, #148]	; (800495c <HAL_RCC_GetSysClockFreq+0x110>)
 80048c6:	61bb      	str	r3, [r7, #24]
 80048c8:	e004      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d101      	bne.n	80048d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048d0:	4b23      	ldr	r3, [pc, #140]	; (8004960 <HAL_RCC_GetSysClockFreq+0x114>)
 80048d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b0c      	cmp	r3, #12
 80048d8:	d134      	bne.n	8004944 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048da:	4b1e      	ldr	r3, [pc, #120]	; (8004954 <HAL_RCC_GetSysClockFreq+0x108>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d003      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d003      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0xac>
 80048f0:	e005      	b.n	80048fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048f2:	4b1a      	ldr	r3, [pc, #104]	; (800495c <HAL_RCC_GetSysClockFreq+0x110>)
 80048f4:	617b      	str	r3, [r7, #20]
      break;
 80048f6:	e005      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048f8:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_RCC_GetSysClockFreq+0x114>)
 80048fa:	617b      	str	r3, [r7, #20]
      break;
 80048fc:	e002      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	617b      	str	r3, [r7, #20]
      break;
 8004902:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004904:	4b13      	ldr	r3, [pc, #76]	; (8004954 <HAL_RCC_GetSysClockFreq+0x108>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	3301      	adds	r3, #1
 8004910:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <HAL_RCC_GetSysClockFreq+0x108>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	fb03 f202 	mul.w	r2, r3, r2
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800492a:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <HAL_RCC_GetSysClockFreq+0x108>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	0e5b      	lsrs	r3, r3, #25
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	3301      	adds	r3, #1
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004944:	69bb      	ldr	r3, [r7, #24]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3724      	adds	r7, #36	; 0x24
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000
 8004958:	0800e5c4 	.word	0x0800e5c4
 800495c:	00f42400 	.word	0x00f42400
 8004960:	007a1200 	.word	0x007a1200

08004964 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <HAL_RCC_GetHCLKFreq+0x14>)
 800496a:	681b      	ldr	r3, [r3, #0]
}
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000004 	.word	0x20000004

0800497c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004980:	f7ff fff0 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 8004984:	4602      	mov	r2, r0
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	0a1b      	lsrs	r3, r3, #8
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4904      	ldr	r1, [pc, #16]	; (80049a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004992:	5ccb      	ldrb	r3, [r1, r3]
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40021000 	.word	0x40021000
 80049a4:	0800e5bc 	.word	0x0800e5bc

080049a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049ac:	f7ff ffda 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	4b06      	ldr	r3, [pc, #24]	; (80049cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	0adb      	lsrs	r3, r3, #11
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	4904      	ldr	r1, [pc, #16]	; (80049d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049be:	5ccb      	ldrb	r3, [r1, r3]
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40021000 	.word	0x40021000
 80049d0:	0800e5bc 	.word	0x0800e5bc

080049d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	220f      	movs	r2, #15
 80049e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80049e4:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0203 	and.w	r2, r3, #3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a08:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	08db      	lsrs	r3, r3, #3
 8004a0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a16:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <HAL_RCC_GetClockConfig+0x60>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0207 	and.w	r2, r3, #7
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	601a      	str	r2, [r3, #0]
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40021000 	.word	0x40021000
 8004a34:	40022000 	.word	0x40022000

08004a38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a44:	4b2a      	ldr	r3, [pc, #168]	; (8004af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a50:	f7ff f9bc 	bl	8003dcc <HAL_PWREx_GetVoltageRange>
 8004a54:	6178      	str	r0, [r7, #20]
 8004a56:	e014      	b.n	8004a82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a58:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5c:	4a24      	ldr	r2, [pc, #144]	; (8004af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a62:	6593      	str	r3, [r2, #88]	; 0x58
 8004a64:	4b22      	ldr	r3, [pc, #136]	; (8004af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a70:	f7ff f9ac 	bl	8003dcc <HAL_PWREx_GetVoltageRange>
 8004a74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a76:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7a:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a88:	d10b      	bne.n	8004aa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b80      	cmp	r3, #128	; 0x80
 8004a8e:	d919      	bls.n	8004ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2ba0      	cmp	r3, #160	; 0xa0
 8004a94:	d902      	bls.n	8004a9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a96:	2302      	movs	r3, #2
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	e013      	b.n	8004ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	e010      	b.n	8004ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b80      	cmp	r3, #128	; 0x80
 8004aa6:	d902      	bls.n	8004aae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	e00a      	b.n	8004ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b80      	cmp	r3, #128	; 0x80
 8004ab2:	d102      	bne.n	8004aba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	e004      	b.n	8004ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b70      	cmp	r3, #112	; 0x70
 8004abe:	d101      	bne.n	8004ac4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f023 0207 	bic.w	r2, r3, #7
 8004acc:	4909      	ldr	r1, [pc, #36]	; (8004af4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ad4:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d001      	beq.n	8004ae6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021000 	.word	0x40021000
 8004af4:	40022000 	.word	0x40022000

08004af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b00:	2300      	movs	r3, #0
 8004b02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b04:	2300      	movs	r3, #0
 8004b06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d041      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b1c:	d02a      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b22:	d824      	bhi.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b28:	d008      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b2e:	d81e      	bhi.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b38:	d010      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b3a:	e018      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b3c:	4b86      	ldr	r3, [pc, #536]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4a85      	ldr	r2, [pc, #532]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b46:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b48:	e015      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fabb 	bl	80050cc <RCCEx_PLLSAI1_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b5a:	e00c      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3320      	adds	r3, #32
 8004b60:	2100      	movs	r1, #0
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fba6 	bl	80052b4 <RCCEx_PLLSAI2_Config>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b6c:	e003      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	74fb      	strb	r3, [r7, #19]
      break;
 8004b72:	e000      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b76:	7cfb      	ldrb	r3, [r7, #19]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10b      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b7c:	4b76      	ldr	r3, [pc, #472]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b8a:	4973      	ldr	r1, [pc, #460]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b92:	e001      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b94:	7cfb      	ldrb	r3, [r7, #19]
 8004b96:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d041      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ba8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bac:	d02a      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004bae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bb2:	d824      	bhi.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bb8:	d008      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bbe:	d81e      	bhi.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bc8:	d010      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004bca:	e018      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bcc:	4b62      	ldr	r3, [pc, #392]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	4a61      	ldr	r2, [pc, #388]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bd8:	e015      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	2100      	movs	r1, #0
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fa73 	bl	80050cc <RCCEx_PLLSAI1_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bea:	e00c      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3320      	adds	r3, #32
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fb5e 	bl	80052b4 <RCCEx_PLLSAI2_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bfc:	e003      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	74fb      	strb	r3, [r7, #19]
      break;
 8004c02:	e000      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004c04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c06:	7cfb      	ldrb	r3, [r7, #19]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10b      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c0c:	4b52      	ldr	r3, [pc, #328]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c1a:	494f      	ldr	r1, [pc, #316]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c22:	e001      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c24:	7cfb      	ldrb	r3, [r7, #19]
 8004c26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 80a0 	beq.w	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c36:	2300      	movs	r3, #0
 8004c38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c3a:	4b47      	ldr	r3, [pc, #284]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00d      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c50:	4b41      	ldr	r3, [pc, #260]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	4a40      	ldr	r2, [pc, #256]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c5c:	4b3e      	ldr	r3, [pc, #248]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c6c:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a3a      	ldr	r2, [pc, #232]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c78:	f7fd fcfa 	bl	8002670 <HAL_GetTick>
 8004c7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c7e:	e009      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c80:	f7fd fcf6 	bl	8002670 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d902      	bls.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	74fb      	strb	r3, [r7, #19]
        break;
 8004c92:	e005      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c94:	4b31      	ldr	r3, [pc, #196]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0ef      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ca0:	7cfb      	ldrb	r3, [r7, #19]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d15c      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ca6:	4b2c      	ldr	r3, [pc, #176]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01f      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d019      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cc4:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cd0:	4b21      	ldr	r3, [pc, #132]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	4a20      	ldr	r2, [pc, #128]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ce0:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	4a1c      	ldr	r2, [pc, #112]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cf0:	4a19      	ldr	r2, [pc, #100]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d016      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d02:	f7fd fcb5 	bl	8002670 <HAL_GetTick>
 8004d06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d08:	e00b      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0a:	f7fd fcb1 	bl	8002670 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d902      	bls.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	74fb      	strb	r3, [r7, #19]
            break;
 8004d20:	e006      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d22:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0ec      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004d30:	7cfb      	ldrb	r3, [r7, #19]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d46:	4904      	ldr	r1, [pc, #16]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d4e:	e009      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d50:	7cfb      	ldrb	r3, [r7, #19]
 8004d52:	74bb      	strb	r3, [r7, #18]
 8004d54:	e006      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004d56:	bf00      	nop
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d60:	7cfb      	ldrb	r3, [r7, #19]
 8004d62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d64:	7c7b      	ldrb	r3, [r7, #17]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d105      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d6a:	4b9e      	ldr	r3, [pc, #632]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6e:	4a9d      	ldr	r2, [pc, #628]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d82:	4b98      	ldr	r3, [pc, #608]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d88:	f023 0203 	bic.w	r2, r3, #3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	4994      	ldr	r1, [pc, #592]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004da4:	4b8f      	ldr	r3, [pc, #572]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	f023 020c 	bic.w	r2, r3, #12
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	498c      	ldr	r1, [pc, #560]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dc6:	4b87      	ldr	r3, [pc, #540]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dcc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	4983      	ldr	r1, [pc, #524]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004de8:	4b7e      	ldr	r3, [pc, #504]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	497b      	ldr	r1, [pc, #492]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0310 	and.w	r3, r3, #16
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e0a:	4b76      	ldr	r3, [pc, #472]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e18:	4972      	ldr	r1, [pc, #456]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00a      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e2c:	4b6d      	ldr	r3, [pc, #436]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3a:	496a      	ldr	r1, [pc, #424]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e4e:	4b65      	ldr	r3, [pc, #404]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5c:	4961      	ldr	r1, [pc, #388]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e70:	4b5c      	ldr	r3, [pc, #368]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7e:	4959      	ldr	r1, [pc, #356]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e92:	4b54      	ldr	r3, [pc, #336]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea0:	4950      	ldr	r1, [pc, #320]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eb4:	4b4b      	ldr	r3, [pc, #300]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec2:	4948      	ldr	r1, [pc, #288]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ed6:	4b43      	ldr	r3, [pc, #268]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee4:	493f      	ldr	r1, [pc, #252]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d028      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ef8:	4b3a      	ldr	r3, [pc, #232]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f06:	4937      	ldr	r1, [pc, #220]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f16:	d106      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f18:	4b32      	ldr	r3, [pc, #200]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4a31      	ldr	r2, [pc, #196]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f22:	60d3      	str	r3, [r2, #12]
 8004f24:	e011      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f2e:	d10c      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3304      	adds	r3, #4
 8004f34:	2101      	movs	r1, #1
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 f8c8 	bl	80050cc <RCCEx_PLLSAI1_Config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f40:	7cfb      	ldrb	r3, [r7, #19]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004f46:	7cfb      	ldrb	r3, [r7, #19]
 8004f48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d028      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f56:	4b23      	ldr	r3, [pc, #140]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f64:	491f      	ldr	r1, [pc, #124]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f74:	d106      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f76:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	4a1a      	ldr	r2, [pc, #104]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f80:	60d3      	str	r3, [r2, #12]
 8004f82:	e011      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3304      	adds	r3, #4
 8004f92:	2101      	movs	r1, #1
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 f899 	bl	80050cc <RCCEx_PLLSAI1_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f9e:	7cfb      	ldrb	r3, [r7, #19]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004fa4:	7cfb      	ldrb	r3, [r7, #19]
 8004fa6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d02b      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fb4:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc2:	4908      	ldr	r1, [pc, #32]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fd2:	d109      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fd4:	4b03      	ldr	r3, [pc, #12]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	4a02      	ldr	r2, [pc, #8]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fde:	60d3      	str	r3, [r2, #12]
 8004fe0:	e014      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004fe2:	bf00      	nop
 8004fe4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ff0:	d10c      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 f867 	bl	80050cc <RCCEx_PLLSAI1_Config>
 8004ffe:	4603      	mov	r3, r0
 8005000:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005002:	7cfb      	ldrb	r3, [r7, #19]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005008:	7cfb      	ldrb	r3, [r7, #19]
 800500a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d02f      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005018:	4b2b      	ldr	r3, [pc, #172]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005026:	4928      	ldr	r1, [pc, #160]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005036:	d10d      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3304      	adds	r3, #4
 800503c:	2102      	movs	r1, #2
 800503e:	4618      	mov	r0, r3
 8005040:	f000 f844 	bl	80050cc <RCCEx_PLLSAI1_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005048:	7cfb      	ldrb	r3, [r7, #19]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d014      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800504e:	7cfb      	ldrb	r3, [r7, #19]
 8005050:	74bb      	strb	r3, [r7, #18]
 8005052:	e011      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800505c:	d10c      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3320      	adds	r3, #32
 8005062:	2102      	movs	r1, #2
 8005064:	4618      	mov	r0, r3
 8005066:	f000 f925 	bl	80052b4 <RCCEx_PLLSAI2_Config>
 800506a:	4603      	mov	r3, r0
 800506c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800506e:	7cfb      	ldrb	r3, [r7, #19]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005074:	7cfb      	ldrb	r3, [r7, #19]
 8005076:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005084:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005092:	490d      	ldr	r1, [pc, #52]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050a6:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b6:	4904      	ldr	r1, [pc, #16]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050be:	7cbb      	ldrb	r3, [r7, #18]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40021000 	.word	0x40021000

080050cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050da:	4b75      	ldr	r3, [pc, #468]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d018      	beq.n	8005118 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050e6:	4b72      	ldr	r3, [pc, #456]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f003 0203 	and.w	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d10d      	bne.n	8005112 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
       ||
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d009      	beq.n	8005112 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80050fe:	4b6c      	ldr	r3, [pc, #432]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	091b      	lsrs	r3, r3, #4
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
       ||
 800510e:	429a      	cmp	r2, r3
 8005110:	d047      	beq.n	80051a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	73fb      	strb	r3, [r7, #15]
 8005116:	e044      	b.n	80051a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b03      	cmp	r3, #3
 800511e:	d018      	beq.n	8005152 <RCCEx_PLLSAI1_Config+0x86>
 8005120:	2b03      	cmp	r3, #3
 8005122:	d825      	bhi.n	8005170 <RCCEx_PLLSAI1_Config+0xa4>
 8005124:	2b01      	cmp	r3, #1
 8005126:	d002      	beq.n	800512e <RCCEx_PLLSAI1_Config+0x62>
 8005128:	2b02      	cmp	r3, #2
 800512a:	d009      	beq.n	8005140 <RCCEx_PLLSAI1_Config+0x74>
 800512c:	e020      	b.n	8005170 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800512e:	4b60      	ldr	r3, [pc, #384]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d11d      	bne.n	8005176 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800513e:	e01a      	b.n	8005176 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005140:	4b5b      	ldr	r3, [pc, #364]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005148:	2b00      	cmp	r3, #0
 800514a:	d116      	bne.n	800517a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005150:	e013      	b.n	800517a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005152:	4b57      	ldr	r3, [pc, #348]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10f      	bne.n	800517e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800515e:	4b54      	ldr	r3, [pc, #336]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800516e:	e006      	b.n	800517e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
      break;
 8005174:	e004      	b.n	8005180 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005176:	bf00      	nop
 8005178:	e002      	b.n	8005180 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800517e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005186:	4b4a      	ldr	r3, [pc, #296]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6819      	ldr	r1, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	3b01      	subs	r3, #1
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	430b      	orrs	r3, r1
 800519c:	4944      	ldr	r1, [pc, #272]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d17d      	bne.n	80052a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051a8:	4b41      	ldr	r3, [pc, #260]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a40      	ldr	r2, [pc, #256]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b4:	f7fd fa5c 	bl	8002670 <HAL_GetTick>
 80051b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051ba:	e009      	b.n	80051d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051bc:	f7fd fa58 	bl	8002670 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d902      	bls.n	80051d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	73fb      	strb	r3, [r7, #15]
        break;
 80051ce:	e005      	b.n	80051dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051d0:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1ef      	bne.n	80051bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d160      	bne.n	80052a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d111      	bne.n	800520c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051e8:	4b31      	ldr	r3, [pc, #196]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80051f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6892      	ldr	r2, [r2, #8]
 80051f8:	0211      	lsls	r1, r2, #8
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	68d2      	ldr	r2, [r2, #12]
 80051fe:	0912      	lsrs	r2, r2, #4
 8005200:	0452      	lsls	r2, r2, #17
 8005202:	430a      	orrs	r2, r1
 8005204:	492a      	ldr	r1, [pc, #168]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005206:	4313      	orrs	r3, r2
 8005208:	610b      	str	r3, [r1, #16]
 800520a:	e027      	b.n	800525c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d112      	bne.n	8005238 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005212:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800521a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6892      	ldr	r2, [r2, #8]
 8005222:	0211      	lsls	r1, r2, #8
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6912      	ldr	r2, [r2, #16]
 8005228:	0852      	lsrs	r2, r2, #1
 800522a:	3a01      	subs	r2, #1
 800522c:	0552      	lsls	r2, r2, #21
 800522e:	430a      	orrs	r2, r1
 8005230:	491f      	ldr	r1, [pc, #124]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005232:	4313      	orrs	r3, r2
 8005234:	610b      	str	r3, [r1, #16]
 8005236:	e011      	b.n	800525c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005238:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005240:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6892      	ldr	r2, [r2, #8]
 8005248:	0211      	lsls	r1, r2, #8
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6952      	ldr	r2, [r2, #20]
 800524e:	0852      	lsrs	r2, r2, #1
 8005250:	3a01      	subs	r2, #1
 8005252:	0652      	lsls	r2, r2, #25
 8005254:	430a      	orrs	r2, r1
 8005256:	4916      	ldr	r1, [pc, #88]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005258:	4313      	orrs	r3, r2
 800525a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800525c:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005262:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005266:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005268:	f7fd fa02 	bl	8002670 <HAL_GetTick>
 800526c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800526e:	e009      	b.n	8005284 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005270:	f7fd f9fe 	bl	8002670 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d902      	bls.n	8005284 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	73fb      	strb	r3, [r7, #15]
          break;
 8005282:	e005      	b.n	8005290 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005284:	4b0a      	ldr	r3, [pc, #40]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ef      	beq.n	8005270 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	4904      	ldr	r1, [pc, #16]	; (80052b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40021000 	.word	0x40021000

080052b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052c2:	4b6a      	ldr	r3, [pc, #424]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d018      	beq.n	8005300 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80052ce:	4b67      	ldr	r3, [pc, #412]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f003 0203 	and.w	r2, r3, #3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d10d      	bne.n	80052fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
       ||
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80052e6:	4b61      	ldr	r3, [pc, #388]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	091b      	lsrs	r3, r3, #4
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
       ||
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d047      	beq.n	800538a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	73fb      	strb	r3, [r7, #15]
 80052fe:	e044      	b.n	800538a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b03      	cmp	r3, #3
 8005306:	d018      	beq.n	800533a <RCCEx_PLLSAI2_Config+0x86>
 8005308:	2b03      	cmp	r3, #3
 800530a:	d825      	bhi.n	8005358 <RCCEx_PLLSAI2_Config+0xa4>
 800530c:	2b01      	cmp	r3, #1
 800530e:	d002      	beq.n	8005316 <RCCEx_PLLSAI2_Config+0x62>
 8005310:	2b02      	cmp	r3, #2
 8005312:	d009      	beq.n	8005328 <RCCEx_PLLSAI2_Config+0x74>
 8005314:	e020      	b.n	8005358 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005316:	4b55      	ldr	r3, [pc, #340]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d11d      	bne.n	800535e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005326:	e01a      	b.n	800535e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005328:	4b50      	ldr	r3, [pc, #320]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005330:	2b00      	cmp	r3, #0
 8005332:	d116      	bne.n	8005362 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005338:	e013      	b.n	8005362 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800533a:	4b4c      	ldr	r3, [pc, #304]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10f      	bne.n	8005366 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005346:	4b49      	ldr	r3, [pc, #292]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005356:	e006      	b.n	8005366 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
      break;
 800535c:	e004      	b.n	8005368 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800535e:	bf00      	nop
 8005360:	e002      	b.n	8005368 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005362:	bf00      	nop
 8005364:	e000      	b.n	8005368 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005366:	bf00      	nop
    }

    if(status == HAL_OK)
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10d      	bne.n	800538a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800536e:	4b3f      	ldr	r3, [pc, #252]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6819      	ldr	r1, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	3b01      	subs	r3, #1
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	430b      	orrs	r3, r1
 8005384:	4939      	ldr	r1, [pc, #228]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005386:	4313      	orrs	r3, r2
 8005388:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d167      	bne.n	8005460 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005390:	4b36      	ldr	r3, [pc, #216]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a35      	ldr	r2, [pc, #212]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800539a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800539c:	f7fd f968 	bl	8002670 <HAL_GetTick>
 80053a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053a2:	e009      	b.n	80053b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053a4:	f7fd f964 	bl	8002670 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d902      	bls.n	80053b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	73fb      	strb	r3, [r7, #15]
        break;
 80053b6:	e005      	b.n	80053c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053b8:	4b2c      	ldr	r3, [pc, #176]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1ef      	bne.n	80053a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d14a      	bne.n	8005460 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d111      	bne.n	80053f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053d0:	4b26      	ldr	r3, [pc, #152]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80053d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6892      	ldr	r2, [r2, #8]
 80053e0:	0211      	lsls	r1, r2, #8
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68d2      	ldr	r2, [r2, #12]
 80053e6:	0912      	lsrs	r2, r2, #4
 80053e8:	0452      	lsls	r2, r2, #17
 80053ea:	430a      	orrs	r2, r1
 80053ec:	491f      	ldr	r1, [pc, #124]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	614b      	str	r3, [r1, #20]
 80053f2:	e011      	b.n	8005418 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053f4:	4b1d      	ldr	r3, [pc, #116]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80053fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6892      	ldr	r2, [r2, #8]
 8005404:	0211      	lsls	r1, r2, #8
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6912      	ldr	r2, [r2, #16]
 800540a:	0852      	lsrs	r2, r2, #1
 800540c:	3a01      	subs	r2, #1
 800540e:	0652      	lsls	r2, r2, #25
 8005410:	430a      	orrs	r2, r1
 8005412:	4916      	ldr	r1, [pc, #88]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005414:	4313      	orrs	r3, r2
 8005416:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a13      	ldr	r2, [pc, #76]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 800541e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005422:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005424:	f7fd f924 	bl	8002670 <HAL_GetTick>
 8005428:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800542a:	e009      	b.n	8005440 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800542c:	f7fd f920 	bl	8002670 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d902      	bls.n	8005440 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	73fb      	strb	r3, [r7, #15]
          break;
 800543e:	e005      	b.n	800544c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005440:	4b0a      	ldr	r3, [pc, #40]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0ef      	beq.n	800542c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005454:	695a      	ldr	r2, [r3, #20]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	4904      	ldr	r1, [pc, #16]	; (800546c <RCCEx_PLLSAI2_Config+0x1b8>)
 800545c:	4313      	orrs	r3, r2
 800545e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40021000 	.word	0x40021000

08005470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e049      	b.n	8005516 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fc fe8e 	bl	80021b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f000 fb1e 	bl	8005af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d001      	beq.n	8005538 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e047      	b.n	80055c8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a23      	ldr	r2, [pc, #140]	; (80055d4 <HAL_TIM_Base_Start+0xb4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01d      	beq.n	8005586 <HAL_TIM_Base_Start+0x66>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005552:	d018      	beq.n	8005586 <HAL_TIM_Base_Start+0x66>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <HAL_TIM_Base_Start+0xb8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <HAL_TIM_Base_Start+0x66>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1e      	ldr	r2, [pc, #120]	; (80055dc <HAL_TIM_Base_Start+0xbc>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00e      	beq.n	8005586 <HAL_TIM_Base_Start+0x66>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1c      	ldr	r2, [pc, #112]	; (80055e0 <HAL_TIM_Base_Start+0xc0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d009      	beq.n	8005586 <HAL_TIM_Base_Start+0x66>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <HAL_TIM_Base_Start+0xc4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <HAL_TIM_Base_Start+0x66>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a19      	ldr	r2, [pc, #100]	; (80055e8 <HAL_TIM_Base_Start+0xc8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d115      	bne.n	80055b2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	4b17      	ldr	r3, [pc, #92]	; (80055ec <HAL_TIM_Base_Start+0xcc>)
 800558e:	4013      	ands	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b06      	cmp	r3, #6
 8005596:	d015      	beq.n	80055c4 <HAL_TIM_Base_Start+0xa4>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559e:	d011      	beq.n	80055c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	e008      	b.n	80055c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0201 	orr.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	e000      	b.n	80055c6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800
 80055e0:	40000c00 	.word	0x40000c00
 80055e4:	40013400 	.word	0x40013400
 80055e8:	40014000 	.word	0x40014000
 80055ec:	00010007 	.word	0x00010007

080055f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	d001      	beq.n	8005608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e04f      	b.n	80056a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a23      	ldr	r2, [pc, #140]	; (80056b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01d      	beq.n	8005666 <HAL_TIM_Base_Start_IT+0x76>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005632:	d018      	beq.n	8005666 <HAL_TIM_Base_Start_IT+0x76>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <HAL_TIM_Base_Start_IT+0x76>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1e      	ldr	r2, [pc, #120]	; (80056bc <HAL_TIM_Base_Start_IT+0xcc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00e      	beq.n	8005666 <HAL_TIM_Base_Start_IT+0x76>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d009      	beq.n	8005666 <HAL_TIM_Base_Start_IT+0x76>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1b      	ldr	r2, [pc, #108]	; (80056c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d004      	beq.n	8005666 <HAL_TIM_Base_Start_IT+0x76>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a19      	ldr	r2, [pc, #100]	; (80056c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d115      	bne.n	8005692 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	4b17      	ldr	r3, [pc, #92]	; (80056cc <HAL_TIM_Base_Start_IT+0xdc>)
 800566e:	4013      	ands	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b06      	cmp	r3, #6
 8005676:	d015      	beq.n	80056a4 <HAL_TIM_Base_Start_IT+0xb4>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567e:	d011      	beq.n	80056a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005690:	e008      	b.n	80056a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f042 0201 	orr.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	e000      	b.n	80056a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	40012c00 	.word	0x40012c00
 80056b8:	40000400 	.word	0x40000400
 80056bc:	40000800 	.word	0x40000800
 80056c0:	40000c00 	.word	0x40000c00
 80056c4:	40013400 	.word	0x40013400
 80056c8:	40014000 	.word	0x40014000
 80056cc:	00010007 	.word	0x00010007

080056d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d122      	bne.n	800572c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d11b      	bne.n	800572c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0202 	mvn.w	r2, #2
 80056fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f9ce 	bl	8005ab4 <HAL_TIM_IC_CaptureCallback>
 8005718:	e005      	b.n	8005726 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f9c0 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f9d1 	bl	8005ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0304 	and.w	r3, r3, #4
 8005736:	2b04      	cmp	r3, #4
 8005738:	d122      	bne.n	8005780 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b04      	cmp	r3, #4
 8005746:	d11b      	bne.n	8005780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0204 	mvn.w	r2, #4
 8005750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f9a4 	bl	8005ab4 <HAL_TIM_IC_CaptureCallback>
 800576c:	e005      	b.n	800577a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f996 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f9a7 	bl	8005ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b08      	cmp	r3, #8
 800578c:	d122      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b08      	cmp	r3, #8
 800579a:	d11b      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0208 	mvn.w	r2, #8
 80057a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2204      	movs	r2, #4
 80057aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f97a 	bl	8005ab4 <HAL_TIM_IC_CaptureCallback>
 80057c0:	e005      	b.n	80057ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f96c 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f97d 	bl	8005ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0310 	and.w	r3, r3, #16
 80057de:	2b10      	cmp	r3, #16
 80057e0:	d122      	bne.n	8005828 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d11b      	bne.n	8005828 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0210 	mvn.w	r2, #16
 80057f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2208      	movs	r2, #8
 80057fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f950 	bl	8005ab4 <HAL_TIM_IC_CaptureCallback>
 8005814:	e005      	b.n	8005822 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f942 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f953 	bl	8005ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b01      	cmp	r3, #1
 8005834:	d10e      	bne.n	8005854 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b01      	cmp	r3, #1
 8005842:	d107      	bne.n	8005854 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0201 	mvn.w	r2, #1
 800584c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fc fb20 	bl	8001e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585e:	2b80      	cmp	r3, #128	; 0x80
 8005860:	d10e      	bne.n	8005880 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586c:	2b80      	cmp	r3, #128	; 0x80
 800586e:	d107      	bne.n	8005880 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fafe 	bl	8005e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588e:	d10e      	bne.n	80058ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589a:	2b80      	cmp	r3, #128	; 0x80
 800589c:	d107      	bne.n	80058ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80058a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 faf1 	bl	8005e90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b8:	2b40      	cmp	r3, #64	; 0x40
 80058ba:	d10e      	bne.n	80058da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c6:	2b40      	cmp	r3, #64	; 0x40
 80058c8:	d107      	bne.n	80058da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f901 	bl	8005adc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d10e      	bne.n	8005906 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d107      	bne.n	8005906 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f06f 0220 	mvn.w	r2, #32
 80058fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fab1 	bl	8005e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_TIM_ConfigClockSource+0x1c>
 8005926:	2302      	movs	r3, #2
 8005928:	e0b6      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x18a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005948:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800594c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005954:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005966:	d03e      	beq.n	80059e6 <HAL_TIM_ConfigClockSource+0xd8>
 8005968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800596c:	f200 8087 	bhi.w	8005a7e <HAL_TIM_ConfigClockSource+0x170>
 8005970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005974:	f000 8086 	beq.w	8005a84 <HAL_TIM_ConfigClockSource+0x176>
 8005978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800597c:	d87f      	bhi.n	8005a7e <HAL_TIM_ConfigClockSource+0x170>
 800597e:	2b70      	cmp	r3, #112	; 0x70
 8005980:	d01a      	beq.n	80059b8 <HAL_TIM_ConfigClockSource+0xaa>
 8005982:	2b70      	cmp	r3, #112	; 0x70
 8005984:	d87b      	bhi.n	8005a7e <HAL_TIM_ConfigClockSource+0x170>
 8005986:	2b60      	cmp	r3, #96	; 0x60
 8005988:	d050      	beq.n	8005a2c <HAL_TIM_ConfigClockSource+0x11e>
 800598a:	2b60      	cmp	r3, #96	; 0x60
 800598c:	d877      	bhi.n	8005a7e <HAL_TIM_ConfigClockSource+0x170>
 800598e:	2b50      	cmp	r3, #80	; 0x50
 8005990:	d03c      	beq.n	8005a0c <HAL_TIM_ConfigClockSource+0xfe>
 8005992:	2b50      	cmp	r3, #80	; 0x50
 8005994:	d873      	bhi.n	8005a7e <HAL_TIM_ConfigClockSource+0x170>
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	d058      	beq.n	8005a4c <HAL_TIM_ConfigClockSource+0x13e>
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d86f      	bhi.n	8005a7e <HAL_TIM_ConfigClockSource+0x170>
 800599e:	2b30      	cmp	r3, #48	; 0x30
 80059a0:	d064      	beq.n	8005a6c <HAL_TIM_ConfigClockSource+0x15e>
 80059a2:	2b30      	cmp	r3, #48	; 0x30
 80059a4:	d86b      	bhi.n	8005a7e <HAL_TIM_ConfigClockSource+0x170>
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d060      	beq.n	8005a6c <HAL_TIM_ConfigClockSource+0x15e>
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d867      	bhi.n	8005a7e <HAL_TIM_ConfigClockSource+0x170>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d05c      	beq.n	8005a6c <HAL_TIM_ConfigClockSource+0x15e>
 80059b2:	2b10      	cmp	r3, #16
 80059b4:	d05a      	beq.n	8005a6c <HAL_TIM_ConfigClockSource+0x15e>
 80059b6:	e062      	b.n	8005a7e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	6899      	ldr	r1, [r3, #8]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f000 f9a6 	bl	8005d18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	609a      	str	r2, [r3, #8]
      break;
 80059e4:	e04f      	b.n	8005a86 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	6899      	ldr	r1, [r3, #8]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f000 f98f 	bl	8005d18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a08:	609a      	str	r2, [r3, #8]
      break;
 8005a0a:	e03c      	b.n	8005a86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	6859      	ldr	r1, [r3, #4]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f000 f903 	bl	8005c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2150      	movs	r1, #80	; 0x50
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 f95c 	bl	8005ce2 <TIM_ITRx_SetConfig>
      break;
 8005a2a:	e02c      	b.n	8005a86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	6859      	ldr	r1, [r3, #4]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f000 f922 	bl	8005c82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2160      	movs	r1, #96	; 0x60
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 f94c 	bl	8005ce2 <TIM_ITRx_SetConfig>
      break;
 8005a4a:	e01c      	b.n	8005a86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	6859      	ldr	r1, [r3, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	f000 f8e3 	bl	8005c24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2140      	movs	r1, #64	; 0x40
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 f93c 	bl	8005ce2 <TIM_ITRx_SetConfig>
      break;
 8005a6a:	e00c      	b.n	8005a86 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f000 f933 	bl	8005ce2 <TIM_ITRx_SetConfig>
      break;
 8005a7c:	e003      	b.n	8005a86 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	73fb      	strb	r3, [r7, #15]
      break;
 8005a82:	e000      	b.n	8005a86 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a40      	ldr	r2, [pc, #256]	; (8005c04 <TIM_Base_SetConfig+0x114>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d013      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0e:	d00f      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a3d      	ldr	r2, [pc, #244]	; (8005c08 <TIM_Base_SetConfig+0x118>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00b      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a3c      	ldr	r2, [pc, #240]	; (8005c0c <TIM_Base_SetConfig+0x11c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d007      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a3b      	ldr	r2, [pc, #236]	; (8005c10 <TIM_Base_SetConfig+0x120>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d003      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a3a      	ldr	r2, [pc, #232]	; (8005c14 <TIM_Base_SetConfig+0x124>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d108      	bne.n	8005b42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a2f      	ldr	r2, [pc, #188]	; (8005c04 <TIM_Base_SetConfig+0x114>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01f      	beq.n	8005b8a <TIM_Base_SetConfig+0x9a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b50:	d01b      	beq.n	8005b8a <TIM_Base_SetConfig+0x9a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a2c      	ldr	r2, [pc, #176]	; (8005c08 <TIM_Base_SetConfig+0x118>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d017      	beq.n	8005b8a <TIM_Base_SetConfig+0x9a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2b      	ldr	r2, [pc, #172]	; (8005c0c <TIM_Base_SetConfig+0x11c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d013      	beq.n	8005b8a <TIM_Base_SetConfig+0x9a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a2a      	ldr	r2, [pc, #168]	; (8005c10 <TIM_Base_SetConfig+0x120>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00f      	beq.n	8005b8a <TIM_Base_SetConfig+0x9a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a29      	ldr	r2, [pc, #164]	; (8005c14 <TIM_Base_SetConfig+0x124>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00b      	beq.n	8005b8a <TIM_Base_SetConfig+0x9a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a28      	ldr	r2, [pc, #160]	; (8005c18 <TIM_Base_SetConfig+0x128>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d007      	beq.n	8005b8a <TIM_Base_SetConfig+0x9a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a27      	ldr	r2, [pc, #156]	; (8005c1c <TIM_Base_SetConfig+0x12c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d003      	beq.n	8005b8a <TIM_Base_SetConfig+0x9a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a26      	ldr	r2, [pc, #152]	; (8005c20 <TIM_Base_SetConfig+0x130>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d108      	bne.n	8005b9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a10      	ldr	r2, [pc, #64]	; (8005c04 <TIM_Base_SetConfig+0x114>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00f      	beq.n	8005be8 <TIM_Base_SetConfig+0xf8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a12      	ldr	r2, [pc, #72]	; (8005c14 <TIM_Base_SetConfig+0x124>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00b      	beq.n	8005be8 <TIM_Base_SetConfig+0xf8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a11      	ldr	r2, [pc, #68]	; (8005c18 <TIM_Base_SetConfig+0x128>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d007      	beq.n	8005be8 <TIM_Base_SetConfig+0xf8>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a10      	ldr	r2, [pc, #64]	; (8005c1c <TIM_Base_SetConfig+0x12c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_Base_SetConfig+0xf8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a0f      	ldr	r2, [pc, #60]	; (8005c20 <TIM_Base_SetConfig+0x130>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d103      	bne.n	8005bf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	615a      	str	r2, [r3, #20]
}
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800
 8005c10:	40000c00 	.word	0x40000c00
 8005c14:	40013400 	.word	0x40013400
 8005c18:	40014000 	.word	0x40014000
 8005c1c:	40014400 	.word	0x40014400
 8005c20:	40014800 	.word	0x40014800

08005c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f023 0201 	bic.w	r2, r3, #1
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f023 030a 	bic.w	r3, r3, #10
 8005c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b087      	sub	sp, #28
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f023 0210 	bic.w	r2, r3, #16
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	031b      	lsls	r3, r3, #12
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f043 0307 	orr.w	r3, r3, #7
 8005d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	609a      	str	r2, [r3, #8]
}
 8005d0c:	bf00      	nop
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	021a      	lsls	r2, r3, #8
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e068      	b.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a2e      	ldr	r2, [pc, #184]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d004      	beq.n	8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a2d      	ldr	r2, [pc, #180]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d108      	bne.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005daa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1e      	ldr	r2, [pc, #120]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d01d      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d018      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1b      	ldr	r2, [pc, #108]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d013      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1a      	ldr	r2, [pc, #104]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00e      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a18      	ldr	r2, [pc, #96]	; (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d009      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a13      	ldr	r2, [pc, #76]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d004      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a14      	ldr	r2, [pc, #80]	; (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d10c      	bne.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40013400 	.word	0x40013400
 8005e58:	40000400 	.word	0x40000400
 8005e5c:	40000800 	.word	0x40000800
 8005e60:	40000c00 	.word	0x40000c00
 8005e64:	40014000 	.word	0x40014000

08005e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e040      	b.n	8005f38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fc f9be 	bl	8002248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2224      	movs	r2, #36	; 0x24
 8005ed0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0201 	bic.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f8c0 	bl	8006068 <UART_SetConfig>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e022      	b.n	8005f38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fb6c 	bl	80065d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fbf3 	bl	800671c <UART_CheckIdleState>
 8005f36:	4603      	mov	r3, r0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08a      	sub	sp, #40	; 0x28
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	f040 8082 	bne.w	800605e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <HAL_UART_Transmit+0x26>
 8005f60:	88fb      	ldrh	r3, [r7, #6]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e07a      	b.n	8006060 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_UART_Transmit+0x38>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e073      	b.n	8006060 <HAL_UART_Transmit+0x120>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2221      	movs	r2, #33	; 0x21
 8005f8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f8e:	f7fc fb6f 	bl	8002670 <HAL_GetTick>
 8005f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	88fa      	ldrh	r2, [r7, #6]
 8005f98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	88fa      	ldrh	r2, [r7, #6]
 8005fa0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fac:	d108      	bne.n	8005fc0 <HAL_UART_Transmit+0x80>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d104      	bne.n	8005fc0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	e003      	b.n	8005fc8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005fd0:	e02d      	b.n	800602e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2180      	movs	r1, #128	; 0x80
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 fbe6 	bl	80067ae <UART_WaitOnFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e039      	b.n	8006060 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10b      	bne.n	800600a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	881a      	ldrh	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ffe:	b292      	uxth	r2, r2
 8006000:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	3302      	adds	r3, #2
 8006006:	61bb      	str	r3, [r7, #24]
 8006008:	e008      	b.n	800601c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	781a      	ldrb	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	b292      	uxth	r2, r2
 8006014:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	3301      	adds	r3, #1
 800601a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1cb      	bne.n	8005fd2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2200      	movs	r2, #0
 8006042:	2140      	movs	r1, #64	; 0x40
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fbb2 	bl	80067ae <UART_WaitOnFlagUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e005      	b.n	8006060 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2220      	movs	r2, #32
 8006058:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	e000      	b.n	8006060 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800605e:	2302      	movs	r3, #2
  }
}
 8006060:	4618      	mov	r0, r3
 8006062:	3720      	adds	r7, #32
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800606c:	b08a      	sub	sp, #40	; 0x28
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	431a      	orrs	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	431a      	orrs	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	4313      	orrs	r3, r2
 800608e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	4ba4      	ldr	r3, [pc, #656]	; (8006328 <UART_SetConfig+0x2c0>)
 8006098:	4013      	ands	r3, r2
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	6812      	ldr	r2, [r2, #0]
 800609e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060a0:	430b      	orrs	r3, r1
 80060a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a99      	ldr	r2, [pc, #612]	; (800632c <UART_SetConfig+0x2c4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d0:	4313      	orrs	r3, r2
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e4:	430a      	orrs	r2, r1
 80060e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a90      	ldr	r2, [pc, #576]	; (8006330 <UART_SetConfig+0x2c8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d126      	bne.n	8006140 <UART_SetConfig+0xd8>
 80060f2:	4b90      	ldr	r3, [pc, #576]	; (8006334 <UART_SetConfig+0x2cc>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d81b      	bhi.n	8006138 <UART_SetConfig+0xd0>
 8006100:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <UART_SetConfig+0xa0>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	08006119 	.word	0x08006119
 800610c:	08006129 	.word	0x08006129
 8006110:	08006121 	.word	0x08006121
 8006114:	08006131 	.word	0x08006131
 8006118:	2301      	movs	r3, #1
 800611a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800611e:	e116      	b.n	800634e <UART_SetConfig+0x2e6>
 8006120:	2302      	movs	r3, #2
 8006122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006126:	e112      	b.n	800634e <UART_SetConfig+0x2e6>
 8006128:	2304      	movs	r3, #4
 800612a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800612e:	e10e      	b.n	800634e <UART_SetConfig+0x2e6>
 8006130:	2308      	movs	r3, #8
 8006132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006136:	e10a      	b.n	800634e <UART_SetConfig+0x2e6>
 8006138:	2310      	movs	r3, #16
 800613a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800613e:	e106      	b.n	800634e <UART_SetConfig+0x2e6>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a7c      	ldr	r2, [pc, #496]	; (8006338 <UART_SetConfig+0x2d0>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d138      	bne.n	80061bc <UART_SetConfig+0x154>
 800614a:	4b7a      	ldr	r3, [pc, #488]	; (8006334 <UART_SetConfig+0x2cc>)
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006150:	f003 030c 	and.w	r3, r3, #12
 8006154:	2b0c      	cmp	r3, #12
 8006156:	d82d      	bhi.n	80061b4 <UART_SetConfig+0x14c>
 8006158:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <UART_SetConfig+0xf8>)
 800615a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615e:	bf00      	nop
 8006160:	08006195 	.word	0x08006195
 8006164:	080061b5 	.word	0x080061b5
 8006168:	080061b5 	.word	0x080061b5
 800616c:	080061b5 	.word	0x080061b5
 8006170:	080061a5 	.word	0x080061a5
 8006174:	080061b5 	.word	0x080061b5
 8006178:	080061b5 	.word	0x080061b5
 800617c:	080061b5 	.word	0x080061b5
 8006180:	0800619d 	.word	0x0800619d
 8006184:	080061b5 	.word	0x080061b5
 8006188:	080061b5 	.word	0x080061b5
 800618c:	080061b5 	.word	0x080061b5
 8006190:	080061ad 	.word	0x080061ad
 8006194:	2300      	movs	r3, #0
 8006196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619a:	e0d8      	b.n	800634e <UART_SetConfig+0x2e6>
 800619c:	2302      	movs	r3, #2
 800619e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a2:	e0d4      	b.n	800634e <UART_SetConfig+0x2e6>
 80061a4:	2304      	movs	r3, #4
 80061a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061aa:	e0d0      	b.n	800634e <UART_SetConfig+0x2e6>
 80061ac:	2308      	movs	r3, #8
 80061ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b2:	e0cc      	b.n	800634e <UART_SetConfig+0x2e6>
 80061b4:	2310      	movs	r3, #16
 80061b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ba:	e0c8      	b.n	800634e <UART_SetConfig+0x2e6>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a5e      	ldr	r2, [pc, #376]	; (800633c <UART_SetConfig+0x2d4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d125      	bne.n	8006212 <UART_SetConfig+0x1aa>
 80061c6:	4b5b      	ldr	r3, [pc, #364]	; (8006334 <UART_SetConfig+0x2cc>)
 80061c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80061d0:	2b30      	cmp	r3, #48	; 0x30
 80061d2:	d016      	beq.n	8006202 <UART_SetConfig+0x19a>
 80061d4:	2b30      	cmp	r3, #48	; 0x30
 80061d6:	d818      	bhi.n	800620a <UART_SetConfig+0x1a2>
 80061d8:	2b20      	cmp	r3, #32
 80061da:	d00a      	beq.n	80061f2 <UART_SetConfig+0x18a>
 80061dc:	2b20      	cmp	r3, #32
 80061de:	d814      	bhi.n	800620a <UART_SetConfig+0x1a2>
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <UART_SetConfig+0x182>
 80061e4:	2b10      	cmp	r3, #16
 80061e6:	d008      	beq.n	80061fa <UART_SetConfig+0x192>
 80061e8:	e00f      	b.n	800620a <UART_SetConfig+0x1a2>
 80061ea:	2300      	movs	r3, #0
 80061ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f0:	e0ad      	b.n	800634e <UART_SetConfig+0x2e6>
 80061f2:	2302      	movs	r3, #2
 80061f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f8:	e0a9      	b.n	800634e <UART_SetConfig+0x2e6>
 80061fa:	2304      	movs	r3, #4
 80061fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006200:	e0a5      	b.n	800634e <UART_SetConfig+0x2e6>
 8006202:	2308      	movs	r3, #8
 8006204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006208:	e0a1      	b.n	800634e <UART_SetConfig+0x2e6>
 800620a:	2310      	movs	r3, #16
 800620c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006210:	e09d      	b.n	800634e <UART_SetConfig+0x2e6>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a4a      	ldr	r2, [pc, #296]	; (8006340 <UART_SetConfig+0x2d8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d125      	bne.n	8006268 <UART_SetConfig+0x200>
 800621c:	4b45      	ldr	r3, [pc, #276]	; (8006334 <UART_SetConfig+0x2cc>)
 800621e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006222:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006226:	2bc0      	cmp	r3, #192	; 0xc0
 8006228:	d016      	beq.n	8006258 <UART_SetConfig+0x1f0>
 800622a:	2bc0      	cmp	r3, #192	; 0xc0
 800622c:	d818      	bhi.n	8006260 <UART_SetConfig+0x1f8>
 800622e:	2b80      	cmp	r3, #128	; 0x80
 8006230:	d00a      	beq.n	8006248 <UART_SetConfig+0x1e0>
 8006232:	2b80      	cmp	r3, #128	; 0x80
 8006234:	d814      	bhi.n	8006260 <UART_SetConfig+0x1f8>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <UART_SetConfig+0x1d8>
 800623a:	2b40      	cmp	r3, #64	; 0x40
 800623c:	d008      	beq.n	8006250 <UART_SetConfig+0x1e8>
 800623e:	e00f      	b.n	8006260 <UART_SetConfig+0x1f8>
 8006240:	2300      	movs	r3, #0
 8006242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006246:	e082      	b.n	800634e <UART_SetConfig+0x2e6>
 8006248:	2302      	movs	r3, #2
 800624a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800624e:	e07e      	b.n	800634e <UART_SetConfig+0x2e6>
 8006250:	2304      	movs	r3, #4
 8006252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006256:	e07a      	b.n	800634e <UART_SetConfig+0x2e6>
 8006258:	2308      	movs	r3, #8
 800625a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800625e:	e076      	b.n	800634e <UART_SetConfig+0x2e6>
 8006260:	2310      	movs	r3, #16
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006266:	e072      	b.n	800634e <UART_SetConfig+0x2e6>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a35      	ldr	r2, [pc, #212]	; (8006344 <UART_SetConfig+0x2dc>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d12a      	bne.n	80062c8 <UART_SetConfig+0x260>
 8006272:	4b30      	ldr	r3, [pc, #192]	; (8006334 <UART_SetConfig+0x2cc>)
 8006274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800627c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006280:	d01a      	beq.n	80062b8 <UART_SetConfig+0x250>
 8006282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006286:	d81b      	bhi.n	80062c0 <UART_SetConfig+0x258>
 8006288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800628c:	d00c      	beq.n	80062a8 <UART_SetConfig+0x240>
 800628e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006292:	d815      	bhi.n	80062c0 <UART_SetConfig+0x258>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <UART_SetConfig+0x238>
 8006298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629c:	d008      	beq.n	80062b0 <UART_SetConfig+0x248>
 800629e:	e00f      	b.n	80062c0 <UART_SetConfig+0x258>
 80062a0:	2300      	movs	r3, #0
 80062a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062a6:	e052      	b.n	800634e <UART_SetConfig+0x2e6>
 80062a8:	2302      	movs	r3, #2
 80062aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ae:	e04e      	b.n	800634e <UART_SetConfig+0x2e6>
 80062b0:	2304      	movs	r3, #4
 80062b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062b6:	e04a      	b.n	800634e <UART_SetConfig+0x2e6>
 80062b8:	2308      	movs	r3, #8
 80062ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062be:	e046      	b.n	800634e <UART_SetConfig+0x2e6>
 80062c0:	2310      	movs	r3, #16
 80062c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c6:	e042      	b.n	800634e <UART_SetConfig+0x2e6>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a17      	ldr	r2, [pc, #92]	; (800632c <UART_SetConfig+0x2c4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d13a      	bne.n	8006348 <UART_SetConfig+0x2e0>
 80062d2:	4b18      	ldr	r3, [pc, #96]	; (8006334 <UART_SetConfig+0x2cc>)
 80062d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062e0:	d01a      	beq.n	8006318 <UART_SetConfig+0x2b0>
 80062e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062e6:	d81b      	bhi.n	8006320 <UART_SetConfig+0x2b8>
 80062e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ec:	d00c      	beq.n	8006308 <UART_SetConfig+0x2a0>
 80062ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062f2:	d815      	bhi.n	8006320 <UART_SetConfig+0x2b8>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <UART_SetConfig+0x298>
 80062f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062fc:	d008      	beq.n	8006310 <UART_SetConfig+0x2a8>
 80062fe:	e00f      	b.n	8006320 <UART_SetConfig+0x2b8>
 8006300:	2300      	movs	r3, #0
 8006302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006306:	e022      	b.n	800634e <UART_SetConfig+0x2e6>
 8006308:	2302      	movs	r3, #2
 800630a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800630e:	e01e      	b.n	800634e <UART_SetConfig+0x2e6>
 8006310:	2304      	movs	r3, #4
 8006312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006316:	e01a      	b.n	800634e <UART_SetConfig+0x2e6>
 8006318:	2308      	movs	r3, #8
 800631a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800631e:	e016      	b.n	800634e <UART_SetConfig+0x2e6>
 8006320:	2310      	movs	r3, #16
 8006322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006326:	e012      	b.n	800634e <UART_SetConfig+0x2e6>
 8006328:	efff69f3 	.word	0xefff69f3
 800632c:	40008000 	.word	0x40008000
 8006330:	40013800 	.word	0x40013800
 8006334:	40021000 	.word	0x40021000
 8006338:	40004400 	.word	0x40004400
 800633c:	40004800 	.word	0x40004800
 8006340:	40004c00 	.word	0x40004c00
 8006344:	40005000 	.word	0x40005000
 8006348:	2310      	movs	r3, #16
 800634a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a9f      	ldr	r2, [pc, #636]	; (80065d0 <UART_SetConfig+0x568>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d17a      	bne.n	800644e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800635c:	2b08      	cmp	r3, #8
 800635e:	d824      	bhi.n	80063aa <UART_SetConfig+0x342>
 8006360:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <UART_SetConfig+0x300>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	0800638d 	.word	0x0800638d
 800636c:	080063ab 	.word	0x080063ab
 8006370:	08006395 	.word	0x08006395
 8006374:	080063ab 	.word	0x080063ab
 8006378:	0800639b 	.word	0x0800639b
 800637c:	080063ab 	.word	0x080063ab
 8006380:	080063ab 	.word	0x080063ab
 8006384:	080063ab 	.word	0x080063ab
 8006388:	080063a3 	.word	0x080063a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800638c:	f7fe faf6 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 8006390:	61f8      	str	r0, [r7, #28]
        break;
 8006392:	e010      	b.n	80063b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006394:	4b8f      	ldr	r3, [pc, #572]	; (80065d4 <UART_SetConfig+0x56c>)
 8006396:	61fb      	str	r3, [r7, #28]
        break;
 8006398:	e00d      	b.n	80063b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800639a:	f7fe fa57 	bl	800484c <HAL_RCC_GetSysClockFreq>
 800639e:	61f8      	str	r0, [r7, #28]
        break;
 80063a0:	e009      	b.n	80063b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a6:	61fb      	str	r3, [r7, #28]
        break;
 80063a8:	e005      	b.n	80063b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80063b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80fb 	beq.w	80065b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	4413      	add	r3, r2
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d305      	bcc.n	80063da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063d4:	69fa      	ldr	r2, [r7, #28]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d903      	bls.n	80063e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063e0:	e0e8      	b.n	80065b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	2200      	movs	r2, #0
 80063e6:	461c      	mov	r4, r3
 80063e8:	4615      	mov	r5, r2
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	f04f 0300 	mov.w	r3, #0
 80063f2:	022b      	lsls	r3, r5, #8
 80063f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80063f8:	0222      	lsls	r2, r4, #8
 80063fa:	68f9      	ldr	r1, [r7, #12]
 80063fc:	6849      	ldr	r1, [r1, #4]
 80063fe:	0849      	lsrs	r1, r1, #1
 8006400:	2000      	movs	r0, #0
 8006402:	4688      	mov	r8, r1
 8006404:	4681      	mov	r9, r0
 8006406:	eb12 0a08 	adds.w	sl, r2, r8
 800640a:	eb43 0b09 	adc.w	fp, r3, r9
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800641c:	4650      	mov	r0, sl
 800641e:	4659      	mov	r1, fp
 8006420:	f7fa fbe2 	bl	8000be8 <__aeabi_uldivmod>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4613      	mov	r3, r2
 800642a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006432:	d308      	bcc.n	8006446 <UART_SetConfig+0x3de>
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800643a:	d204      	bcs.n	8006446 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	60da      	str	r2, [r3, #12]
 8006444:	e0b6      	b.n	80065b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800644c:	e0b2      	b.n	80065b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006456:	d15e      	bne.n	8006516 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006458:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800645c:	2b08      	cmp	r3, #8
 800645e:	d828      	bhi.n	80064b2 <UART_SetConfig+0x44a>
 8006460:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <UART_SetConfig+0x400>)
 8006462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006466:	bf00      	nop
 8006468:	0800648d 	.word	0x0800648d
 800646c:	08006495 	.word	0x08006495
 8006470:	0800649d 	.word	0x0800649d
 8006474:	080064b3 	.word	0x080064b3
 8006478:	080064a3 	.word	0x080064a3
 800647c:	080064b3 	.word	0x080064b3
 8006480:	080064b3 	.word	0x080064b3
 8006484:	080064b3 	.word	0x080064b3
 8006488:	080064ab 	.word	0x080064ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800648c:	f7fe fa76 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 8006490:	61f8      	str	r0, [r7, #28]
        break;
 8006492:	e014      	b.n	80064be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006494:	f7fe fa88 	bl	80049a8 <HAL_RCC_GetPCLK2Freq>
 8006498:	61f8      	str	r0, [r7, #28]
        break;
 800649a:	e010      	b.n	80064be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800649c:	4b4d      	ldr	r3, [pc, #308]	; (80065d4 <UART_SetConfig+0x56c>)
 800649e:	61fb      	str	r3, [r7, #28]
        break;
 80064a0:	e00d      	b.n	80064be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064a2:	f7fe f9d3 	bl	800484c <HAL_RCC_GetSysClockFreq>
 80064a6:	61f8      	str	r0, [r7, #28]
        break;
 80064a8:	e009      	b.n	80064be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ae:	61fb      	str	r3, [r7, #28]
        break;
 80064b0:	e005      	b.n	80064be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d077      	beq.n	80065b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	005a      	lsls	r2, r3, #1
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	441a      	add	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	2b0f      	cmp	r3, #15
 80064de:	d916      	bls.n	800650e <UART_SetConfig+0x4a6>
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e6:	d212      	bcs.n	800650e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	f023 030f 	bic.w	r3, r3, #15
 80064f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	085b      	lsrs	r3, r3, #1
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	8afb      	ldrh	r3, [r7, #22]
 8006500:	4313      	orrs	r3, r2
 8006502:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	8afa      	ldrh	r2, [r7, #22]
 800650a:	60da      	str	r2, [r3, #12]
 800650c:	e052      	b.n	80065b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006514:	e04e      	b.n	80065b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006516:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800651a:	2b08      	cmp	r3, #8
 800651c:	d827      	bhi.n	800656e <UART_SetConfig+0x506>
 800651e:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <UART_SetConfig+0x4bc>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	08006549 	.word	0x08006549
 8006528:	08006551 	.word	0x08006551
 800652c:	08006559 	.word	0x08006559
 8006530:	0800656f 	.word	0x0800656f
 8006534:	0800655f 	.word	0x0800655f
 8006538:	0800656f 	.word	0x0800656f
 800653c:	0800656f 	.word	0x0800656f
 8006540:	0800656f 	.word	0x0800656f
 8006544:	08006567 	.word	0x08006567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006548:	f7fe fa18 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 800654c:	61f8      	str	r0, [r7, #28]
        break;
 800654e:	e014      	b.n	800657a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006550:	f7fe fa2a 	bl	80049a8 <HAL_RCC_GetPCLK2Freq>
 8006554:	61f8      	str	r0, [r7, #28]
        break;
 8006556:	e010      	b.n	800657a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006558:	4b1e      	ldr	r3, [pc, #120]	; (80065d4 <UART_SetConfig+0x56c>)
 800655a:	61fb      	str	r3, [r7, #28]
        break;
 800655c:	e00d      	b.n	800657a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800655e:	f7fe f975 	bl	800484c <HAL_RCC_GetSysClockFreq>
 8006562:	61f8      	str	r0, [r7, #28]
        break;
 8006564:	e009      	b.n	800657a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656a:	61fb      	str	r3, [r7, #28]
        break;
 800656c:	e005      	b.n	800657a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006578:	bf00      	nop
    }

    if (pclk != 0U)
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d019      	beq.n	80065b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	085a      	lsrs	r2, r3, #1
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	441a      	add	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006592:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b0f      	cmp	r3, #15
 8006598:	d909      	bls.n	80065ae <UART_SetConfig+0x546>
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a0:	d205      	bcs.n	80065ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60da      	str	r2, [r3, #12]
 80065ac:	e002      	b.n	80065b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80065c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3728      	adds	r7, #40	; 0x28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ce:	bf00      	nop
 80065d0:	40008000 	.word	0x40008000
 80065d4:	00f42400 	.word	0x00f42400

080065d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00a      	beq.n	800668a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01a      	beq.n	80066ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066d6:	d10a      	bne.n	80066ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	605a      	str	r2, [r3, #4]
  }
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af02      	add	r7, sp, #8
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800672c:	f7fb ffa0 	bl	8002670 <HAL_GetTick>
 8006730:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b08      	cmp	r3, #8
 800673e:	d10e      	bne.n	800675e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f82d 	bl	80067ae <UART_WaitOnFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e023      	b.n	80067a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b04      	cmp	r3, #4
 800676a:	d10e      	bne.n	800678a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800676c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f817 	bl	80067ae <UART_WaitOnFlagUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e00d      	b.n	80067a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b09c      	sub	sp, #112	; 0x70
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	60b9      	str	r1, [r7, #8]
 80067b8:	603b      	str	r3, [r7, #0]
 80067ba:	4613      	mov	r3, r2
 80067bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067be:	e0a5      	b.n	800690c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	f000 80a1 	beq.w	800690c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ca:	f7fb ff51 	bl	8002670 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d302      	bcc.n	80067e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80067da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d13e      	bne.n	800685e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067f4:	667b      	str	r3, [r7, #100]	; 0x64
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006800:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006804:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800680c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e6      	bne.n	80067e0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3308      	adds	r3, #8
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	f023 0301 	bic.w	r3, r3, #1
 8006828:	663b      	str	r3, [r7, #96]	; 0x60
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3308      	adds	r3, #8
 8006830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006832:	64ba      	str	r2, [r7, #72]	; 0x48
 8006834:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e5      	bne.n	8006812 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2220      	movs	r2, #32
 800684a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2220      	movs	r2, #32
 8006850:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e067      	b.n	800692e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b00      	cmp	r3, #0
 800686a:	d04f      	beq.n	800690c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800687a:	d147      	bne.n	800690c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006884:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	e853 3f00 	ldrex	r3, [r3]
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800689a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a4:	637b      	str	r3, [r7, #52]	; 0x34
 80068a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068ac:	e841 2300 	strex	r3, r2, [r1]
 80068b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e6      	bne.n	8006886 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3308      	adds	r3, #8
 80068be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	613b      	str	r3, [r7, #16]
   return(result);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f023 0301 	bic.w	r3, r3, #1
 80068ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3308      	adds	r3, #8
 80068d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068d8:	623a      	str	r2, [r7, #32]
 80068da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	69f9      	ldr	r1, [r7, #28]
 80068de:	6a3a      	ldr	r2, [r7, #32]
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e5      	bne.n	80068b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2220      	movs	r2, #32
 80068f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e010      	b.n	800692e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	69da      	ldr	r2, [r3, #28]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	4013      	ands	r3, r2
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	429a      	cmp	r2, r3
 800691a:	bf0c      	ite	eq
 800691c:	2301      	moveq	r3, #1
 800691e:	2300      	movne	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	461a      	mov	r2, r3
 8006924:	79fb      	ldrb	r3, [r7, #7]
 8006926:	429a      	cmp	r2, r3
 8006928:	f43f af4a 	beq.w	80067c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3770      	adds	r7, #112	; 0x70
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006936:	b480      	push	{r7}
 8006938:	b085      	sub	sp, #20
 800693a:	af00      	add	r7, sp, #0
 800693c:	4603      	mov	r3, r0
 800693e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006948:	2b84      	cmp	r3, #132	; 0x84
 800694a:	d005      	beq.n	8006958 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800694c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	3303      	adds	r3, #3
 8006956:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006958:	68fb      	ldr	r3, [r7, #12]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800696c:	f3ef 8305 	mrs	r3, IPSR
 8006970:	607b      	str	r3, [r7, #4]
  return(result);
 8006972:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006974:	2b00      	cmp	r3, #0
 8006976:	bf14      	ite	ne
 8006978:	2301      	movne	r3, #1
 800697a:	2300      	moveq	r3, #0
 800697c:	b2db      	uxtb	r3, r3
}
 800697e:	4618      	mov	r0, r3
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800698e:	f001 f815 	bl	80079bc <vTaskStartScheduler>
  
  return osOK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	bd80      	pop	{r7, pc}

08006998 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800699a:	b089      	sub	sp, #36	; 0x24
 800699c:	af04      	add	r7, sp, #16
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d020      	beq.n	80069ec <osThreadCreate+0x54>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d01c      	beq.n	80069ec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685c      	ldr	r4, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681d      	ldr	r5, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691e      	ldr	r6, [r3, #16]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff ffb6 	bl	8006936 <makeFreeRtosPriority>
 80069ca:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069d4:	9202      	str	r2, [sp, #8]
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	9100      	str	r1, [sp, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	4632      	mov	r2, r6
 80069de:	4629      	mov	r1, r5
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 fcfc 	bl	80073de <xTaskCreateStatic>
 80069e6:	4603      	mov	r3, r0
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	e01c      	b.n	8006a26 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685c      	ldr	r4, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069f8:	b29e      	uxth	r6, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff ff98 	bl	8006936 <makeFreeRtosPriority>
 8006a06:	4602      	mov	r2, r0
 8006a08:	f107 030c 	add.w	r3, r7, #12
 8006a0c:	9301      	str	r3, [sp, #4]
 8006a0e:	9200      	str	r2, [sp, #0]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	4632      	mov	r2, r6
 8006a14:	4629      	mov	r1, r5
 8006a16:	4620      	mov	r0, r4
 8006a18:	f000 fd3e 	bl	8007498 <xTaskCreate>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d001      	beq.n	8006a26 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e000      	b.n	8006a28 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006a26:	68fb      	ldr	r3, [r7, #12]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a30 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <osDelay+0x16>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	e000      	b.n	8006a48 <osDelay+0x18>
 8006a46:	2301      	movs	r3, #1
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fef1 	bl	8007830 <vTaskDelay>
  
  return osOK;
 8006a4e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006a58:	b590      	push	{r4, r7, lr}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d011      	beq.n	8006a8e <osMessageCreate+0x36>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00d      	beq.n	8006a8e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6818      	ldr	r0, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6859      	ldr	r1, [r3, #4]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	2400      	movs	r4, #0
 8006a84:	9400      	str	r4, [sp, #0]
 8006a86:	f000 f96b 	bl	8006d60 <xQueueGenericCreateStatic>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	e008      	b.n	8006aa0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6818      	ldr	r0, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	4619      	mov	r1, r3
 8006a9a:	f000 f9d9 	bl	8006e50 <xQueueGenericCreate>
 8006a9e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd90      	pop	{r4, r7, pc}

08006aa8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <osMessagePut+0x1e>
    ticks = 1;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006ac6:	f7ff ff4e 	bl	8006966 <inHandlerMode>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d018      	beq.n	8006b02 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006ad0:	f107 0210 	add.w	r2, r7, #16
 8006ad4:	f107 0108 	add.w	r1, r7, #8
 8006ad8:	2300      	movs	r3, #0
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 fb10 	bl	8007100 <xQueueGenericSendFromISR>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d001      	beq.n	8006aea <osMessagePut+0x42>
      return osErrorOS;
 8006ae6:	23ff      	movs	r3, #255	; 0xff
 8006ae8:	e018      	b.n	8006b1c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d014      	beq.n	8006b1a <osMessagePut+0x72>
 8006af0:	4b0c      	ldr	r3, [pc, #48]	; (8006b24 <osMessagePut+0x7c>)
 8006af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	e00b      	b.n	8006b1a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006b02:	f107 0108 	add.w	r1, r7, #8
 8006b06:	2300      	movs	r3, #0
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 f9fa 	bl	8006f04 <xQueueGenericSend>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d001      	beq.n	8006b1a <osMessagePut+0x72>
      return osErrorOS;
 8006b16:	23ff      	movs	r3, #255	; 0xff
 8006b18:	e000      	b.n	8006b1c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	e000ed04 	.word	0xe000ed04

08006b28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f103 0208 	add.w	r2, r3, #8
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f103 0208 	add.w	r2, r3, #8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f103 0208 	add.w	r2, r3, #8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	601a      	str	r2, [r3, #0]
}
 8006bbe:	bf00      	nop
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be0:	d103      	bne.n	8006bea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	e00c      	b.n	8006c04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3308      	adds	r3, #8
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	e002      	b.n	8006bf8 <vListInsert+0x2e>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d2f6      	bcs.n	8006bf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	601a      	str	r2, [r3, #0]
}
 8006c30:	bf00      	nop
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6892      	ldr	r2, [r2, #8]
 8006c52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6852      	ldr	r2, [r2, #4]
 8006c5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d103      	bne.n	8006c70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	1e5a      	subs	r2, r3, #1
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006cba:	f001 fcdb 	bl	8008674 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc6:	68f9      	ldr	r1, [r7, #12]
 8006cc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006cca:	fb01 f303 	mul.w	r3, r1, r3
 8006cce:	441a      	add	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cea:	3b01      	subs	r3, #1
 8006cec:	68f9      	ldr	r1, [r7, #12]
 8006cee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006cf0:	fb01 f303 	mul.w	r3, r1, r3
 8006cf4:	441a      	add	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	22ff      	movs	r2, #255	; 0xff
 8006cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	22ff      	movs	r2, #255	; 0xff
 8006d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d114      	bne.n	8006d3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01a      	beq.n	8006d4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3310      	adds	r3, #16
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f001 f8af 	bl	8007e80 <xTaskRemoveFromEventList>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d012      	beq.n	8006d4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d28:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <xQueueGenericReset+0xcc>)
 8006d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	e009      	b.n	8006d4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3310      	adds	r3, #16
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff fef2 	bl	8006b28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3324      	adds	r3, #36	; 0x24
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff feed 	bl	8006b28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d4e:	f001 fcc1 	bl	80086d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d52:	2301      	movs	r3, #1
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08e      	sub	sp, #56	; 0x38
 8006d64:	af02      	add	r7, sp, #8
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <xQueueGenericCreateStatic+0x52>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <xQueueGenericCreateStatic+0x56>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <xQueueGenericCreateStatic+0x58>
 8006db6:	2300      	movs	r3, #0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	623b      	str	r3, [r7, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d102      	bne.n	8006dde <xQueueGenericCreateStatic+0x7e>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <xQueueGenericCreateStatic+0x82>
 8006dde:	2301      	movs	r3, #1
 8006de0:	e000      	b.n	8006de4 <xQueueGenericCreateStatic+0x84>
 8006de2:	2300      	movs	r3, #0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	61fb      	str	r3, [r7, #28]
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dfe:	2348      	movs	r3, #72	; 0x48
 8006e00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b48      	cmp	r3, #72	; 0x48
 8006e06:	d00a      	beq.n	8006e1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	61bb      	str	r3, [r7, #24]
}
 8006e1a:	bf00      	nop
 8006e1c:	e7fe      	b.n	8006e1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00d      	beq.n	8006e46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	68b9      	ldr	r1, [r7, #8]
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f83f 	bl	8006ec4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3730      	adds	r7, #48	; 0x30
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08a      	sub	sp, #40	; 0x28
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	613b      	str	r3, [r7, #16]
}
 8006e76:	bf00      	nop
 8006e78:	e7fe      	b.n	8006e78 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	fb02 f303 	mul.w	r3, r2, r3
 8006e82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	3348      	adds	r3, #72	; 0x48
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f001 fd15 	bl	80088b8 <pvPortMalloc>
 8006e8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d011      	beq.n	8006eba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	3348      	adds	r3, #72	; 0x48
 8006e9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ea8:	79fa      	ldrb	r2, [r7, #7]
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f805 	bl	8006ec4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006eba:	69bb      	ldr	r3, [r7, #24]
	}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3720      	adds	r7, #32
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d103      	bne.n	8006ee0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	e002      	b.n	8006ee6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	69b8      	ldr	r0, [r7, #24]
 8006ef6:	f7ff fecb 	bl	8006c90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006efa:	bf00      	nop
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08e      	sub	sp, #56	; 0x38
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f12:	2300      	movs	r3, #0
 8006f14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <xQueueGenericSend+0x32>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d103      	bne.n	8006f44 <xQueueGenericSend+0x40>
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <xQueueGenericSend+0x44>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e000      	b.n	8006f4a <xQueueGenericSend+0x46>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10a      	bne.n	8006f64 <xQueueGenericSend+0x60>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f60:	bf00      	nop
 8006f62:	e7fe      	b.n	8006f62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d103      	bne.n	8006f72 <xQueueGenericSend+0x6e>
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d101      	bne.n	8006f76 <xQueueGenericSend+0x72>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <xQueueGenericSend+0x74>
 8006f76:	2300      	movs	r3, #0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <xQueueGenericSend+0x8e>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	623b      	str	r3, [r7, #32]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f92:	f001 f935 	bl	8008200 <xTaskGetSchedulerState>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <xQueueGenericSend+0x9e>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <xQueueGenericSend+0xa2>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <xQueueGenericSend+0xa4>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <xQueueGenericSend+0xbe>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	61fb      	str	r3, [r7, #28]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fc2:	f001 fb57 	bl	8008674 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d302      	bcc.n	8006fd8 <xQueueGenericSend+0xd4>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d129      	bne.n	800702c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	68b9      	ldr	r1, [r7, #8]
 8006fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fde:	f000 f92a 	bl	8007236 <prvCopyDataToQueue>
 8006fe2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d010      	beq.n	800700e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	3324      	adds	r3, #36	; 0x24
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 ff45 	bl	8007e80 <xTaskRemoveFromEventList>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d013      	beq.n	8007024 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ffc:	4b3f      	ldr	r3, [pc, #252]	; (80070fc <xQueueGenericSend+0x1f8>)
 8006ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	e00a      	b.n	8007024 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007010:	2b00      	cmp	r3, #0
 8007012:	d007      	beq.n	8007024 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007014:	4b39      	ldr	r3, [pc, #228]	; (80070fc <xQueueGenericSend+0x1f8>)
 8007016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007024:	f001 fb56 	bl	80086d4 <vPortExitCritical>
				return pdPASS;
 8007028:	2301      	movs	r3, #1
 800702a:	e063      	b.n	80070f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d103      	bne.n	800703a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007032:	f001 fb4f 	bl	80086d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007036:	2300      	movs	r3, #0
 8007038:	e05c      	b.n	80070f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800703a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703c:	2b00      	cmp	r3, #0
 800703e:	d106      	bne.n	800704e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007040:	f107 0314 	add.w	r3, r7, #20
 8007044:	4618      	mov	r0, r3
 8007046:	f000 ff7d 	bl	8007f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800704a:	2301      	movs	r3, #1
 800704c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800704e:	f001 fb41 	bl	80086d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007052:	f000 fd1d 	bl	8007a90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007056:	f001 fb0d 	bl	8008674 <vPortEnterCritical>
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007060:	b25b      	sxtb	r3, r3
 8007062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007066:	d103      	bne.n	8007070 <xQueueGenericSend+0x16c>
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007076:	b25b      	sxtb	r3, r3
 8007078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707c:	d103      	bne.n	8007086 <xQueueGenericSend+0x182>
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007086:	f001 fb25 	bl	80086d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800708a:	1d3a      	adds	r2, r7, #4
 800708c:	f107 0314 	add.w	r3, r7, #20
 8007090:	4611      	mov	r1, r2
 8007092:	4618      	mov	r0, r3
 8007094:	f000 ff6c 	bl	8007f70 <xTaskCheckForTimeOut>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d124      	bne.n	80070e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800709e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070a0:	f000 f985 	bl	80073ae <prvIsQueueFull>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d018      	beq.n	80070dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	3310      	adds	r3, #16
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	4611      	mov	r1, r2
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fec0 	bl	8007e38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80070b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070ba:	f000 f926 	bl	800730a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80070be:	f000 fcf5 	bl	8007aac <xTaskResumeAll>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f47f af7c 	bne.w	8006fc2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80070ca:	4b0c      	ldr	r3, [pc, #48]	; (80070fc <xQueueGenericSend+0x1f8>)
 80070cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	e772      	b.n	8006fc2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80070dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070de:	f000 f914 	bl	800730a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070e2:	f000 fce3 	bl	8007aac <xTaskResumeAll>
 80070e6:	e76c      	b.n	8006fc2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80070e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070ea:	f000 f90e 	bl	800730a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070ee:	f000 fcdd 	bl	8007aac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80070f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3738      	adds	r7, #56	; 0x38
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	e000ed04 	.word	0xe000ed04

08007100 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b090      	sub	sp, #64	; 0x40
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
 800710c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d103      	bne.n	800713c <xQueueGenericSendFromISR+0x3c>
 8007134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <xQueueGenericSendFromISR+0x40>
 800713c:	2301      	movs	r3, #1
 800713e:	e000      	b.n	8007142 <xQueueGenericSendFromISR+0x42>
 8007140:	2300      	movs	r3, #0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007158:	bf00      	nop
 800715a:	e7fe      	b.n	800715a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b02      	cmp	r3, #2
 8007160:	d103      	bne.n	800716a <xQueueGenericSendFromISR+0x6a>
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007166:	2b01      	cmp	r3, #1
 8007168:	d101      	bne.n	800716e <xQueueGenericSendFromISR+0x6e>
 800716a:	2301      	movs	r3, #1
 800716c:	e000      	b.n	8007170 <xQueueGenericSendFromISR+0x70>
 800716e:	2300      	movs	r3, #0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	623b      	str	r3, [r7, #32]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800718a:	f001 fb55 	bl	8008838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800718e:	f3ef 8211 	mrs	r2, BASEPRI
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	61fa      	str	r2, [r7, #28]
 80071a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80071a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d302      	bcc.n	80071bc <xQueueGenericSendFromISR+0xbc>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d12f      	bne.n	800721c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	68b9      	ldr	r1, [r7, #8]
 80071d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071d2:	f000 f830 	bl	8007236 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80071d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80071da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071de:	d112      	bne.n	8007206 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d016      	beq.n	8007216 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ea:	3324      	adds	r3, #36	; 0x24
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fe47 	bl	8007e80 <xTaskRemoveFromEventList>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00e      	beq.n	8007216 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00b      	beq.n	8007216 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	e007      	b.n	8007216 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007206:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800720a:	3301      	adds	r3, #1
 800720c:	b2db      	uxtb	r3, r3
 800720e:	b25a      	sxtb	r2, r3
 8007210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007216:	2301      	movs	r3, #1
 8007218:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800721a:	e001      	b.n	8007220 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800721c:	2300      	movs	r3, #0
 800721e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007222:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800722a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800722c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800722e:	4618      	mov	r0, r3
 8007230:	3740      	adds	r7, #64	; 0x40
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b086      	sub	sp, #24
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10d      	bne.n	8007270 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d14d      	bne.n	80072f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	4618      	mov	r0, r3
 8007262:	f000 ffeb 	bl	800823c <xTaskPriorityDisinherit>
 8007266:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	609a      	str	r2, [r3, #8]
 800726e:	e043      	b.n	80072f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d119      	bne.n	80072aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6858      	ldr	r0, [r3, #4]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	461a      	mov	r2, r3
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	f003 f8e8 	bl	800a456 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	441a      	add	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	429a      	cmp	r2, r3
 800729e:	d32b      	bcc.n	80072f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	605a      	str	r2, [r3, #4]
 80072a8:	e026      	b.n	80072f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	68d8      	ldr	r0, [r3, #12]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	461a      	mov	r2, r3
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	f003 f8ce 	bl	800a456 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	425b      	negs	r3, r3
 80072c4:	441a      	add	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d207      	bcs.n	80072e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	425b      	negs	r3, r3
 80072e0:	441a      	add	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d105      	bne.n	80072f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007300:	697b      	ldr	r3, [r7, #20]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007312:	f001 f9af 	bl	8008674 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800731c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800731e:	e011      	b.n	8007344 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	2b00      	cmp	r3, #0
 8007326:	d012      	beq.n	800734e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3324      	adds	r3, #36	; 0x24
 800732c:	4618      	mov	r0, r3
 800732e:	f000 fda7 	bl	8007e80 <xTaskRemoveFromEventList>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007338:	f000 fe7c 	bl	8008034 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	3b01      	subs	r3, #1
 8007340:	b2db      	uxtb	r3, r3
 8007342:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007348:	2b00      	cmp	r3, #0
 800734a:	dce9      	bgt.n	8007320 <prvUnlockQueue+0x16>
 800734c:	e000      	b.n	8007350 <prvUnlockQueue+0x46>
					break;
 800734e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	22ff      	movs	r2, #255	; 0xff
 8007354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007358:	f001 f9bc 	bl	80086d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800735c:	f001 f98a 	bl	8008674 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007366:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007368:	e011      	b.n	800738e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d012      	beq.n	8007398 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	3310      	adds	r3, #16
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fd82 	bl	8007e80 <xTaskRemoveFromEventList>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007382:	f000 fe57 	bl	8008034 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007386:	7bbb      	ldrb	r3, [r7, #14]
 8007388:	3b01      	subs	r3, #1
 800738a:	b2db      	uxtb	r3, r3
 800738c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800738e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007392:	2b00      	cmp	r3, #0
 8007394:	dce9      	bgt.n	800736a <prvUnlockQueue+0x60>
 8007396:	e000      	b.n	800739a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007398:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	22ff      	movs	r2, #255	; 0xff
 800739e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073a2:	f001 f997 	bl	80086d4 <vPortExitCritical>
}
 80073a6:	bf00      	nop
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073b6:	f001 f95d 	bl	8008674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d102      	bne.n	80073cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073c6:	2301      	movs	r3, #1
 80073c8:	60fb      	str	r3, [r7, #12]
 80073ca:	e001      	b.n	80073d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073d0:	f001 f980 	bl	80086d4 <vPortExitCritical>

	return xReturn;
 80073d4:	68fb      	ldr	r3, [r7, #12]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b08e      	sub	sp, #56	; 0x38
 80073e2:	af04      	add	r7, sp, #16
 80073e4:	60f8      	str	r0, [r7, #12]
 80073e6:	60b9      	str	r1, [r7, #8]
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10a      	bne.n	8007408 <xTaskCreateStatic+0x2a>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	623b      	str	r3, [r7, #32]
}
 8007404:	bf00      	nop
 8007406:	e7fe      	b.n	8007406 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10a      	bne.n	8007424 <xTaskCreateStatic+0x46>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	61fb      	str	r3, [r7, #28]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007424:	23b4      	movs	r3, #180	; 0xb4
 8007426:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2bb4      	cmp	r3, #180	; 0xb4
 800742c:	d00a      	beq.n	8007444 <xTaskCreateStatic+0x66>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	61bb      	str	r3, [r7, #24]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007444:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01e      	beq.n	800748a <xTaskCreateStatic+0xac>
 800744c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01b      	beq.n	800748a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800745a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	2202      	movs	r2, #2
 8007460:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007464:	2300      	movs	r3, #0
 8007466:	9303      	str	r3, [sp, #12]
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	9302      	str	r3, [sp, #8]
 800746c:	f107 0314 	add.w	r3, r7, #20
 8007470:	9301      	str	r3, [sp, #4]
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	68b9      	ldr	r1, [r7, #8]
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 f851 	bl	8007524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007484:	f000 f8ec 	bl	8007660 <prvAddNewTaskToReadyList>
 8007488:	e001      	b.n	800748e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800748e:	697b      	ldr	r3, [r7, #20]
	}
 8007490:	4618      	mov	r0, r3
 8007492:	3728      	adds	r7, #40	; 0x28
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08c      	sub	sp, #48	; 0x30
 800749c:	af04      	add	r7, sp, #16
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 fa03 	bl	80088b8 <pvPortMalloc>
 80074b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00e      	beq.n	80074d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074ba:	20b4      	movs	r0, #180	; 0xb4
 80074bc:	f001 f9fc 	bl	80088b8 <pvPortMalloc>
 80074c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	631a      	str	r2, [r3, #48]	; 0x30
 80074ce:	e005      	b.n	80074dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074d0:	6978      	ldr	r0, [r7, #20]
 80074d2:	f001 fabd 	bl	8008a50 <vPortFree>
 80074d6:	e001      	b.n	80074dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d017      	beq.n	8007512 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074ea:	88fa      	ldrh	r2, [r7, #6]
 80074ec:	2300      	movs	r3, #0
 80074ee:	9303      	str	r3, [sp, #12]
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	9302      	str	r3, [sp, #8]
 80074f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f6:	9301      	str	r3, [sp, #4]
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 f80f 	bl	8007524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007506:	69f8      	ldr	r0, [r7, #28]
 8007508:	f000 f8aa 	bl	8007660 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800750c:	2301      	movs	r3, #1
 800750e:	61bb      	str	r3, [r7, #24]
 8007510:	e002      	b.n	8007518 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007512:	f04f 33ff 	mov.w	r3, #4294967295
 8007516:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007518:	69bb      	ldr	r3, [r7, #24]
	}
 800751a:	4618      	mov	r0, r3
 800751c:	3720      	adds	r7, #32
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
	...

08007524 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800753c:	3b01      	subs	r3, #1
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	f023 0307 	bic.w	r3, r3, #7
 800754a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	617b      	str	r3, [r7, #20]
}
 8007568:	bf00      	nop
 800756a:	e7fe      	b.n	800756a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d01f      	beq.n	80075b2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007572:	2300      	movs	r3, #0
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	e012      	b.n	800759e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	4413      	add	r3, r2
 800757e:	7819      	ldrb	r1, [r3, #0]
 8007580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	4413      	add	r3, r2
 8007586:	3334      	adds	r3, #52	; 0x34
 8007588:	460a      	mov	r2, r1
 800758a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	4413      	add	r3, r2
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d006      	beq.n	80075a6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	3301      	adds	r3, #1
 800759c:	61fb      	str	r3, [r7, #28]
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	2b0f      	cmp	r3, #15
 80075a2:	d9e9      	bls.n	8007578 <prvInitialiseNewTask+0x54>
 80075a4:	e000      	b.n	80075a8 <prvInitialiseNewTask+0x84>
			{
				break;
 80075a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075b0:	e003      	b.n	80075ba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075bc:	2b06      	cmp	r3, #6
 80075be:	d901      	bls.n	80075c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075c0:	2306      	movs	r3, #6
 80075c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	2200      	movs	r2, #0
 80075d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	3304      	adds	r3, #4
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff fac4 	bl	8006b68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	3318      	adds	r3, #24
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff fabf 	bl	8006b68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	f1c3 0207 	rsb	r2, r3, #7
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	2200      	movs	r2, #0
 800760c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	334c      	adds	r3, #76	; 0x4c
 8007614:	2260      	movs	r2, #96	; 0x60
 8007616:	2100      	movs	r1, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f002 ff2a 	bl	800a472 <memset>
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	4a0c      	ldr	r2, [pc, #48]	; (8007654 <prvInitialiseNewTask+0x130>)
 8007622:	651a      	str	r2, [r3, #80]	; 0x50
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	4a0c      	ldr	r2, [pc, #48]	; (8007658 <prvInitialiseNewTask+0x134>)
 8007628:	655a      	str	r2, [r3, #84]	; 0x54
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	4a0b      	ldr	r2, [pc, #44]	; (800765c <prvInitialiseNewTask+0x138>)
 800762e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	68f9      	ldr	r1, [r7, #12]
 8007634:	69b8      	ldr	r0, [r7, #24]
 8007636:	f000 feed 	bl	8008414 <pxPortInitialiseStack>
 800763a:	4602      	mov	r2, r0
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800764a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800764c:	bf00      	nop
 800764e:	3720      	adds	r7, #32
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	08021e00 	.word	0x08021e00
 8007658:	08021e20 	.word	0x08021e20
 800765c:	08021de0 	.word	0x08021de0

08007660 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007668:	f001 f804 	bl	8008674 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800766c:	4b2a      	ldr	r3, [pc, #168]	; (8007718 <prvAddNewTaskToReadyList+0xb8>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3301      	adds	r3, #1
 8007672:	4a29      	ldr	r2, [pc, #164]	; (8007718 <prvAddNewTaskToReadyList+0xb8>)
 8007674:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007676:	4b29      	ldr	r3, [pc, #164]	; (800771c <prvAddNewTaskToReadyList+0xbc>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d109      	bne.n	8007692 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800767e:	4a27      	ldr	r2, [pc, #156]	; (800771c <prvAddNewTaskToReadyList+0xbc>)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007684:	4b24      	ldr	r3, [pc, #144]	; (8007718 <prvAddNewTaskToReadyList+0xb8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d110      	bne.n	80076ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800768c:	f000 fcf6 	bl	800807c <prvInitialiseTaskLists>
 8007690:	e00d      	b.n	80076ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007692:	4b23      	ldr	r3, [pc, #140]	; (8007720 <prvAddNewTaskToReadyList+0xc0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d109      	bne.n	80076ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800769a:	4b20      	ldr	r3, [pc, #128]	; (800771c <prvAddNewTaskToReadyList+0xbc>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d802      	bhi.n	80076ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076a8:	4a1c      	ldr	r2, [pc, #112]	; (800771c <prvAddNewTaskToReadyList+0xbc>)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076ae:	4b1d      	ldr	r3, [pc, #116]	; (8007724 <prvAddNewTaskToReadyList+0xc4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3301      	adds	r3, #1
 80076b4:	4a1b      	ldr	r2, [pc, #108]	; (8007724 <prvAddNewTaskToReadyList+0xc4>)
 80076b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	2201      	movs	r2, #1
 80076be:	409a      	lsls	r2, r3
 80076c0:	4b19      	ldr	r3, [pc, #100]	; (8007728 <prvAddNewTaskToReadyList+0xc8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	4a18      	ldr	r2, [pc, #96]	; (8007728 <prvAddNewTaskToReadyList+0xc8>)
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4a15      	ldr	r2, [pc, #84]	; (800772c <prvAddNewTaskToReadyList+0xcc>)
 80076d8:	441a      	add	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	3304      	adds	r3, #4
 80076de:	4619      	mov	r1, r3
 80076e0:	4610      	mov	r0, r2
 80076e2:	f7ff fa4e 	bl	8006b82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076e6:	f000 fff5 	bl	80086d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076ea:	4b0d      	ldr	r3, [pc, #52]	; (8007720 <prvAddNewTaskToReadyList+0xc0>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00e      	beq.n	8007710 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076f2:	4b0a      	ldr	r3, [pc, #40]	; (800771c <prvAddNewTaskToReadyList+0xbc>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d207      	bcs.n	8007710 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007700:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <prvAddNewTaskToReadyList+0xd0>)
 8007702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	2000f9fc 	.word	0x2000f9fc
 800771c:	2000f8fc 	.word	0x2000f8fc
 8007720:	2000fa08 	.word	0x2000fa08
 8007724:	2000fa18 	.word	0x2000fa18
 8007728:	2000fa04 	.word	0x2000fa04
 800772c:	2000f900 	.word	0x2000f900
 8007730:	e000ed04 	.word	0xe000ed04

08007734 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08a      	sub	sp, #40	; 0x28
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800773e:	2300      	movs	r3, #0
 8007740:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10a      	bne.n	800775e <vTaskDelayUntil+0x2a>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	617b      	str	r3, [r7, #20]
}
 800775a:	bf00      	nop
 800775c:	e7fe      	b.n	800775c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <vTaskDelayUntil+0x46>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	613b      	str	r3, [r7, #16]
}
 8007776:	bf00      	nop
 8007778:	e7fe      	b.n	8007778 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800777a:	4b2a      	ldr	r3, [pc, #168]	; (8007824 <vTaskDelayUntil+0xf0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00a      	beq.n	8007798 <vTaskDelayUntil+0x64>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	60fb      	str	r3, [r7, #12]
}
 8007794:	bf00      	nop
 8007796:	e7fe      	b.n	8007796 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007798:	f000 f97a 	bl	8007a90 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800779c:	4b22      	ldr	r3, [pc, #136]	; (8007828 <vTaskDelayUntil+0xf4>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	4413      	add	r3, r2
 80077aa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6a3a      	ldr	r2, [r7, #32]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d20b      	bcs.n	80077ce <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69fa      	ldr	r2, [r7, #28]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d211      	bcs.n	80077e4 <vTaskDelayUntil+0xb0>
 80077c0:	69fa      	ldr	r2, [r7, #28]
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d90d      	bls.n	80077e4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80077c8:	2301      	movs	r3, #1
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24
 80077cc:	e00a      	b.n	80077e4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d303      	bcc.n	80077e0 <vTaskDelayUntil+0xac>
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d901      	bls.n	80077e4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80077e0:	2301      	movs	r3, #1
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d006      	beq.n	80077fe <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80077f0:	69fa      	ldr	r2, [r7, #28]
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2100      	movs	r1, #0
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fda5 	bl	8008348 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80077fe:	f000 f955 	bl	8007aac <xTaskResumeAll>
 8007802:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d107      	bne.n	800781a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800780a:	4b08      	ldr	r3, [pc, #32]	; (800782c <vTaskDelayUntil+0xf8>)
 800780c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800781a:	bf00      	nop
 800781c:	3728      	adds	r7, #40	; 0x28
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	2000fa24 	.word	0x2000fa24
 8007828:	2000fa00 	.word	0x2000fa00
 800782c:	e000ed04 	.word	0xe000ed04

08007830 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007838:	2300      	movs	r3, #0
 800783a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d017      	beq.n	8007872 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007842:	4b13      	ldr	r3, [pc, #76]	; (8007890 <vTaskDelay+0x60>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <vTaskDelay+0x30>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	60bb      	str	r3, [r7, #8]
}
 800785c:	bf00      	nop
 800785e:	e7fe      	b.n	800785e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007860:	f000 f916 	bl	8007a90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007864:	2100      	movs	r1, #0
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fd6e 	bl	8008348 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800786c:	f000 f91e 	bl	8007aac <xTaskResumeAll>
 8007870:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d107      	bne.n	8007888 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007878:	4b06      	ldr	r3, [pc, #24]	; (8007894 <vTaskDelay+0x64>)
 800787a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	2000fa24 	.word	0x2000fa24
 8007894:	e000ed04 	.word	0xe000ed04

08007898 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80078a0:	f000 fee8 	bl	8008674 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d102      	bne.n	80078b0 <vTaskSuspend+0x18>
 80078aa:	4b3c      	ldr	r3, [pc, #240]	; (800799c <vTaskSuspend+0x104>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	e000      	b.n	80078b2 <vTaskSuspend+0x1a>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3304      	adds	r3, #4
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff f9bf 	bl	8006c3c <uxListRemove>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d115      	bne.n	80078f0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c8:	4935      	ldr	r1, [pc, #212]	; (80079a0 <vTaskSuspend+0x108>)
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10a      	bne.n	80078f0 <vTaskSuspend+0x58>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078de:	2201      	movs	r2, #1
 80078e0:	fa02 f303 	lsl.w	r3, r2, r3
 80078e4:	43da      	mvns	r2, r3
 80078e6:	4b2f      	ldr	r3, [pc, #188]	; (80079a4 <vTaskSuspend+0x10c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4013      	ands	r3, r2
 80078ec:	4a2d      	ldr	r2, [pc, #180]	; (80079a4 <vTaskSuspend+0x10c>)
 80078ee:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d004      	beq.n	8007902 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	3318      	adds	r3, #24
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7ff f99d 	bl	8006c3c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3304      	adds	r3, #4
 8007906:	4619      	mov	r1, r3
 8007908:	4827      	ldr	r0, [pc, #156]	; (80079a8 <vTaskSuspend+0x110>)
 800790a:	f7ff f93a 	bl	8006b82 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b01      	cmp	r3, #1
 8007918:	d103      	bne.n	8007922 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007922:	f000 fed7 	bl	80086d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007926:	4b21      	ldr	r3, [pc, #132]	; (80079ac <vTaskSuspend+0x114>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d005      	beq.n	800793a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800792e:	f000 fea1 	bl	8008674 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007932:	f000 fc45 	bl	80081c0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007936:	f000 fecd 	bl	80086d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800793a:	4b18      	ldr	r3, [pc, #96]	; (800799c <vTaskSuspend+0x104>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	429a      	cmp	r2, r3
 8007942:	d127      	bne.n	8007994 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007944:	4b19      	ldr	r3, [pc, #100]	; (80079ac <vTaskSuspend+0x114>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d017      	beq.n	800797c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800794c:	4b18      	ldr	r3, [pc, #96]	; (80079b0 <vTaskSuspend+0x118>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00a      	beq.n	800796a <vTaskSuspend+0xd2>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	60bb      	str	r3, [r7, #8]
}
 8007966:	bf00      	nop
 8007968:	e7fe      	b.n	8007968 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800796a:	4b12      	ldr	r3, [pc, #72]	; (80079b4 <vTaskSuspend+0x11c>)
 800796c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800797a:	e00b      	b.n	8007994 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <vTaskSuspend+0x110>)
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	4b0d      	ldr	r3, [pc, #52]	; (80079b8 <vTaskSuspend+0x120>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	429a      	cmp	r2, r3
 8007986:	d103      	bne.n	8007990 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8007988:	4b04      	ldr	r3, [pc, #16]	; (800799c <vTaskSuspend+0x104>)
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
	}
 800798e:	e001      	b.n	8007994 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8007990:	f000 f9f0 	bl	8007d74 <vTaskSwitchContext>
	}
 8007994:	bf00      	nop
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	2000f8fc 	.word	0x2000f8fc
 80079a0:	2000f900 	.word	0x2000f900
 80079a4:	2000fa04 	.word	0x2000fa04
 80079a8:	2000f9e8 	.word	0x2000f9e8
 80079ac:	2000fa08 	.word	0x2000fa08
 80079b0:	2000fa24 	.word	0x2000fa24
 80079b4:	e000ed04 	.word	0xe000ed04
 80079b8:	2000f9fc 	.word	0x2000f9fc

080079bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08a      	sub	sp, #40	; 0x28
 80079c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079c6:	2300      	movs	r3, #0
 80079c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079ca:	463a      	mov	r2, r7
 80079cc:	1d39      	adds	r1, r7, #4
 80079ce:	f107 0308 	add.w	r3, r7, #8
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7f9 fa8a 	bl	8000eec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	9202      	str	r2, [sp, #8]
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	2300      	movs	r3, #0
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	2300      	movs	r3, #0
 80079e8:	460a      	mov	r2, r1
 80079ea:	4921      	ldr	r1, [pc, #132]	; (8007a70 <vTaskStartScheduler+0xb4>)
 80079ec:	4821      	ldr	r0, [pc, #132]	; (8007a74 <vTaskStartScheduler+0xb8>)
 80079ee:	f7ff fcf6 	bl	80073de <xTaskCreateStatic>
 80079f2:	4603      	mov	r3, r0
 80079f4:	4a20      	ldr	r2, [pc, #128]	; (8007a78 <vTaskStartScheduler+0xbc>)
 80079f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079f8:	4b1f      	ldr	r3, [pc, #124]	; (8007a78 <vTaskStartScheduler+0xbc>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a00:	2301      	movs	r3, #1
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	e001      	b.n	8007a0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a06:	2300      	movs	r3, #0
 8007a08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d11b      	bne.n	8007a48 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	613b      	str	r3, [r7, #16]
}
 8007a22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a24:	4b15      	ldr	r3, [pc, #84]	; (8007a7c <vTaskStartScheduler+0xc0>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	334c      	adds	r3, #76	; 0x4c
 8007a2a:	4a15      	ldr	r2, [pc, #84]	; (8007a80 <vTaskStartScheduler+0xc4>)
 8007a2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a2e:	4b15      	ldr	r3, [pc, #84]	; (8007a84 <vTaskStartScheduler+0xc8>)
 8007a30:	f04f 32ff 	mov.w	r2, #4294967295
 8007a34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a36:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <vTaskStartScheduler+0xcc>)
 8007a38:	2201      	movs	r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a3c:	4b13      	ldr	r3, [pc, #76]	; (8007a8c <vTaskStartScheduler+0xd0>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a42:	f000 fd75 	bl	8008530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a46:	e00e      	b.n	8007a66 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4e:	d10a      	bne.n	8007a66 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	60fb      	str	r3, [r7, #12]
}
 8007a62:	bf00      	nop
 8007a64:	e7fe      	b.n	8007a64 <vTaskStartScheduler+0xa8>
}
 8007a66:	bf00      	nop
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	0800e5a4 	.word	0x0800e5a4
 8007a74:	0800804d 	.word	0x0800804d
 8007a78:	2000fa20 	.word	0x2000fa20
 8007a7c:	2000f8fc 	.word	0x2000f8fc
 8007a80:	20000014 	.word	0x20000014
 8007a84:	2000fa1c 	.word	0x2000fa1c
 8007a88:	2000fa08 	.word	0x2000fa08
 8007a8c:	2000fa00 	.word	0x2000fa00

08007a90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a94:	4b04      	ldr	r3, [pc, #16]	; (8007aa8 <vTaskSuspendAll+0x18>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	4a03      	ldr	r2, [pc, #12]	; (8007aa8 <vTaskSuspendAll+0x18>)
 8007a9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a9e:	bf00      	nop
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	2000fa24 	.word	0x2000fa24

08007aac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007aba:	4b41      	ldr	r3, [pc, #260]	; (8007bc0 <xTaskResumeAll+0x114>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	603b      	str	r3, [r7, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	e7fe      	b.n	8007ad6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ad8:	f000 fdcc 	bl	8008674 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007adc:	4b38      	ldr	r3, [pc, #224]	; (8007bc0 <xTaskResumeAll+0x114>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	4a37      	ldr	r2, [pc, #220]	; (8007bc0 <xTaskResumeAll+0x114>)
 8007ae4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ae6:	4b36      	ldr	r3, [pc, #216]	; (8007bc0 <xTaskResumeAll+0x114>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d161      	bne.n	8007bb2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007aee:	4b35      	ldr	r3, [pc, #212]	; (8007bc4 <xTaskResumeAll+0x118>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d05d      	beq.n	8007bb2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007af6:	e02e      	b.n	8007b56 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af8:	4b33      	ldr	r3, [pc, #204]	; (8007bc8 <xTaskResumeAll+0x11c>)
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3318      	adds	r3, #24
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7ff f899 	bl	8006c3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff f894 	bl	8006c3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	2201      	movs	r2, #1
 8007b1a:	409a      	lsls	r2, r3
 8007b1c:	4b2b      	ldr	r3, [pc, #172]	; (8007bcc <xTaskResumeAll+0x120>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	4a2a      	ldr	r2, [pc, #168]	; (8007bcc <xTaskResumeAll+0x120>)
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4a27      	ldr	r2, [pc, #156]	; (8007bd0 <xTaskResumeAll+0x124>)
 8007b34:	441a      	add	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	f7ff f820 	bl	8006b82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b46:	4b23      	ldr	r3, [pc, #140]	; (8007bd4 <xTaskResumeAll+0x128>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d302      	bcc.n	8007b56 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007b50:	4b21      	ldr	r3, [pc, #132]	; (8007bd8 <xTaskResumeAll+0x12c>)
 8007b52:	2201      	movs	r2, #1
 8007b54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b56:	4b1c      	ldr	r3, [pc, #112]	; (8007bc8 <xTaskResumeAll+0x11c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1cc      	bne.n	8007af8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b64:	f000 fb2c 	bl	80081c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b68:	4b1c      	ldr	r3, [pc, #112]	; (8007bdc <xTaskResumeAll+0x130>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d010      	beq.n	8007b96 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b74:	f000 f846 	bl	8007c04 <xTaskIncrementTick>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007b7e:	4b16      	ldr	r3, [pc, #88]	; (8007bd8 <xTaskResumeAll+0x12c>)
 8007b80:	2201      	movs	r2, #1
 8007b82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1f1      	bne.n	8007b74 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007b90:	4b12      	ldr	r3, [pc, #72]	; (8007bdc <xTaskResumeAll+0x130>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b96:	4b10      	ldr	r3, [pc, #64]	; (8007bd8 <xTaskResumeAll+0x12c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d009      	beq.n	8007bb2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ba2:	4b0f      	ldr	r3, [pc, #60]	; (8007be0 <xTaskResumeAll+0x134>)
 8007ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba8:	601a      	str	r2, [r3, #0]
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bb2:	f000 fd8f 	bl	80086d4 <vPortExitCritical>

	return xAlreadyYielded;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	2000fa24 	.word	0x2000fa24
 8007bc4:	2000f9fc 	.word	0x2000f9fc
 8007bc8:	2000f9bc 	.word	0x2000f9bc
 8007bcc:	2000fa04 	.word	0x2000fa04
 8007bd0:	2000f900 	.word	0x2000f900
 8007bd4:	2000f8fc 	.word	0x2000f8fc
 8007bd8:	2000fa10 	.word	0x2000fa10
 8007bdc:	2000fa0c 	.word	0x2000fa0c
 8007be0:	e000ed04 	.word	0xe000ed04

08007be4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007bea:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <xTaskGetTickCount+0x1c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007bf0:	687b      	ldr	r3, [r7, #4]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	2000fa00 	.word	0x2000fa00

08007c04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c0e:	4b4e      	ldr	r3, [pc, #312]	; (8007d48 <xTaskIncrementTick+0x144>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f040 808e 	bne.w	8007d34 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c18:	4b4c      	ldr	r3, [pc, #304]	; (8007d4c <xTaskIncrementTick+0x148>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c20:	4a4a      	ldr	r2, [pc, #296]	; (8007d4c <xTaskIncrementTick+0x148>)
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d120      	bne.n	8007c6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c2c:	4b48      	ldr	r3, [pc, #288]	; (8007d50 <xTaskIncrementTick+0x14c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00a      	beq.n	8007c4c <xTaskIncrementTick+0x48>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	603b      	str	r3, [r7, #0]
}
 8007c48:	bf00      	nop
 8007c4a:	e7fe      	b.n	8007c4a <xTaskIncrementTick+0x46>
 8007c4c:	4b40      	ldr	r3, [pc, #256]	; (8007d50 <xTaskIncrementTick+0x14c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	4b40      	ldr	r3, [pc, #256]	; (8007d54 <xTaskIncrementTick+0x150>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a3e      	ldr	r2, [pc, #248]	; (8007d50 <xTaskIncrementTick+0x14c>)
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	4a3e      	ldr	r2, [pc, #248]	; (8007d54 <xTaskIncrementTick+0x150>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	4b3d      	ldr	r3, [pc, #244]	; (8007d58 <xTaskIncrementTick+0x154>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3301      	adds	r3, #1
 8007c66:	4a3c      	ldr	r2, [pc, #240]	; (8007d58 <xTaskIncrementTick+0x154>)
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	f000 faa9 	bl	80081c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c6e:	4b3b      	ldr	r3, [pc, #236]	; (8007d5c <xTaskIncrementTick+0x158>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d348      	bcc.n	8007d0a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c78:	4b35      	ldr	r3, [pc, #212]	; (8007d50 <xTaskIncrementTick+0x14c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d104      	bne.n	8007c8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c82:	4b36      	ldr	r3, [pc, #216]	; (8007d5c <xTaskIncrementTick+0x158>)
 8007c84:	f04f 32ff 	mov.w	r2, #4294967295
 8007c88:	601a      	str	r2, [r3, #0]
					break;
 8007c8a:	e03e      	b.n	8007d0a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c8c:	4b30      	ldr	r3, [pc, #192]	; (8007d50 <xTaskIncrementTick+0x14c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d203      	bcs.n	8007cac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ca4:	4a2d      	ldr	r2, [pc, #180]	; (8007d5c <xTaskIncrementTick+0x158>)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007caa:	e02e      	b.n	8007d0a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fe ffc3 	bl	8006c3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d004      	beq.n	8007cc8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	3318      	adds	r3, #24
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fe ffba 	bl	8006c3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	2201      	movs	r2, #1
 8007cce:	409a      	lsls	r2, r3
 8007cd0:	4b23      	ldr	r3, [pc, #140]	; (8007d60 <xTaskIncrementTick+0x15c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	4a22      	ldr	r2, [pc, #136]	; (8007d60 <xTaskIncrementTick+0x15c>)
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4a1f      	ldr	r2, [pc, #124]	; (8007d64 <xTaskIncrementTick+0x160>)
 8007ce8:	441a      	add	r2, r3
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	3304      	adds	r3, #4
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	f7fe ff46 	bl	8006b82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfa:	4b1b      	ldr	r3, [pc, #108]	; (8007d68 <xTaskIncrementTick+0x164>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d3b9      	bcc.n	8007c78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d04:	2301      	movs	r3, #1
 8007d06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d08:	e7b6      	b.n	8007c78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d0a:	4b17      	ldr	r3, [pc, #92]	; (8007d68 <xTaskIncrementTick+0x164>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d10:	4914      	ldr	r1, [pc, #80]	; (8007d64 <xTaskIncrementTick+0x160>)
 8007d12:	4613      	mov	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d901      	bls.n	8007d26 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007d22:	2301      	movs	r3, #1
 8007d24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d26:	4b11      	ldr	r3, [pc, #68]	; (8007d6c <xTaskIncrementTick+0x168>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d007      	beq.n	8007d3e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	e004      	b.n	8007d3e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d34:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <xTaskIncrementTick+0x16c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	4a0d      	ldr	r2, [pc, #52]	; (8007d70 <xTaskIncrementTick+0x16c>)
 8007d3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d3e:	697b      	ldr	r3, [r7, #20]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	2000fa24 	.word	0x2000fa24
 8007d4c:	2000fa00 	.word	0x2000fa00
 8007d50:	2000f9b4 	.word	0x2000f9b4
 8007d54:	2000f9b8 	.word	0x2000f9b8
 8007d58:	2000fa14 	.word	0x2000fa14
 8007d5c:	2000fa1c 	.word	0x2000fa1c
 8007d60:	2000fa04 	.word	0x2000fa04
 8007d64:	2000f900 	.word	0x2000f900
 8007d68:	2000f8fc 	.word	0x2000f8fc
 8007d6c:	2000fa10 	.word	0x2000fa10
 8007d70:	2000fa0c 	.word	0x2000fa0c

08007d74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d7a:	4b29      	ldr	r3, [pc, #164]	; (8007e20 <vTaskSwitchContext+0xac>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d82:	4b28      	ldr	r3, [pc, #160]	; (8007e24 <vTaskSwitchContext+0xb0>)
 8007d84:	2201      	movs	r2, #1
 8007d86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d88:	e044      	b.n	8007e14 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007d8a:	4b26      	ldr	r3, [pc, #152]	; (8007e24 <vTaskSwitchContext+0xb0>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d90:	4b25      	ldr	r3, [pc, #148]	; (8007e28 <vTaskSwitchContext+0xb4>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	fab3 f383 	clz	r3, r3
 8007d9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d9e:	7afb      	ldrb	r3, [r7, #11]
 8007da0:	f1c3 031f 	rsb	r3, r3, #31
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	4921      	ldr	r1, [pc, #132]	; (8007e2c <vTaskSwitchContext+0xb8>)
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	4613      	mov	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	440b      	add	r3, r1
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10a      	bne.n	8007dd0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	607b      	str	r3, [r7, #4]
}
 8007dcc:	bf00      	nop
 8007dce:	e7fe      	b.n	8007dce <vTaskSwitchContext+0x5a>
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4a14      	ldr	r2, [pc, #80]	; (8007e2c <vTaskSwitchContext+0xb8>)
 8007ddc:	4413      	add	r3, r2
 8007dde:	613b      	str	r3, [r7, #16]
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	605a      	str	r2, [r3, #4]
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	3308      	adds	r3, #8
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d104      	bne.n	8007e00 <vTaskSwitchContext+0x8c>
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	605a      	str	r2, [r3, #4]
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	4a0a      	ldr	r2, [pc, #40]	; (8007e30 <vTaskSwitchContext+0xbc>)
 8007e08:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e0a:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <vTaskSwitchContext+0xbc>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	334c      	adds	r3, #76	; 0x4c
 8007e10:	4a08      	ldr	r2, [pc, #32]	; (8007e34 <vTaskSwitchContext+0xc0>)
 8007e12:	6013      	str	r3, [r2, #0]
}
 8007e14:	bf00      	nop
 8007e16:	371c      	adds	r7, #28
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	2000fa24 	.word	0x2000fa24
 8007e24:	2000fa10 	.word	0x2000fa10
 8007e28:	2000fa04 	.word	0x2000fa04
 8007e2c:	2000f900 	.word	0x2000f900
 8007e30:	2000f8fc 	.word	0x2000f8fc
 8007e34:	20000014 	.word	0x20000014

08007e38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	60fb      	str	r3, [r7, #12]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e5e:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <vTaskPlaceOnEventList+0x44>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3318      	adds	r3, #24
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7fe feaf 	bl	8006bca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	6838      	ldr	r0, [r7, #0]
 8007e70:	f000 fa6a 	bl	8008348 <prvAddCurrentTaskToDelayedList>
}
 8007e74:	bf00      	nop
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	2000f8fc 	.word	0x2000f8fc

08007e80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10a      	bne.n	8007eac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	60fb      	str	r3, [r7, #12]
}
 8007ea8:	bf00      	nop
 8007eaa:	e7fe      	b.n	8007eaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	3318      	adds	r3, #24
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fe fec3 	bl	8006c3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eb6:	4b1d      	ldr	r3, [pc, #116]	; (8007f2c <xTaskRemoveFromEventList+0xac>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d11c      	bne.n	8007ef8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe feba 	bl	8006c3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	2201      	movs	r2, #1
 8007ece:	409a      	lsls	r2, r3
 8007ed0:	4b17      	ldr	r3, [pc, #92]	; (8007f30 <xTaskRemoveFromEventList+0xb0>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	4a16      	ldr	r2, [pc, #88]	; (8007f30 <xTaskRemoveFromEventList+0xb0>)
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4a13      	ldr	r2, [pc, #76]	; (8007f34 <xTaskRemoveFromEventList+0xb4>)
 8007ee8:	441a      	add	r2, r3
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	3304      	adds	r3, #4
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	f7fe fe46 	bl	8006b82 <vListInsertEnd>
 8007ef6:	e005      	b.n	8007f04 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	3318      	adds	r3, #24
 8007efc:	4619      	mov	r1, r3
 8007efe:	480e      	ldr	r0, [pc, #56]	; (8007f38 <xTaskRemoveFromEventList+0xb8>)
 8007f00:	f7fe fe3f 	bl	8006b82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f08:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <xTaskRemoveFromEventList+0xbc>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d905      	bls.n	8007f1e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f12:	2301      	movs	r3, #1
 8007f14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f16:	4b0a      	ldr	r3, [pc, #40]	; (8007f40 <xTaskRemoveFromEventList+0xc0>)
 8007f18:	2201      	movs	r2, #1
 8007f1a:	601a      	str	r2, [r3, #0]
 8007f1c:	e001      	b.n	8007f22 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f22:	697b      	ldr	r3, [r7, #20]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3718      	adds	r7, #24
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	2000fa24 	.word	0x2000fa24
 8007f30:	2000fa04 	.word	0x2000fa04
 8007f34:	2000f900 	.word	0x2000f900
 8007f38:	2000f9bc 	.word	0x2000f9bc
 8007f3c:	2000f8fc 	.word	0x2000f8fc
 8007f40:	2000fa10 	.word	0x2000fa10

08007f44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f4c:	4b06      	ldr	r3, [pc, #24]	; (8007f68 <vTaskInternalSetTimeOutState+0x24>)
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f54:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <vTaskInternalSetTimeOutState+0x28>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	605a      	str	r2, [r3, #4]
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	2000fa14 	.word	0x2000fa14
 8007f6c:	2000fa00 	.word	0x2000fa00

08007f70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	613b      	str	r3, [r7, #16]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	60fb      	str	r3, [r7, #12]
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007fb2:	f000 fb5f 	bl	8008674 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007fb6:	4b1d      	ldr	r3, [pc, #116]	; (800802c <xTaskCheckForTimeOut+0xbc>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fce:	d102      	bne.n	8007fd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	61fb      	str	r3, [r7, #28]
 8007fd4:	e023      	b.n	800801e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	4b15      	ldr	r3, [pc, #84]	; (8008030 <xTaskCheckForTimeOut+0xc0>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d007      	beq.n	8007ff2 <xTaskCheckForTimeOut+0x82>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d302      	bcc.n	8007ff2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007fec:	2301      	movs	r3, #1
 8007fee:	61fb      	str	r3, [r7, #28]
 8007ff0:	e015      	b.n	800801e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d20b      	bcs.n	8008014 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	1ad2      	subs	r2, r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff ff9b 	bl	8007f44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800800e:	2300      	movs	r3, #0
 8008010:	61fb      	str	r3, [r7, #28]
 8008012:	e004      	b.n	800801e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800801a:	2301      	movs	r3, #1
 800801c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800801e:	f000 fb59 	bl	80086d4 <vPortExitCritical>

	return xReturn;
 8008022:	69fb      	ldr	r3, [r7, #28]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3720      	adds	r7, #32
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	2000fa00 	.word	0x2000fa00
 8008030:	2000fa14 	.word	0x2000fa14

08008034 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008038:	4b03      	ldr	r3, [pc, #12]	; (8008048 <vTaskMissedYield+0x14>)
 800803a:	2201      	movs	r2, #1
 800803c:	601a      	str	r2, [r3, #0]
}
 800803e:	bf00      	nop
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	2000fa10 	.word	0x2000fa10

0800804c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008054:	f000 f852 	bl	80080fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008058:	4b06      	ldr	r3, [pc, #24]	; (8008074 <prvIdleTask+0x28>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d9f9      	bls.n	8008054 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008060:	4b05      	ldr	r3, [pc, #20]	; (8008078 <prvIdleTask+0x2c>)
 8008062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008070:	e7f0      	b.n	8008054 <prvIdleTask+0x8>
 8008072:	bf00      	nop
 8008074:	2000f900 	.word	0x2000f900
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008082:	2300      	movs	r3, #0
 8008084:	607b      	str	r3, [r7, #4]
 8008086:	e00c      	b.n	80080a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	4613      	mov	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4a12      	ldr	r2, [pc, #72]	; (80080dc <prvInitialiseTaskLists+0x60>)
 8008094:	4413      	add	r3, r2
 8008096:	4618      	mov	r0, r3
 8008098:	f7fe fd46 	bl	8006b28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3301      	adds	r3, #1
 80080a0:	607b      	str	r3, [r7, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b06      	cmp	r3, #6
 80080a6:	d9ef      	bls.n	8008088 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80080a8:	480d      	ldr	r0, [pc, #52]	; (80080e0 <prvInitialiseTaskLists+0x64>)
 80080aa:	f7fe fd3d 	bl	8006b28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080ae:	480d      	ldr	r0, [pc, #52]	; (80080e4 <prvInitialiseTaskLists+0x68>)
 80080b0:	f7fe fd3a 	bl	8006b28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80080b4:	480c      	ldr	r0, [pc, #48]	; (80080e8 <prvInitialiseTaskLists+0x6c>)
 80080b6:	f7fe fd37 	bl	8006b28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80080ba:	480c      	ldr	r0, [pc, #48]	; (80080ec <prvInitialiseTaskLists+0x70>)
 80080bc:	f7fe fd34 	bl	8006b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80080c0:	480b      	ldr	r0, [pc, #44]	; (80080f0 <prvInitialiseTaskLists+0x74>)
 80080c2:	f7fe fd31 	bl	8006b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080c6:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <prvInitialiseTaskLists+0x78>)
 80080c8:	4a05      	ldr	r2, [pc, #20]	; (80080e0 <prvInitialiseTaskLists+0x64>)
 80080ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080cc:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <prvInitialiseTaskLists+0x7c>)
 80080ce:	4a05      	ldr	r2, [pc, #20]	; (80080e4 <prvInitialiseTaskLists+0x68>)
 80080d0:	601a      	str	r2, [r3, #0]
}
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	2000f900 	.word	0x2000f900
 80080e0:	2000f98c 	.word	0x2000f98c
 80080e4:	2000f9a0 	.word	0x2000f9a0
 80080e8:	2000f9bc 	.word	0x2000f9bc
 80080ec:	2000f9d0 	.word	0x2000f9d0
 80080f0:	2000f9e8 	.word	0x2000f9e8
 80080f4:	2000f9b4 	.word	0x2000f9b4
 80080f8:	2000f9b8 	.word	0x2000f9b8

080080fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008102:	e019      	b.n	8008138 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008104:	f000 fab6 	bl	8008674 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008108:	4b10      	ldr	r3, [pc, #64]	; (800814c <prvCheckTasksWaitingTermination+0x50>)
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3304      	adds	r3, #4
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe fd91 	bl	8006c3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800811a:	4b0d      	ldr	r3, [pc, #52]	; (8008150 <prvCheckTasksWaitingTermination+0x54>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3b01      	subs	r3, #1
 8008120:	4a0b      	ldr	r2, [pc, #44]	; (8008150 <prvCheckTasksWaitingTermination+0x54>)
 8008122:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008124:	4b0b      	ldr	r3, [pc, #44]	; (8008154 <prvCheckTasksWaitingTermination+0x58>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3b01      	subs	r3, #1
 800812a:	4a0a      	ldr	r2, [pc, #40]	; (8008154 <prvCheckTasksWaitingTermination+0x58>)
 800812c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800812e:	f000 fad1 	bl	80086d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f810 	bl	8008158 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008138:	4b06      	ldr	r3, [pc, #24]	; (8008154 <prvCheckTasksWaitingTermination+0x58>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e1      	bne.n	8008104 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008140:	bf00      	nop
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	2000f9d0 	.word	0x2000f9d0
 8008150:	2000f9fc 	.word	0x2000f9fc
 8008154:	2000f9e4 	.word	0x2000f9e4

08008158 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	334c      	adds	r3, #76	; 0x4c
 8008164:	4618      	mov	r0, r3
 8008166:	f002 ff27 	bl	800afb8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008170:	2b00      	cmp	r3, #0
 8008172:	d108      	bne.n	8008186 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008178:	4618      	mov	r0, r3
 800817a:	f000 fc69 	bl	8008a50 <vPortFree>
				vPortFree( pxTCB );
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fc66 	bl	8008a50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008184:	e018      	b.n	80081b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800818c:	2b01      	cmp	r3, #1
 800818e:	d103      	bne.n	8008198 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fc5d 	bl	8008a50 <vPortFree>
	}
 8008196:	e00f      	b.n	80081b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d00a      	beq.n	80081b8 <prvDeleteTCB+0x60>
	__asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	60fb      	str	r3, [r7, #12]
}
 80081b4:	bf00      	nop
 80081b6:	e7fe      	b.n	80081b6 <prvDeleteTCB+0x5e>
	}
 80081b8:	bf00      	nop
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081c6:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <prvResetNextTaskUnblockTime+0x38>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d104      	bne.n	80081da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <prvResetNextTaskUnblockTime+0x3c>)
 80081d2:	f04f 32ff 	mov.w	r2, #4294967295
 80081d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081d8:	e008      	b.n	80081ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081da:	4b07      	ldr	r3, [pc, #28]	; (80081f8 <prvResetNextTaskUnblockTime+0x38>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	4a04      	ldr	r2, [pc, #16]	; (80081fc <prvResetNextTaskUnblockTime+0x3c>)
 80081ea:	6013      	str	r3, [r2, #0]
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	2000f9b4 	.word	0x2000f9b4
 80081fc:	2000fa1c 	.word	0x2000fa1c

08008200 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <xTaskGetSchedulerState+0x34>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d102      	bne.n	8008214 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800820e:	2301      	movs	r3, #1
 8008210:	607b      	str	r3, [r7, #4]
 8008212:	e008      	b.n	8008226 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008214:	4b08      	ldr	r3, [pc, #32]	; (8008238 <xTaskGetSchedulerState+0x38>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d102      	bne.n	8008222 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800821c:	2302      	movs	r3, #2
 800821e:	607b      	str	r3, [r7, #4]
 8008220:	e001      	b.n	8008226 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008222:	2300      	movs	r3, #0
 8008224:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008226:	687b      	ldr	r3, [r7, #4]
	}
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	2000fa08 	.word	0x2000fa08
 8008238:	2000fa24 	.word	0x2000fa24

0800823c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008248:	2300      	movs	r3, #0
 800824a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d06e      	beq.n	8008330 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008252:	4b3a      	ldr	r3, [pc, #232]	; (800833c <xTaskPriorityDisinherit+0x100>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	429a      	cmp	r2, r3
 800825a:	d00a      	beq.n	8008272 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800825c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	60fb      	str	r3, [r7, #12]
}
 800826e:	bf00      	nop
 8008270:	e7fe      	b.n	8008270 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10a      	bne.n	8008290 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	60bb      	str	r3, [r7, #8]
}
 800828c:	bf00      	nop
 800828e:	e7fe      	b.n	800828e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008294:	1e5a      	subs	r2, r3, #1
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d044      	beq.n	8008330 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d140      	bne.n	8008330 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fe fcc2 	bl	8006c3c <uxListRemove>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d115      	bne.n	80082ea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c2:	491f      	ldr	r1, [pc, #124]	; (8008340 <xTaskPriorityDisinherit+0x104>)
 80082c4:	4613      	mov	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	440b      	add	r3, r1
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10a      	bne.n	80082ea <xTaskPriorityDisinherit+0xae>
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	2201      	movs	r2, #1
 80082da:	fa02 f303 	lsl.w	r3, r2, r3
 80082de:	43da      	mvns	r2, r3
 80082e0:	4b18      	ldr	r3, [pc, #96]	; (8008344 <xTaskPriorityDisinherit+0x108>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4013      	ands	r3, r2
 80082e6:	4a17      	ldr	r2, [pc, #92]	; (8008344 <xTaskPriorityDisinherit+0x108>)
 80082e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f6:	f1c3 0207 	rsb	r2, r3, #7
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008302:	2201      	movs	r2, #1
 8008304:	409a      	lsls	r2, r3
 8008306:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <xTaskPriorityDisinherit+0x108>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4313      	orrs	r3, r2
 800830c:	4a0d      	ldr	r2, [pc, #52]	; (8008344 <xTaskPriorityDisinherit+0x108>)
 800830e:	6013      	str	r3, [r2, #0]
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008314:	4613      	mov	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4a08      	ldr	r2, [pc, #32]	; (8008340 <xTaskPriorityDisinherit+0x104>)
 800831e:	441a      	add	r2, r3
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	3304      	adds	r3, #4
 8008324:	4619      	mov	r1, r3
 8008326:	4610      	mov	r0, r2
 8008328:	f7fe fc2b 	bl	8006b82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800832c:	2301      	movs	r3, #1
 800832e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008330:	697b      	ldr	r3, [r7, #20]
	}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	2000f8fc 	.word	0x2000f8fc
 8008340:	2000f900 	.word	0x2000f900
 8008344:	2000fa04 	.word	0x2000fa04

08008348 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008352:	4b29      	ldr	r3, [pc, #164]	; (80083f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008358:	4b28      	ldr	r3, [pc, #160]	; (80083fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3304      	adds	r3, #4
 800835e:	4618      	mov	r0, r3
 8008360:	f7fe fc6c 	bl	8006c3c <uxListRemove>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10b      	bne.n	8008382 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800836a:	4b24      	ldr	r3, [pc, #144]	; (80083fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008370:	2201      	movs	r2, #1
 8008372:	fa02 f303 	lsl.w	r3, r2, r3
 8008376:	43da      	mvns	r2, r3
 8008378:	4b21      	ldr	r3, [pc, #132]	; (8008400 <prvAddCurrentTaskToDelayedList+0xb8>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4013      	ands	r3, r2
 800837e:	4a20      	ldr	r2, [pc, #128]	; (8008400 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008380:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008388:	d10a      	bne.n	80083a0 <prvAddCurrentTaskToDelayedList+0x58>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d007      	beq.n	80083a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008390:	4b1a      	ldr	r3, [pc, #104]	; (80083fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3304      	adds	r3, #4
 8008396:	4619      	mov	r1, r3
 8008398:	481a      	ldr	r0, [pc, #104]	; (8008404 <prvAddCurrentTaskToDelayedList+0xbc>)
 800839a:	f7fe fbf2 	bl	8006b82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800839e:	e026      	b.n	80083ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4413      	add	r3, r2
 80083a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083a8:	4b14      	ldr	r3, [pc, #80]	; (80083fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d209      	bcs.n	80083cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083b8:	4b13      	ldr	r3, [pc, #76]	; (8008408 <prvAddCurrentTaskToDelayedList+0xc0>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3304      	adds	r3, #4
 80083c2:	4619      	mov	r1, r3
 80083c4:	4610      	mov	r0, r2
 80083c6:	f7fe fc00 	bl	8006bca <vListInsert>
}
 80083ca:	e010      	b.n	80083ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083cc:	4b0f      	ldr	r3, [pc, #60]	; (800840c <prvAddCurrentTaskToDelayedList+0xc4>)
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3304      	adds	r3, #4
 80083d6:	4619      	mov	r1, r3
 80083d8:	4610      	mov	r0, r2
 80083da:	f7fe fbf6 	bl	8006bca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083de:	4b0c      	ldr	r3, [pc, #48]	; (8008410 <prvAddCurrentTaskToDelayedList+0xc8>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d202      	bcs.n	80083ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80083e8:	4a09      	ldr	r2, [pc, #36]	; (8008410 <prvAddCurrentTaskToDelayedList+0xc8>)
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	6013      	str	r3, [r2, #0]
}
 80083ee:	bf00      	nop
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	2000fa00 	.word	0x2000fa00
 80083fc:	2000f8fc 	.word	0x2000f8fc
 8008400:	2000fa04 	.word	0x2000fa04
 8008404:	2000f9e8 	.word	0x2000f9e8
 8008408:	2000f9b8 	.word	0x2000f9b8
 800840c:	2000f9b4 	.word	0x2000f9b4
 8008410:	2000fa1c 	.word	0x2000fa1c

08008414 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	3b04      	subs	r3, #4
 8008424:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800842c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3b04      	subs	r3, #4
 8008432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	f023 0201 	bic.w	r2, r3, #1
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	3b04      	subs	r3, #4
 8008442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008444:	4a0c      	ldr	r2, [pc, #48]	; (8008478 <pxPortInitialiseStack+0x64>)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	3b14      	subs	r3, #20
 800844e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	3b04      	subs	r3, #4
 800845a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f06f 0202 	mvn.w	r2, #2
 8008462:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3b20      	subs	r3, #32
 8008468:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800846a:	68fb      	ldr	r3, [r7, #12]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	0800847d 	.word	0x0800847d

0800847c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008486:	4b12      	ldr	r3, [pc, #72]	; (80084d0 <prvTaskExitError+0x54>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848e:	d00a      	beq.n	80084a6 <prvTaskExitError+0x2a>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	60fb      	str	r3, [r7, #12]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <prvTaskExitError+0x28>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	60bb      	str	r3, [r7, #8]
}
 80084b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084ba:	bf00      	nop
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0fc      	beq.n	80084bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084c2:	bf00      	nop
 80084c4:	bf00      	nop
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	20000010 	.word	0x20000010
	...

080084e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084e0:	4b07      	ldr	r3, [pc, #28]	; (8008500 <pxCurrentTCBConst2>)
 80084e2:	6819      	ldr	r1, [r3, #0]
 80084e4:	6808      	ldr	r0, [r1, #0]
 80084e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ea:	f380 8809 	msr	PSP, r0
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f04f 0000 	mov.w	r0, #0
 80084f6:	f380 8811 	msr	BASEPRI, r0
 80084fa:	4770      	bx	lr
 80084fc:	f3af 8000 	nop.w

08008500 <pxCurrentTCBConst2>:
 8008500:	2000f8fc 	.word	0x2000f8fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop

08008508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008508:	4808      	ldr	r0, [pc, #32]	; (800852c <prvPortStartFirstTask+0x24>)
 800850a:	6800      	ldr	r0, [r0, #0]
 800850c:	6800      	ldr	r0, [r0, #0]
 800850e:	f380 8808 	msr	MSP, r0
 8008512:	f04f 0000 	mov.w	r0, #0
 8008516:	f380 8814 	msr	CONTROL, r0
 800851a:	b662      	cpsie	i
 800851c:	b661      	cpsie	f
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	df00      	svc	0
 8008528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800852a:	bf00      	nop
 800852c:	e000ed08 	.word	0xe000ed08

08008530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008536:	4b46      	ldr	r3, [pc, #280]	; (8008650 <xPortStartScheduler+0x120>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a46      	ldr	r2, [pc, #280]	; (8008654 <xPortStartScheduler+0x124>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d10a      	bne.n	8008556 <xPortStartScheduler+0x26>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	613b      	str	r3, [r7, #16]
}
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008556:	4b3e      	ldr	r3, [pc, #248]	; (8008650 <xPortStartScheduler+0x120>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a3f      	ldr	r2, [pc, #252]	; (8008658 <xPortStartScheduler+0x128>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d10a      	bne.n	8008576 <xPortStartScheduler+0x46>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	60fb      	str	r3, [r7, #12]
}
 8008572:	bf00      	nop
 8008574:	e7fe      	b.n	8008574 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008576:	4b39      	ldr	r3, [pc, #228]	; (800865c <xPortStartScheduler+0x12c>)
 8008578:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	22ff      	movs	r2, #255	; 0xff
 8008586:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	b2db      	uxtb	r3, r3
 8008594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008598:	b2da      	uxtb	r2, r3
 800859a:	4b31      	ldr	r3, [pc, #196]	; (8008660 <xPortStartScheduler+0x130>)
 800859c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800859e:	4b31      	ldr	r3, [pc, #196]	; (8008664 <xPortStartScheduler+0x134>)
 80085a0:	2207      	movs	r2, #7
 80085a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085a4:	e009      	b.n	80085ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80085a6:	4b2f      	ldr	r3, [pc, #188]	; (8008664 <xPortStartScheduler+0x134>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3b01      	subs	r3, #1
 80085ac:	4a2d      	ldr	r2, [pc, #180]	; (8008664 <xPortStartScheduler+0x134>)
 80085ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085ba:	78fb      	ldrb	r3, [r7, #3]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c2:	2b80      	cmp	r3, #128	; 0x80
 80085c4:	d0ef      	beq.n	80085a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80085c6:	4b27      	ldr	r3, [pc, #156]	; (8008664 <xPortStartScheduler+0x134>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f1c3 0307 	rsb	r3, r3, #7
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d00a      	beq.n	80085e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	60bb      	str	r3, [r7, #8]
}
 80085e4:	bf00      	nop
 80085e6:	e7fe      	b.n	80085e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085e8:	4b1e      	ldr	r3, [pc, #120]	; (8008664 <xPortStartScheduler+0x134>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	021b      	lsls	r3, r3, #8
 80085ee:	4a1d      	ldr	r2, [pc, #116]	; (8008664 <xPortStartScheduler+0x134>)
 80085f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085f2:	4b1c      	ldr	r3, [pc, #112]	; (8008664 <xPortStartScheduler+0x134>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085fa:	4a1a      	ldr	r2, [pc, #104]	; (8008664 <xPortStartScheduler+0x134>)
 80085fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	b2da      	uxtb	r2, r3
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008606:	4b18      	ldr	r3, [pc, #96]	; (8008668 <xPortStartScheduler+0x138>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a17      	ldr	r2, [pc, #92]	; (8008668 <xPortStartScheduler+0x138>)
 800860c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008612:	4b15      	ldr	r3, [pc, #84]	; (8008668 <xPortStartScheduler+0x138>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a14      	ldr	r2, [pc, #80]	; (8008668 <xPortStartScheduler+0x138>)
 8008618:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800861c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800861e:	f000 f8dd 	bl	80087dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008622:	4b12      	ldr	r3, [pc, #72]	; (800866c <xPortStartScheduler+0x13c>)
 8008624:	2200      	movs	r2, #0
 8008626:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008628:	f000 f8fc 	bl	8008824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800862c:	4b10      	ldr	r3, [pc, #64]	; (8008670 <xPortStartScheduler+0x140>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a0f      	ldr	r2, [pc, #60]	; (8008670 <xPortStartScheduler+0x140>)
 8008632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008636:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008638:	f7ff ff66 	bl	8008508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800863c:	f7ff fb9a 	bl	8007d74 <vTaskSwitchContext>
	prvTaskExitError();
 8008640:	f7ff ff1c 	bl	800847c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	e000ed00 	.word	0xe000ed00
 8008654:	410fc271 	.word	0x410fc271
 8008658:	410fc270 	.word	0x410fc270
 800865c:	e000e400 	.word	0xe000e400
 8008660:	2000fa28 	.word	0x2000fa28
 8008664:	2000fa2c 	.word	0x2000fa2c
 8008668:	e000ed20 	.word	0xe000ed20
 800866c:	20000010 	.word	0x20000010
 8008670:	e000ef34 	.word	0xe000ef34

08008674 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	607b      	str	r3, [r7, #4]
}
 800868c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800868e:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <vPortEnterCritical+0x58>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3301      	adds	r3, #1
 8008694:	4a0d      	ldr	r2, [pc, #52]	; (80086cc <vPortEnterCritical+0x58>)
 8008696:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008698:	4b0c      	ldr	r3, [pc, #48]	; (80086cc <vPortEnterCritical+0x58>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d10f      	bne.n	80086c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086a0:	4b0b      	ldr	r3, [pc, #44]	; (80086d0 <vPortEnterCritical+0x5c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	603b      	str	r3, [r7, #0]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <vPortEnterCritical+0x4a>
	}
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	20000010 	.word	0x20000010
 80086d0:	e000ed04 	.word	0xe000ed04

080086d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086da:	4b12      	ldr	r3, [pc, #72]	; (8008724 <vPortExitCritical+0x50>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10a      	bne.n	80086f8 <vPortExitCritical+0x24>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	607b      	str	r3, [r7, #4]
}
 80086f4:	bf00      	nop
 80086f6:	e7fe      	b.n	80086f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80086f8:	4b0a      	ldr	r3, [pc, #40]	; (8008724 <vPortExitCritical+0x50>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	4a09      	ldr	r2, [pc, #36]	; (8008724 <vPortExitCritical+0x50>)
 8008700:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008702:	4b08      	ldr	r3, [pc, #32]	; (8008724 <vPortExitCritical+0x50>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d105      	bne.n	8008716 <vPortExitCritical+0x42>
 800870a:	2300      	movs	r3, #0
 800870c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	f383 8811 	msr	BASEPRI, r3
}
 8008714:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	20000010 	.word	0x20000010
	...

08008730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008730:	f3ef 8009 	mrs	r0, PSP
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	4b15      	ldr	r3, [pc, #84]	; (8008790 <pxCurrentTCBConst>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	f01e 0f10 	tst.w	lr, #16
 8008740:	bf08      	it	eq
 8008742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874a:	6010      	str	r0, [r2, #0]
 800874c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008754:	f380 8811 	msr	BASEPRI, r0
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f7ff fb08 	bl	8007d74 <vTaskSwitchContext>
 8008764:	f04f 0000 	mov.w	r0, #0
 8008768:	f380 8811 	msr	BASEPRI, r0
 800876c:	bc09      	pop	{r0, r3}
 800876e:	6819      	ldr	r1, [r3, #0]
 8008770:	6808      	ldr	r0, [r1, #0]
 8008772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008776:	f01e 0f10 	tst.w	lr, #16
 800877a:	bf08      	it	eq
 800877c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008780:	f380 8809 	msr	PSP, r0
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	f3af 8000 	nop.w

08008790 <pxCurrentTCBConst>:
 8008790:	2000f8fc 	.word	0x2000f8fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop

08008798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	607b      	str	r3, [r7, #4]
}
 80087b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087b2:	f7ff fa27 	bl	8007c04 <xTaskIncrementTick>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087bc:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <SysTick_Handler+0x40>)
 80087be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	2300      	movs	r3, #0
 80087c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f383 8811 	msr	BASEPRI, r3
}
 80087ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087e0:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <vPortSetupTimerInterrupt+0x34>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087e6:	4b0b      	ldr	r3, [pc, #44]	; (8008814 <vPortSetupTimerInterrupt+0x38>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087ec:	4b0a      	ldr	r3, [pc, #40]	; (8008818 <vPortSetupTimerInterrupt+0x3c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a0a      	ldr	r2, [pc, #40]	; (800881c <vPortSetupTimerInterrupt+0x40>)
 80087f2:	fba2 2303 	umull	r2, r3, r2, r3
 80087f6:	099b      	lsrs	r3, r3, #6
 80087f8:	4a09      	ldr	r2, [pc, #36]	; (8008820 <vPortSetupTimerInterrupt+0x44>)
 80087fa:	3b01      	subs	r3, #1
 80087fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087fe:	4b04      	ldr	r3, [pc, #16]	; (8008810 <vPortSetupTimerInterrupt+0x34>)
 8008800:	2207      	movs	r2, #7
 8008802:	601a      	str	r2, [r3, #0]
}
 8008804:	bf00      	nop
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	e000e010 	.word	0xe000e010
 8008814:	e000e018 	.word	0xe000e018
 8008818:	20000004 	.word	0x20000004
 800881c:	10624dd3 	.word	0x10624dd3
 8008820:	e000e014 	.word	0xe000e014

08008824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008834 <vPortEnableVFP+0x10>
 8008828:	6801      	ldr	r1, [r0, #0]
 800882a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800882e:	6001      	str	r1, [r0, #0]
 8008830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008832:	bf00      	nop
 8008834:	e000ed88 	.word	0xe000ed88

08008838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800883e:	f3ef 8305 	mrs	r3, IPSR
 8008842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b0f      	cmp	r3, #15
 8008848:	d914      	bls.n	8008874 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800884a:	4a17      	ldr	r2, [pc, #92]	; (80088a8 <vPortValidateInterruptPriority+0x70>)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008854:	4b15      	ldr	r3, [pc, #84]	; (80088ac <vPortValidateInterruptPriority+0x74>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	7afa      	ldrb	r2, [r7, #11]
 800885a:	429a      	cmp	r2, r3
 800885c:	d20a      	bcs.n	8008874 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	607b      	str	r3, [r7, #4]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008874:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <vPortValidateInterruptPriority+0x78>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800887c:	4b0d      	ldr	r3, [pc, #52]	; (80088b4 <vPortValidateInterruptPriority+0x7c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	429a      	cmp	r2, r3
 8008882:	d90a      	bls.n	800889a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	603b      	str	r3, [r7, #0]
}
 8008896:	bf00      	nop
 8008898:	e7fe      	b.n	8008898 <vPortValidateInterruptPriority+0x60>
	}
 800889a:	bf00      	nop
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	e000e3f0 	.word	0xe000e3f0
 80088ac:	2000fa28 	.word	0x2000fa28
 80088b0:	e000ed0c 	.word	0xe000ed0c
 80088b4:	2000fa2c 	.word	0x2000fa2c

080088b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08a      	sub	sp, #40	; 0x28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088c0:	2300      	movs	r3, #0
 80088c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088c4:	f7ff f8e4 	bl	8007a90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088c8:	4b5b      	ldr	r3, [pc, #364]	; (8008a38 <pvPortMalloc+0x180>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088d0:	f000 f920 	bl	8008b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088d4:	4b59      	ldr	r3, [pc, #356]	; (8008a3c <pvPortMalloc+0x184>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4013      	ands	r3, r2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f040 8093 	bne.w	8008a08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01d      	beq.n	8008924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80088e8:	2208      	movs	r2, #8
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4413      	add	r3, r2
 80088ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f003 0307 	and.w	r3, r3, #7
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d014      	beq.n	8008924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f023 0307 	bic.w	r3, r3, #7
 8008900:	3308      	adds	r3, #8
 8008902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00a      	beq.n	8008924 <pvPortMalloc+0x6c>
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	617b      	str	r3, [r7, #20]
}
 8008920:	bf00      	nop
 8008922:	e7fe      	b.n	8008922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d06e      	beq.n	8008a08 <pvPortMalloc+0x150>
 800892a:	4b45      	ldr	r3, [pc, #276]	; (8008a40 <pvPortMalloc+0x188>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	429a      	cmp	r2, r3
 8008932:	d869      	bhi.n	8008a08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008934:	4b43      	ldr	r3, [pc, #268]	; (8008a44 <pvPortMalloc+0x18c>)
 8008936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008938:	4b42      	ldr	r3, [pc, #264]	; (8008a44 <pvPortMalloc+0x18c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800893e:	e004      	b.n	800894a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	429a      	cmp	r2, r3
 8008952:	d903      	bls.n	800895c <pvPortMalloc+0xa4>
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1f1      	bne.n	8008940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800895c:	4b36      	ldr	r3, [pc, #216]	; (8008a38 <pvPortMalloc+0x180>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008962:	429a      	cmp	r2, r3
 8008964:	d050      	beq.n	8008a08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2208      	movs	r2, #8
 800896c:	4413      	add	r3, r2
 800896e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	1ad2      	subs	r2, r2, r3
 8008980:	2308      	movs	r3, #8
 8008982:	005b      	lsls	r3, r3, #1
 8008984:	429a      	cmp	r2, r3
 8008986:	d91f      	bls.n	80089c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4413      	add	r3, r2
 800898e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00a      	beq.n	80089b0 <pvPortMalloc+0xf8>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	613b      	str	r3, [r7, #16]
}
 80089ac:	bf00      	nop
 80089ae:	e7fe      	b.n	80089ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	1ad2      	subs	r2, r2, r3
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089c2:	69b8      	ldr	r0, [r7, #24]
 80089c4:	f000 f908 	bl	8008bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089c8:	4b1d      	ldr	r3, [pc, #116]	; (8008a40 <pvPortMalloc+0x188>)
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	4a1b      	ldr	r2, [pc, #108]	; (8008a40 <pvPortMalloc+0x188>)
 80089d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089d6:	4b1a      	ldr	r3, [pc, #104]	; (8008a40 <pvPortMalloc+0x188>)
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	4b1b      	ldr	r3, [pc, #108]	; (8008a48 <pvPortMalloc+0x190>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d203      	bcs.n	80089ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089e2:	4b17      	ldr	r3, [pc, #92]	; (8008a40 <pvPortMalloc+0x188>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a18      	ldr	r2, [pc, #96]	; (8008a48 <pvPortMalloc+0x190>)
 80089e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <pvPortMalloc+0x184>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	431a      	orrs	r2, r3
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	2200      	movs	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80089fe:	4b13      	ldr	r3, [pc, #76]	; (8008a4c <pvPortMalloc+0x194>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3301      	adds	r3, #1
 8008a04:	4a11      	ldr	r2, [pc, #68]	; (8008a4c <pvPortMalloc+0x194>)
 8008a06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a08:	f7ff f850 	bl	8007aac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	f003 0307 	and.w	r3, r3, #7
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00a      	beq.n	8008a2c <pvPortMalloc+0x174>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	60fb      	str	r3, [r7, #12]
}
 8008a28:	bf00      	nop
 8008a2a:	e7fe      	b.n	8008a2a <pvPortMalloc+0x172>
	return pvReturn;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3728      	adds	r7, #40	; 0x28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20010bcc 	.word	0x20010bcc
 8008a3c:	20010be0 	.word	0x20010be0
 8008a40:	20010bd0 	.word	0x20010bd0
 8008a44:	20010bc4 	.word	0x20010bc4
 8008a48:	20010bd4 	.word	0x20010bd4
 8008a4c:	20010bd8 	.word	0x20010bd8

08008a50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d04d      	beq.n	8008afe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a62:	2308      	movs	r3, #8
 8008a64:	425b      	negs	r3, r3
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	4413      	add	r3, r2
 8008a6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	4b24      	ldr	r3, [pc, #144]	; (8008b08 <vPortFree+0xb8>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4013      	ands	r3, r2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10a      	bne.n	8008a94 <vPortFree+0x44>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	60fb      	str	r3, [r7, #12]
}
 8008a90:	bf00      	nop
 8008a92:	e7fe      	b.n	8008a92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00a      	beq.n	8008ab2 <vPortFree+0x62>
	__asm volatile
 8008a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	60bb      	str	r3, [r7, #8]
}
 8008aae:	bf00      	nop
 8008ab0:	e7fe      	b.n	8008ab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	4b14      	ldr	r3, [pc, #80]	; (8008b08 <vPortFree+0xb8>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4013      	ands	r3, r2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d01e      	beq.n	8008afe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d11a      	bne.n	8008afe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	4b0e      	ldr	r3, [pc, #56]	; (8008b08 <vPortFree+0xb8>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	43db      	mvns	r3, r3
 8008ad2:	401a      	ands	r2, r3
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ad8:	f7fe ffda 	bl	8007a90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <vPortFree+0xbc>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	4a09      	ldr	r2, [pc, #36]	; (8008b0c <vPortFree+0xbc>)
 8008ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008aea:	6938      	ldr	r0, [r7, #16]
 8008aec:	f000 f874 	bl	8008bd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008af0:	4b07      	ldr	r3, [pc, #28]	; (8008b10 <vPortFree+0xc0>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3301      	adds	r3, #1
 8008af6:	4a06      	ldr	r2, [pc, #24]	; (8008b10 <vPortFree+0xc0>)
 8008af8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008afa:	f7fe ffd7 	bl	8007aac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008afe:	bf00      	nop
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20010be0 	.word	0x20010be0
 8008b0c:	20010bd0 	.word	0x20010bd0
 8008b10:	20010bdc 	.word	0x20010bdc

08008b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b1a:	f241 1394 	movw	r3, #4500	; 0x1194
 8008b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b20:	4b27      	ldr	r3, [pc, #156]	; (8008bc0 <prvHeapInit+0xac>)
 8008b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f003 0307 	and.w	r3, r3, #7
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00c      	beq.n	8008b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3307      	adds	r3, #7
 8008b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0307 	bic.w	r3, r3, #7
 8008b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	4a1f      	ldr	r2, [pc, #124]	; (8008bc0 <prvHeapInit+0xac>)
 8008b44:	4413      	add	r3, r2
 8008b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b4c:	4a1d      	ldr	r2, [pc, #116]	; (8008bc4 <prvHeapInit+0xb0>)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b52:	4b1c      	ldr	r3, [pc, #112]	; (8008bc4 <prvHeapInit+0xb0>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b60:	2208      	movs	r2, #8
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	1a9b      	subs	r3, r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0307 	bic.w	r3, r3, #7
 8008b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4a15      	ldr	r2, [pc, #84]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b76:	4b14      	ldr	r3, [pc, #80]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b7e:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	1ad2      	subs	r2, r2, r3
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b94:	4b0c      	ldr	r3, [pc, #48]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	4a0a      	ldr	r2, [pc, #40]	; (8008bcc <prvHeapInit+0xb8>)
 8008ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	4a09      	ldr	r2, [pc, #36]	; (8008bd0 <prvHeapInit+0xbc>)
 8008baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bac:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <prvHeapInit+0xc0>)
 8008bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bb2:	601a      	str	r2, [r3, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	2000fa30 	.word	0x2000fa30
 8008bc4:	20010bc4 	.word	0x20010bc4
 8008bc8:	20010bcc 	.word	0x20010bcc
 8008bcc:	20010bd4 	.word	0x20010bd4
 8008bd0:	20010bd0 	.word	0x20010bd0
 8008bd4:	20010be0 	.word	0x20010be0

08008bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008be0:	4b28      	ldr	r3, [pc, #160]	; (8008c84 <prvInsertBlockIntoFreeList+0xac>)
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e002      	b.n	8008bec <prvInsertBlockIntoFreeList+0x14>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d8f7      	bhi.n	8008be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	4413      	add	r3, r2
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d108      	bne.n	8008c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	441a      	add	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	441a      	add	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d118      	bne.n	8008c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	4b15      	ldr	r3, [pc, #84]	; (8008c88 <prvInsertBlockIntoFreeList+0xb0>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d00d      	beq.n	8008c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	441a      	add	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	e008      	b.n	8008c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c56:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <prvInsertBlockIntoFreeList+0xb0>)
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	e003      	b.n	8008c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d002      	beq.n	8008c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c76:	bf00      	nop
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20010bc4 	.word	0x20010bc4
 8008c88:	20010bcc 	.word	0x20010bcc

08008c8c <arm_max_f32>:
 8008c8c:	f101 3cff 	add.w	ip, r1, #4294967295
 8008c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c92:	4607      	mov	r7, r0
 8008c94:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8008c98:	ecf7 7a01 	vldmia	r7!, {s15}
 8008c9c:	d060      	beq.n	8008d60 <arm_max_f32+0xd4>
 8008c9e:	2400      	movs	r4, #0
 8008ca0:	3014      	adds	r0, #20
 8008ca2:	4625      	mov	r5, r4
 8008ca4:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8008ca8:	ed10 7a04 	vldr	s14, [r0, #-16]
 8008cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb4:	bf48      	it	mi
 8008cb6:	eef0 7a47 	vmovmi.f32	s15, s14
 8008cba:	ed10 7a03 	vldr	s14, [r0, #-12]
 8008cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cc2:	bf48      	it	mi
 8008cc4:	1c65      	addmi	r5, r4, #1
 8008cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cca:	bf48      	it	mi
 8008ccc:	eef0 7a47 	vmovmi.f32	s15, s14
 8008cd0:	ed10 7a02 	vldr	s14, [r0, #-8]
 8008cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cd8:	bf48      	it	mi
 8008cda:	1ca5      	addmi	r5, r4, #2
 8008cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce0:	bf48      	it	mi
 8008ce2:	eef0 7a47 	vmovmi.f32	s15, s14
 8008ce6:	ed10 7a01 	vldr	s14, [r0, #-4]
 8008cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cee:	bf48      	it	mi
 8008cf0:	1ce5      	addmi	r5, r4, #3
 8008cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf6:	f104 0404 	add.w	r4, r4, #4
 8008cfa:	bf44      	itt	mi
 8008cfc:	eef0 7a47 	vmovmi.f32	s15, s14
 8008d00:	4625      	movmi	r5, r4
 8008d02:	42a6      	cmp	r6, r4
 8008d04:	f100 0010 	add.w	r0, r0, #16
 8008d08:	d1ce      	bne.n	8008ca8 <arm_max_f32+0x1c>
 8008d0a:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8008d0e:	f01c 0003 	ands.w	r0, ip, #3
 8008d12:	d021      	beq.n	8008d58 <arm_max_f32+0xcc>
 8008d14:	ed97 7a00 	vldr	s14, [r7]
 8008d18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d20:	bfc4      	itt	gt
 8008d22:	eef0 7a47 	vmovgt.f32	s15, s14
 8008d26:	1a0d      	subgt	r5, r1, r0
 8008d28:	3801      	subs	r0, #1
 8008d2a:	d015      	beq.n	8008d58 <arm_max_f32+0xcc>
 8008d2c:	ed97 7a01 	vldr	s14, [r7, #4]
 8008d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d38:	bf44      	itt	mi
 8008d3a:	eef0 7a47 	vmovmi.f32	s15, s14
 8008d3e:	1a0d      	submi	r5, r1, r0
 8008d40:	2801      	cmp	r0, #1
 8008d42:	d009      	beq.n	8008d58 <arm_max_f32+0xcc>
 8008d44:	ed97 7a02 	vldr	s14, [r7, #8]
 8008d48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d50:	bfc4      	itt	gt
 8008d52:	eef0 7a47 	vmovgt.f32	s15, s14
 8008d56:	4665      	movgt	r5, ip
 8008d58:	edc2 7a00 	vstr	s15, [r2]
 8008d5c:	601d      	str	r5, [r3, #0]
 8008d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d60:	4675      	mov	r5, lr
 8008d62:	e7d4      	b.n	8008d0e <arm_max_f32+0x82>

08008d64 <arm_rfft_32_fast_init_f32>:
 8008d64:	b178      	cbz	r0, 8008d86 <arm_rfft_32_fast_init_f32+0x22>
 8008d66:	b430      	push	{r4, r5}
 8008d68:	4908      	ldr	r1, [pc, #32]	; (8008d8c <arm_rfft_32_fast_init_f32+0x28>)
 8008d6a:	4a09      	ldr	r2, [pc, #36]	; (8008d90 <arm_rfft_32_fast_init_f32+0x2c>)
 8008d6c:	2310      	movs	r3, #16
 8008d6e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008d72:	8003      	strh	r3, [r0, #0]
 8008d74:	2520      	movs	r5, #32
 8008d76:	2414      	movs	r4, #20
 8008d78:	4b06      	ldr	r3, [pc, #24]	; (8008d94 <arm_rfft_32_fast_init_f32+0x30>)
 8008d7a:	8205      	strh	r5, [r0, #16]
 8008d7c:	8184      	strh	r4, [r0, #12]
 8008d7e:	6143      	str	r3, [r0, #20]
 8008d80:	bc30      	pop	{r4, r5}
 8008d82:	2000      	movs	r0, #0
 8008d84:	4770      	bx	lr
 8008d86:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8a:	4770      	bx	lr
 8008d8c:	0800f5a4 	.word	0x0800f5a4
 8008d90:	080146e0 	.word	0x080146e0
 8008d94:	0801d460 	.word	0x0801d460

08008d98 <arm_rfft_64_fast_init_f32>:
 8008d98:	b178      	cbz	r0, 8008dba <arm_rfft_64_fast_init_f32+0x22>
 8008d9a:	b430      	push	{r4, r5}
 8008d9c:	4908      	ldr	r1, [pc, #32]	; (8008dc0 <arm_rfft_64_fast_init_f32+0x28>)
 8008d9e:	4a09      	ldr	r2, [pc, #36]	; (8008dc4 <arm_rfft_64_fast_init_f32+0x2c>)
 8008da0:	2320      	movs	r3, #32
 8008da2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008da6:	8003      	strh	r3, [r0, #0]
 8008da8:	2540      	movs	r5, #64	; 0x40
 8008daa:	2430      	movs	r4, #48	; 0x30
 8008dac:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <arm_rfft_64_fast_init_f32+0x30>)
 8008dae:	8205      	strh	r5, [r0, #16]
 8008db0:	8184      	strh	r4, [r0, #12]
 8008db2:	6143      	str	r3, [r0, #20]
 8008db4:	bc30      	pop	{r4, r5}
 8008db6:	2000      	movs	r0, #0
 8008db8:	4770      	bx	lr
 8008dba:	f04f 30ff 	mov.w	r0, #4294967295
 8008dbe:	4770      	bx	lr
 8008dc0:	080116fc 	.word	0x080116fc
 8008dc4:	08018f60 	.word	0x08018f60
 8008dc8:	08021ce0 	.word	0x08021ce0

08008dcc <arm_rfft_256_fast_init_f32>:
 8008dcc:	b180      	cbz	r0, 8008df0 <arm_rfft_256_fast_init_f32+0x24>
 8008dce:	b430      	push	{r4, r5}
 8008dd0:	4909      	ldr	r1, [pc, #36]	; (8008df8 <arm_rfft_256_fast_init_f32+0x2c>)
 8008dd2:	4a0a      	ldr	r2, [pc, #40]	; (8008dfc <arm_rfft_256_fast_init_f32+0x30>)
 8008dd4:	2380      	movs	r3, #128	; 0x80
 8008dd6:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008dda:	8003      	strh	r3, [r0, #0]
 8008ddc:	f44f 7580 	mov.w	r5, #256	; 0x100
 8008de0:	24d0      	movs	r4, #208	; 0xd0
 8008de2:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <arm_rfft_256_fast_init_f32+0x34>)
 8008de4:	8205      	strh	r5, [r0, #16]
 8008de6:	8184      	strh	r4, [r0, #12]
 8008de8:	6143      	str	r3, [r0, #20]
 8008dea:	bc30      	pop	{r4, r5}
 8008dec:	2000      	movs	r0, #0
 8008dee:	4770      	bx	lr
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	0800f404 	.word	0x0800f404
 8008dfc:	080142e0 	.word	0x080142e0
 8008e00:	0801d060 	.word	0x0801d060

08008e04 <arm_rfft_512_fast_init_f32>:
 8008e04:	b190      	cbz	r0, 8008e2c <arm_rfft_512_fast_init_f32+0x28>
 8008e06:	b430      	push	{r4, r5}
 8008e08:	490a      	ldr	r1, [pc, #40]	; (8008e34 <arm_rfft_512_fast_init_f32+0x30>)
 8008e0a:	4a0b      	ldr	r2, [pc, #44]	; (8008e38 <arm_rfft_512_fast_init_f32+0x34>)
 8008e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e10:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008e14:	8003      	strh	r3, [r0, #0]
 8008e16:	f44f 7500 	mov.w	r5, #512	; 0x200
 8008e1a:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8008e1e:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <arm_rfft_512_fast_init_f32+0x38>)
 8008e20:	8205      	strh	r5, [r0, #16]
 8008e22:	8184      	strh	r4, [r0, #12]
 8008e24:	6143      	str	r3, [r0, #20]
 8008e26:	bc30      	pop	{r4, r5}
 8008e28:	2000      	movs	r0, #0
 8008e2a:	4770      	bx	lr
 8008e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	0801138c 	.word	0x0801138c
 8008e38:	08018760 	.word	0x08018760
 8008e3c:	080214e0 	.word	0x080214e0

08008e40 <arm_rfft_1024_fast_init_f32>:
 8008e40:	b190      	cbz	r0, 8008e68 <arm_rfft_1024_fast_init_f32+0x28>
 8008e42:	b430      	push	{r4, r5}
 8008e44:	490a      	ldr	r1, [pc, #40]	; (8008e70 <arm_rfft_1024_fast_init_f32+0x30>)
 8008e46:	4a0b      	ldr	r2, [pc, #44]	; (8008e74 <arm_rfft_1024_fast_init_f32+0x34>)
 8008e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e4c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008e50:	8003      	strh	r3, [r0, #0]
 8008e52:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8008e56:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8008e5a:	4b07      	ldr	r3, [pc, #28]	; (8008e78 <arm_rfft_1024_fast_init_f32+0x38>)
 8008e5c:	8205      	strh	r5, [r0, #16]
 8008e5e:	8184      	strh	r4, [r0, #12]
 8008e60:	6143      	str	r3, [r0, #20]
 8008e62:	bc30      	pop	{r4, r5}
 8008e64:	2000      	movs	r0, #0
 8008e66:	4770      	bx	lr
 8008e68:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	0801175c 	.word	0x0801175c
 8008e74:	08019060 	.word	0x08019060
 8008e78:	0801a060 	.word	0x0801a060

08008e7c <arm_rfft_2048_fast_init_f32>:
 8008e7c:	b190      	cbz	r0, 8008ea4 <arm_rfft_2048_fast_init_f32+0x28>
 8008e7e:	b430      	push	{r4, r5}
 8008e80:	490a      	ldr	r1, [pc, #40]	; (8008eac <arm_rfft_2048_fast_init_f32+0x30>)
 8008e82:	4a0b      	ldr	r2, [pc, #44]	; (8008eb0 <arm_rfft_2048_fast_init_f32+0x34>)
 8008e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e88:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008e8c:	8003      	strh	r3, [r0, #0]
 8008e8e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8008e92:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8008e96:	4b07      	ldr	r3, [pc, #28]	; (8008eb4 <arm_rfft_2048_fast_init_f32+0x38>)
 8008e98:	8205      	strh	r5, [r0, #16]
 8008e9a:	8184      	strh	r4, [r0, #12]
 8008e9c:	6143      	str	r3, [r0, #20]
 8008e9e:	bc30      	pop	{r4, r5}
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	4770      	bx	lr
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	0800e5f4 	.word	0x0800e5f4
 8008eb0:	080122e0 	.word	0x080122e0
 8008eb4:	0801b060 	.word	0x0801b060

08008eb8 <arm_rfft_4096_fast_init_f32>:
 8008eb8:	b190      	cbz	r0, 8008ee0 <arm_rfft_4096_fast_init_f32+0x28>
 8008eba:	b430      	push	{r4, r5}
 8008ebc:	490a      	ldr	r1, [pc, #40]	; (8008ee8 <arm_rfft_4096_fast_init_f32+0x30>)
 8008ebe:	4a0b      	ldr	r2, [pc, #44]	; (8008eec <arm_rfft_4096_fast_init_f32+0x34>)
 8008ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ec4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8008ec8:	8003      	strh	r3, [r0, #0]
 8008eca:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8008ece:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8008ed2:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <arm_rfft_4096_fast_init_f32+0x38>)
 8008ed4:	8205      	strh	r5, [r0, #16]
 8008ed6:	8184      	strh	r4, [r0, #12]
 8008ed8:	6143      	str	r3, [r0, #20]
 8008eda:	bc30      	pop	{r4, r5}
 8008edc:	2000      	movs	r0, #0
 8008ede:	4770      	bx	lr
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	0800f5cc 	.word	0x0800f5cc
 8008eec:	08014760 	.word	0x08014760
 8008ef0:	0801d4e0 	.word	0x0801d4e0

08008ef4 <arm_rfft_fast_init_f32>:
 8008ef4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008ef8:	d01f      	beq.n	8008f3a <arm_rfft_fast_init_f32+0x46>
 8008efa:	d90b      	bls.n	8008f14 <arm_rfft_fast_init_f32+0x20>
 8008efc:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8008f00:	d019      	beq.n	8008f36 <arm_rfft_fast_init_f32+0x42>
 8008f02:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008f06:	d012      	beq.n	8008f2e <arm_rfft_fast_init_f32+0x3a>
 8008f08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008f0c:	d00d      	beq.n	8008f2a <arm_rfft_fast_init_f32+0x36>
 8008f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f12:	4770      	bx	lr
 8008f14:	2940      	cmp	r1, #64	; 0x40
 8008f16:	d00c      	beq.n	8008f32 <arm_rfft_fast_init_f32+0x3e>
 8008f18:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008f1c:	d003      	beq.n	8008f26 <arm_rfft_fast_init_f32+0x32>
 8008f1e:	2920      	cmp	r1, #32
 8008f20:	d1f5      	bne.n	8008f0e <arm_rfft_fast_init_f32+0x1a>
 8008f22:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <arm_rfft_fast_init_f32+0x4c>)
 8008f24:	4718      	bx	r3
 8008f26:	4b07      	ldr	r3, [pc, #28]	; (8008f44 <arm_rfft_fast_init_f32+0x50>)
 8008f28:	4718      	bx	r3
 8008f2a:	4b07      	ldr	r3, [pc, #28]	; (8008f48 <arm_rfft_fast_init_f32+0x54>)
 8008f2c:	4718      	bx	r3
 8008f2e:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <arm_rfft_fast_init_f32+0x58>)
 8008f30:	4718      	bx	r3
 8008f32:	4b07      	ldr	r3, [pc, #28]	; (8008f50 <arm_rfft_fast_init_f32+0x5c>)
 8008f34:	e7f6      	b.n	8008f24 <arm_rfft_fast_init_f32+0x30>
 8008f36:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <arm_rfft_fast_init_f32+0x60>)
 8008f38:	e7f4      	b.n	8008f24 <arm_rfft_fast_init_f32+0x30>
 8008f3a:	4b07      	ldr	r3, [pc, #28]	; (8008f58 <arm_rfft_fast_init_f32+0x64>)
 8008f3c:	e7f2      	b.n	8008f24 <arm_rfft_fast_init_f32+0x30>
 8008f3e:	bf00      	nop
 8008f40:	08008d65 	.word	0x08008d65
 8008f44:	08008dcd 	.word	0x08008dcd
 8008f48:	08008e41 	.word	0x08008e41
 8008f4c:	08008eb9 	.word	0x08008eb9
 8008f50:	08008d99 	.word	0x08008d99
 8008f54:	08008e7d 	.word	0x08008e7d
 8008f58:	08008e05 	.word	0x08008e05

08008f5c <stage_rfft_f32>:
 8008f5c:	b410      	push	{r4}
 8008f5e:	edd1 7a00 	vldr	s15, [r1]
 8008f62:	ed91 7a01 	vldr	s14, [r1, #4]
 8008f66:	8804      	ldrh	r4, [r0, #0]
 8008f68:	6940      	ldr	r0, [r0, #20]
 8008f6a:	ee37 7a07 	vadd.f32	s14, s14, s14
 8008f6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008f72:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8008f76:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008f7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f7e:	3c01      	subs	r4, #1
 8008f80:	ee26 7a84 	vmul.f32	s14, s13, s8
 8008f84:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008f88:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8008f8c:	ed82 7a00 	vstr	s14, [r2]
 8008f90:	edc2 7a01 	vstr	s15, [r2, #4]
 8008f94:	3010      	adds	r0, #16
 8008f96:	3210      	adds	r2, #16
 8008f98:	3b08      	subs	r3, #8
 8008f9a:	3110      	adds	r1, #16
 8008f9c:	ed11 5a02 	vldr	s10, [r1, #-8]
 8008fa0:	ed93 7a02 	vldr	s14, [r3, #8]
 8008fa4:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008fa8:	edd3 4a03 	vldr	s9, [r3, #12]
 8008fac:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008fb0:	ed10 6a01 	vldr	s12, [r0, #-4]
 8008fb4:	ee77 5a45 	vsub.f32	s11, s14, s10
 8008fb8:	ee37 7a05 	vadd.f32	s14, s14, s10
 8008fbc:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8008fc0:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8008fc4:	ee66 5a25 	vmul.f32	s11, s12, s11
 8008fc8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008fcc:	ee37 7a23 	vadd.f32	s14, s14, s7
 8008fd0:	ee66 6a85 	vmul.f32	s13, s13, s10
 8008fd4:	ee26 6a05 	vmul.f32	s12, s12, s10
 8008fd8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008fdc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008fe0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008fe4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008fe8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008fec:	3c01      	subs	r4, #1
 8008fee:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008ff2:	ed42 7a01 	vstr	s15, [r2, #-4]
 8008ff6:	f1a3 0308 	sub.w	r3, r3, #8
 8008ffa:	f101 0108 	add.w	r1, r1, #8
 8008ffe:	f100 0008 	add.w	r0, r0, #8
 8009002:	f102 0208 	add.w	r2, r2, #8
 8009006:	d1c9      	bne.n	8008f9c <stage_rfft_f32+0x40>
 8009008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop

08009010 <merge_rfft_f32>:
 8009010:	b410      	push	{r4}
 8009012:	edd1 7a00 	vldr	s15, [r1]
 8009016:	edd1 6a01 	vldr	s13, [r1, #4]
 800901a:	8804      	ldrh	r4, [r0, #0]
 800901c:	6940      	ldr	r0, [r0, #20]
 800901e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009022:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009026:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800902a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800902e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009032:	3c01      	subs	r4, #1
 8009034:	ed82 7a00 	vstr	s14, [r2]
 8009038:	edc2 7a01 	vstr	s15, [r2, #4]
 800903c:	b3dc      	cbz	r4, 80090b6 <merge_rfft_f32+0xa6>
 800903e:	00e3      	lsls	r3, r4, #3
 8009040:	3b08      	subs	r3, #8
 8009042:	440b      	add	r3, r1
 8009044:	3010      	adds	r0, #16
 8009046:	3210      	adds	r2, #16
 8009048:	3110      	adds	r1, #16
 800904a:	ed11 5a02 	vldr	s10, [r1, #-8]
 800904e:	ed93 7a02 	vldr	s14, [r3, #8]
 8009052:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009056:	edd3 4a03 	vldr	s9, [r3, #12]
 800905a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800905e:	ed10 6a01 	vldr	s12, [r0, #-4]
 8009062:	ee75 5a47 	vsub.f32	s11, s10, s14
 8009066:	ee37 7a05 	vadd.f32	s14, s14, s10
 800906a:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800906e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009072:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009076:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800907a:	ee37 7a63 	vsub.f32	s14, s14, s7
 800907e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009082:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009086:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800908a:	ee37 7a46 	vsub.f32	s14, s14, s12
 800908e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009092:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009096:	ee67 7a84 	vmul.f32	s15, s15, s8
 800909a:	3c01      	subs	r4, #1
 800909c:	ed02 7a02 	vstr	s14, [r2, #-8]
 80090a0:	ed42 7a01 	vstr	s15, [r2, #-4]
 80090a4:	f1a3 0308 	sub.w	r3, r3, #8
 80090a8:	f101 0108 	add.w	r1, r1, #8
 80090ac:	f100 0008 	add.w	r0, r0, #8
 80090b0:	f102 0208 	add.w	r2, r2, #8
 80090b4:	d1c9      	bne.n	800904a <merge_rfft_f32+0x3a>
 80090b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <arm_rfft_fast_f32>:
 80090bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c0:	8a05      	ldrh	r5, [r0, #16]
 80090c2:	086d      	lsrs	r5, r5, #1
 80090c4:	8005      	strh	r5, [r0, #0]
 80090c6:	4604      	mov	r4, r0
 80090c8:	4616      	mov	r6, r2
 80090ca:	461d      	mov	r5, r3
 80090cc:	b14b      	cbz	r3, 80090e2 <arm_rfft_fast_f32+0x26>
 80090ce:	f7ff ff9f 	bl	8009010 <merge_rfft_f32>
 80090d2:	462a      	mov	r2, r5
 80090d4:	4631      	mov	r1, r6
 80090d6:	4620      	mov	r0, r4
 80090d8:	2301      	movs	r3, #1
 80090da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090de:	f000 bb33 	b.w	8009748 <arm_cfft_f32>
 80090e2:	460f      	mov	r7, r1
 80090e4:	461a      	mov	r2, r3
 80090e6:	2301      	movs	r3, #1
 80090e8:	f000 fb2e 	bl	8009748 <arm_cfft_f32>
 80090ec:	4632      	mov	r2, r6
 80090ee:	4639      	mov	r1, r7
 80090f0:	4620      	mov	r0, r4
 80090f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090f6:	f7ff bf31 	b.w	8008f5c <stage_rfft_f32>
 80090fa:	bf00      	nop

080090fc <arm_cfft_radix8by2_f32>:
 80090fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009100:	ed2d 8b08 	vpush	{d8-d11}
 8009104:	4607      	mov	r7, r0
 8009106:	4608      	mov	r0, r1
 8009108:	f8b7 c000 	ldrh.w	ip, [r7]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8009112:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8009116:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800911a:	f000 80b0 	beq.w	800927e <arm_cfft_radix8by2_f32+0x182>
 800911e:	008c      	lsls	r4, r1, #2
 8009120:	3410      	adds	r4, #16
 8009122:	f100 0310 	add.w	r3, r0, #16
 8009126:	1906      	adds	r6, r0, r4
 8009128:	3210      	adds	r2, #16
 800912a:	4444      	add	r4, r8
 800912c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8009130:	f108 0510 	add.w	r5, r8, #16
 8009134:	ed15 2a04 	vldr	s4, [r5, #-16]
 8009138:	ed55 2a03 	vldr	s5, [r5, #-12]
 800913c:	ed54 4a04 	vldr	s9, [r4, #-16]
 8009140:	ed14 4a03 	vldr	s8, [r4, #-12]
 8009144:	ed14 6a02 	vldr	s12, [r4, #-8]
 8009148:	ed54 5a01 	vldr	s11, [r4, #-4]
 800914c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8009150:	ed15 0a02 	vldr	s0, [r5, #-8]
 8009154:	ed55 0a01 	vldr	s1, [r5, #-4]
 8009158:	ed56 6a04 	vldr	s13, [r6, #-16]
 800915c:	ed16 3a03 	vldr	s6, [r6, #-12]
 8009160:	ed13 7a03 	vldr	s14, [r3, #-12]
 8009164:	ed13 5a02 	vldr	s10, [r3, #-8]
 8009168:	ed53 7a01 	vldr	s15, [r3, #-4]
 800916c:	ed16 1a02 	vldr	s2, [r6, #-8]
 8009170:	ed56 1a01 	vldr	s3, [r6, #-4]
 8009174:	ee73 ba82 	vadd.f32	s23, s7, s4
 8009178:	ee37 ba22 	vadd.f32	s22, s14, s5
 800917c:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8009180:	ee33 9a04 	vadd.f32	s18, s6, s8
 8009184:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8009188:	ee75 aa00 	vadd.f32	s21, s10, s0
 800918c:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8009190:	ee71 8a06 	vadd.f32	s17, s2, s12
 8009194:	ed43 ba04 	vstr	s23, [r3, #-16]
 8009198:	ed03 ba03 	vstr	s22, [r3, #-12]
 800919c:	ed43 aa02 	vstr	s21, [r3, #-8]
 80091a0:	ed03 aa01 	vstr	s20, [r3, #-4]
 80091a4:	ed06 8a01 	vstr	s16, [r6, #-4]
 80091a8:	ed46 9a04 	vstr	s19, [r6, #-16]
 80091ac:	ed06 9a03 	vstr	s18, [r6, #-12]
 80091b0:	ed46 8a02 	vstr	s17, [r6, #-8]
 80091b4:	ee37 7a62 	vsub.f32	s14, s14, s5
 80091b8:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80091bc:	ee34 4a43 	vsub.f32	s8, s8, s6
 80091c0:	ed52 6a03 	vldr	s13, [r2, #-12]
 80091c4:	ed12 3a04 	vldr	s6, [r2, #-16]
 80091c8:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80091cc:	ee27 8a26 	vmul.f32	s16, s14, s13
 80091d0:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80091d4:	ee23 2a83 	vmul.f32	s4, s7, s6
 80091d8:	ee64 4a83 	vmul.f32	s9, s9, s6
 80091dc:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80091e0:	ee27 7a03 	vmul.f32	s14, s14, s6
 80091e4:	ee64 6a26 	vmul.f32	s13, s8, s13
 80091e8:	ee24 4a03 	vmul.f32	s8, s8, s6
 80091ec:	ee37 7a63 	vsub.f32	s14, s14, s7
 80091f0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80091f4:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80091f8:	ee32 3a08 	vadd.f32	s6, s4, s16
 80091fc:	ed05 7a03 	vstr	s14, [r5, #-12]
 8009200:	ed05 3a04 	vstr	s6, [r5, #-16]
 8009204:	ed04 4a04 	vstr	s8, [r4, #-16]
 8009208:	ed44 6a03 	vstr	s13, [r4, #-12]
 800920c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009210:	ee76 6a41 	vsub.f32	s13, s12, s2
 8009214:	ee35 5a40 	vsub.f32	s10, s10, s0
 8009218:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800921c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009220:	ed52 5a02 	vldr	s11, [r2, #-8]
 8009224:	ee67 3a87 	vmul.f32	s7, s15, s14
 8009228:	ee66 4a87 	vmul.f32	s9, s13, s14
 800922c:	ee25 4a25 	vmul.f32	s8, s10, s11
 8009230:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009234:	ee25 5a07 	vmul.f32	s10, s10, s14
 8009238:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800923c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009240:	ee26 6a25 	vmul.f32	s12, s12, s11
 8009244:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009248:	ee74 5a23 	vadd.f32	s11, s8, s7
 800924c:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8009250:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009254:	3310      	adds	r3, #16
 8009256:	4563      	cmp	r3, ip
 8009258:	ed45 5a02 	vstr	s11, [r5, #-8]
 800925c:	f106 0610 	add.w	r6, r6, #16
 8009260:	ed45 7a01 	vstr	s15, [r5, #-4]
 8009264:	f102 0210 	add.w	r2, r2, #16
 8009268:	ed04 6a02 	vstr	s12, [r4, #-8]
 800926c:	ed04 7a01 	vstr	s14, [r4, #-4]
 8009270:	f105 0510 	add.w	r5, r5, #16
 8009274:	f104 0410 	add.w	r4, r4, #16
 8009278:	f47f af5c 	bne.w	8009134 <arm_cfft_radix8by2_f32+0x38>
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	b28c      	uxth	r4, r1
 8009280:	4621      	mov	r1, r4
 8009282:	2302      	movs	r3, #2
 8009284:	f000 fd04 	bl	8009c90 <arm_radix8_butterfly_f32>
 8009288:	ecbd 8b08 	vpop	{d8-d11}
 800928c:	4621      	mov	r1, r4
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	4640      	mov	r0, r8
 8009292:	2302      	movs	r3, #2
 8009294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009298:	f000 bcfa 	b.w	8009c90 <arm_radix8_butterfly_f32>

0800929c <arm_cfft_radix8by4_f32>:
 800929c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a0:	ed2d 8b0a 	vpush	{d8-d12}
 80092a4:	b08d      	sub	sp, #52	; 0x34
 80092a6:	460d      	mov	r5, r1
 80092a8:	910b      	str	r1, [sp, #44]	; 0x2c
 80092aa:	8801      	ldrh	r1, [r0, #0]
 80092ac:	6842      	ldr	r2, [r0, #4]
 80092ae:	900a      	str	r0, [sp, #40]	; 0x28
 80092b0:	0849      	lsrs	r1, r1, #1
 80092b2:	008b      	lsls	r3, r1, #2
 80092b4:	18ee      	adds	r6, r5, r3
 80092b6:	18f0      	adds	r0, r6, r3
 80092b8:	edd0 5a00 	vldr	s11, [r0]
 80092bc:	edd5 7a00 	vldr	s15, [r5]
 80092c0:	ed96 7a00 	vldr	s14, [r6]
 80092c4:	edd0 3a01 	vldr	s7, [r0, #4]
 80092c8:	ed96 4a01 	vldr	s8, [r6, #4]
 80092cc:	ed95 5a01 	vldr	s10, [r5, #4]
 80092d0:	9008      	str	r0, [sp, #32]
 80092d2:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80092d6:	18c7      	adds	r7, r0, r3
 80092d8:	edd7 4a00 	vldr	s9, [r7]
 80092dc:	ed97 3a01 	vldr	s6, [r7, #4]
 80092e0:	9701      	str	r7, [sp, #4]
 80092e2:	ee77 6a06 	vadd.f32	s13, s14, s12
 80092e6:	462c      	mov	r4, r5
 80092e8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80092ec:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80092f0:	ee16 ca90 	vmov	ip, s13
 80092f4:	f844 cb08 	str.w	ip, [r4], #8
 80092f8:	ee75 6a23 	vadd.f32	s13, s10, s7
 80092fc:	edd6 5a01 	vldr	s11, [r6, #4]
 8009300:	edd7 2a01 	vldr	s5, [r7, #4]
 8009304:	9404      	str	r4, [sp, #16]
 8009306:	ee35 5a63 	vsub.f32	s10, s10, s7
 800930a:	ee74 3a27 	vadd.f32	s7, s8, s15
 800930e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8009312:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8009316:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800931a:	0849      	lsrs	r1, r1, #1
 800931c:	f102 0e08 	add.w	lr, r2, #8
 8009320:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8009324:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8009328:	9109      	str	r1, [sp, #36]	; 0x24
 800932a:	ee35 4a47 	vsub.f32	s8, s10, s14
 800932e:	f1a1 0902 	sub.w	r9, r1, #2
 8009332:	f8cd e00c 	str.w	lr, [sp, #12]
 8009336:	4631      	mov	r1, r6
 8009338:	ee13 ea90 	vmov	lr, s7
 800933c:	ee36 6a64 	vsub.f32	s12, s12, s9
 8009340:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8009344:	4604      	mov	r4, r0
 8009346:	edc5 5a01 	vstr	s11, [r5, #4]
 800934a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800934e:	f841 eb08 	str.w	lr, [r1], #8
 8009352:	ee34 5a24 	vadd.f32	s10, s8, s9
 8009356:	ee16 ea10 	vmov	lr, s12
 800935a:	ed86 5a01 	vstr	s10, [r6, #4]
 800935e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8009362:	f844 eb08 	str.w	lr, [r4], #8
 8009366:	ee77 7a83 	vadd.f32	s15, s15, s6
 800936a:	edc0 6a01 	vstr	s13, [r0, #4]
 800936e:	9405      	str	r4, [sp, #20]
 8009370:	4604      	mov	r4, r0
 8009372:	ee17 0a90 	vmov	r0, s15
 8009376:	9106      	str	r1, [sp, #24]
 8009378:	ee37 7a64 	vsub.f32	s14, s14, s9
 800937c:	f102 0110 	add.w	r1, r2, #16
 8009380:	46bc      	mov	ip, r7
 8009382:	9100      	str	r1, [sp, #0]
 8009384:	f847 0b08 	str.w	r0, [r7], #8
 8009388:	f102 0118 	add.w	r1, r2, #24
 800938c:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8009390:	9102      	str	r1, [sp, #8]
 8009392:	ed8c 7a01 	vstr	s14, [ip, #4]
 8009396:	9007      	str	r0, [sp, #28]
 8009398:	f000 8134 	beq.w	8009604 <arm_cfft_radix8by4_f32+0x368>
 800939c:	f102 0920 	add.w	r9, r2, #32
 80093a0:	f102 0830 	add.w	r8, r2, #48	; 0x30
 80093a4:	9a01      	ldr	r2, [sp, #4]
 80093a6:	f8dd a000 	ldr.w	sl, [sp]
 80093aa:	3b0c      	subs	r3, #12
 80093ac:	4683      	mov	fp, r0
 80093ae:	4463      	add	r3, ip
 80093b0:	f105 0e10 	add.w	lr, r5, #16
 80093b4:	f1a4 010c 	sub.w	r1, r4, #12
 80093b8:	f104 0510 	add.w	r5, r4, #16
 80093bc:	f1a6 0c0c 	sub.w	ip, r6, #12
 80093c0:	f1a2 040c 	sub.w	r4, r2, #12
 80093c4:	f106 0010 	add.w	r0, r6, #16
 80093c8:	3210      	adds	r2, #16
 80093ca:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80093ce:	ed55 5a02 	vldr	s11, [r5, #-8]
 80093d2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80093d6:	ed52 1a02 	vldr	s3, [r2, #-8]
 80093da:	ed55 6a01 	vldr	s13, [r5, #-4]
 80093de:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80093e2:	ed12 1a01 	vldr	s2, [r2, #-4]
 80093e6:	ed10 8a01 	vldr	s16, [r0, #-4]
 80093ea:	ee35 4a25 	vadd.f32	s8, s10, s11
 80093ee:	ee30 6a26 	vadd.f32	s12, s0, s13
 80093f2:	ee37 7a84 	vadd.f32	s14, s15, s8
 80093f6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80093fa:	ee37 7a21 	vadd.f32	s14, s14, s3
 80093fe:	ee75 5a65 	vsub.f32	s11, s10, s11
 8009402:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8009406:	ed10 7a01 	vldr	s14, [r0, #-4]
 800940a:	ed52 6a01 	vldr	s13, [r2, #-4]
 800940e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009412:	ee78 aa25 	vadd.f32	s21, s16, s11
 8009416:	ee37 7a26 	vadd.f32	s14, s14, s13
 800941a:	ee70 3a67 	vsub.f32	s7, s0, s15
 800941e:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8009422:	ed94 7a02 	vldr	s14, [r4, #8]
 8009426:	ed9c 2a02 	vldr	s4, [ip, #8]
 800942a:	ed91 ba02 	vldr	s22, [r1, #8]
 800942e:	edd3 9a02 	vldr	s19, [r3, #8]
 8009432:	edd4 2a01 	vldr	s5, [r4, #4]
 8009436:	ed9c 9a01 	vldr	s18, [ip, #4]
 800943a:	ed93 5a01 	vldr	s10, [r3, #4]
 800943e:	edd1 0a01 	vldr	s1, [r1, #4]
 8009442:	ee72 6a07 	vadd.f32	s13, s4, s14
 8009446:	ee32 2a47 	vsub.f32	s4, s4, s14
 800944a:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800944e:	ee79 4a22 	vadd.f32	s9, s18, s5
 8009452:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8009456:	ee79 2a62 	vsub.f32	s5, s18, s5
 800945a:	ed8c 7a02 	vstr	s14, [ip, #8]
 800945e:	ed91 7a01 	vldr	s14, [r1, #4]
 8009462:	edd3 8a01 	vldr	s17, [r3, #4]
 8009466:	ee34 7a87 	vadd.f32	s14, s9, s14
 800946a:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800946e:	ee37 7a28 	vadd.f32	s14, s14, s17
 8009472:	ee32 9a60 	vsub.f32	s18, s4, s1
 8009476:	ed8c 7a01 	vstr	s14, [ip, #4]
 800947a:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800947e:	ed1a aa02 	vldr	s20, [sl, #-8]
 8009482:	ee73 8a22 	vadd.f32	s17, s6, s5
 8009486:	ee39 9a05 	vadd.f32	s18, s18, s10
 800948a:	ee7a aac1 	vsub.f32	s21, s21, s2
 800948e:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009492:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8009496:	ee69 ba07 	vmul.f32	s23, s18, s14
 800949a:	ee6a aa87 	vmul.f32	s21, s21, s14
 800949e:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80094a2:	ee63 ca87 	vmul.f32	s25, s7, s14
 80094a6:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80094aa:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80094ae:	ee68 8a87 	vmul.f32	s17, s17, s14
 80094b2:	ee73 3aea 	vsub.f32	s7, s7, s21
 80094b6:	ee78 8a89 	vadd.f32	s17, s17, s18
 80094ba:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80094be:	ee3b aaca 	vsub.f32	s20, s23, s20
 80094c2:	ee34 4a67 	vsub.f32	s8, s8, s15
 80094c6:	ee76 6acb 	vsub.f32	s13, s13, s22
 80094ca:	ee36 6a48 	vsub.f32	s12, s12, s16
 80094ce:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80094d2:	ed00 7a02 	vstr	s14, [r0, #-8]
 80094d6:	ed40 3a01 	vstr	s7, [r0, #-4]
 80094da:	edc1 8a01 	vstr	s17, [r1, #4]
 80094de:	ed81 aa02 	vstr	s20, [r1, #8]
 80094e2:	ed59 3a04 	vldr	s7, [r9, #-16]
 80094e6:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80094ea:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80094ee:	ed59 6a03 	vldr	s13, [r9, #-12]
 80094f2:	ee34 4a61 	vsub.f32	s8, s8, s3
 80094f6:	ee36 6a41 	vsub.f32	s12, s12, s2
 80094fa:	ee67 8a63 	vnmul.f32	s17, s14, s7
 80094fe:	ee66 9a26 	vmul.f32	s19, s12, s13
 8009502:	ee24 9a23 	vmul.f32	s18, s8, s7
 8009506:	ee26 6a23 	vmul.f32	s12, s12, s7
 800950a:	ee24 4a26 	vmul.f32	s8, s8, s13
 800950e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009512:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8009516:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800951a:	ee36 6a44 	vsub.f32	s12, s12, s8
 800951e:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009522:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8009526:	ee79 3a29 	vadd.f32	s7, s18, s19
 800952a:	ee75 6a60 	vsub.f32	s13, s10, s1
 800952e:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8009532:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009536:	ed45 3a02 	vstr	s7, [r5, #-8]
 800953a:	ed05 6a01 	vstr	s12, [r5, #-4]
 800953e:	ed84 7a01 	vstr	s14, [r4, #4]
 8009542:	ed84 4a02 	vstr	s8, [r4, #8]
 8009546:	ee35 6a81 	vadd.f32	s12, s11, s2
 800954a:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800954e:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8009552:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8009556:	ee33 3a62 	vsub.f32	s6, s6, s5
 800955a:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800955e:	ee67 2a26 	vmul.f32	s5, s14, s13
 8009562:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8009566:	ee26 5a25 	vmul.f32	s10, s12, s11
 800956a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800956e:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009572:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009576:	ee63 6a26 	vmul.f32	s13, s6, s13
 800957a:	ee23 3a25 	vmul.f32	s6, s6, s11
 800957e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009582:	ee75 5a24 	vadd.f32	s11, s10, s9
 8009586:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800958a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800958e:	f1bb 0b01 	subs.w	fp, fp, #1
 8009592:	ed42 5a02 	vstr	s11, [r2, #-8]
 8009596:	ed42 7a01 	vstr	s15, [r2, #-4]
 800959a:	f10e 0e08 	add.w	lr, lr, #8
 800959e:	ed83 3a02 	vstr	s6, [r3, #8]
 80095a2:	ed83 7a01 	vstr	s14, [r3, #4]
 80095a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80095aa:	f10a 0a08 	add.w	sl, sl, #8
 80095ae:	f100 0008 	add.w	r0, r0, #8
 80095b2:	f1a1 0108 	sub.w	r1, r1, #8
 80095b6:	f109 0910 	add.w	r9, r9, #16
 80095ba:	f105 0508 	add.w	r5, r5, #8
 80095be:	f1a4 0408 	sub.w	r4, r4, #8
 80095c2:	f108 0818 	add.w	r8, r8, #24
 80095c6:	f102 0208 	add.w	r2, r2, #8
 80095ca:	f1a3 0308 	sub.w	r3, r3, #8
 80095ce:	f47f aefc 	bne.w	80093ca <arm_cfft_radix8by4_f32+0x12e>
 80095d2:	9907      	ldr	r1, [sp, #28]
 80095d4:	9800      	ldr	r0, [sp, #0]
 80095d6:	00cb      	lsls	r3, r1, #3
 80095d8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80095dc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80095e0:	9100      	str	r1, [sp, #0]
 80095e2:	9904      	ldr	r1, [sp, #16]
 80095e4:	4419      	add	r1, r3
 80095e6:	9104      	str	r1, [sp, #16]
 80095e8:	9903      	ldr	r1, [sp, #12]
 80095ea:	4419      	add	r1, r3
 80095ec:	9103      	str	r1, [sp, #12]
 80095ee:	9906      	ldr	r1, [sp, #24]
 80095f0:	4419      	add	r1, r3
 80095f2:	9106      	str	r1, [sp, #24]
 80095f4:	9905      	ldr	r1, [sp, #20]
 80095f6:	441f      	add	r7, r3
 80095f8:	4419      	add	r1, r3
 80095fa:	9b02      	ldr	r3, [sp, #8]
 80095fc:	9105      	str	r1, [sp, #20]
 80095fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009602:	9302      	str	r3, [sp, #8]
 8009604:	9904      	ldr	r1, [sp, #16]
 8009606:	9805      	ldr	r0, [sp, #20]
 8009608:	ed91 4a00 	vldr	s8, [r1]
 800960c:	edd0 6a00 	vldr	s13, [r0]
 8009610:	9b06      	ldr	r3, [sp, #24]
 8009612:	ed97 3a00 	vldr	s6, [r7]
 8009616:	edd3 7a00 	vldr	s15, [r3]
 800961a:	edd0 4a01 	vldr	s9, [r0, #4]
 800961e:	edd1 3a01 	vldr	s7, [r1, #4]
 8009622:	ed97 2a01 	vldr	s4, [r7, #4]
 8009626:	ed93 7a01 	vldr	s14, [r3, #4]
 800962a:	9a03      	ldr	r2, [sp, #12]
 800962c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8009630:	ee34 6a26 	vadd.f32	s12, s8, s13
 8009634:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8009638:	ee37 5a86 	vadd.f32	s10, s15, s12
 800963c:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8009640:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009644:	ee74 6a66 	vsub.f32	s13, s8, s13
 8009648:	ed81 5a00 	vstr	s10, [r1]
 800964c:	ed93 5a01 	vldr	s10, [r3, #4]
 8009650:	edd7 4a01 	vldr	s9, [r7, #4]
 8009654:	ee35 5a85 	vadd.f32	s10, s11, s10
 8009658:	ee37 4a26 	vadd.f32	s8, s14, s13
 800965c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009660:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8009664:	ed81 5a01 	vstr	s10, [r1, #4]
 8009668:	edd2 1a00 	vldr	s3, [r2]
 800966c:	edd2 2a01 	vldr	s5, [r2, #4]
 8009670:	ee34 5a83 	vadd.f32	s10, s9, s6
 8009674:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009678:	ee36 6a67 	vsub.f32	s12, s12, s15
 800967c:	ee64 4a21 	vmul.f32	s9, s8, s3
 8009680:	ee24 4a22 	vmul.f32	s8, s8, s5
 8009684:	ee65 2a22 	vmul.f32	s5, s10, s5
 8009688:	ee25 5a21 	vmul.f32	s10, s10, s3
 800968c:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8009690:	ee35 5a44 	vsub.f32	s10, s10, s8
 8009694:	edc3 2a00 	vstr	s5, [r3]
 8009698:	ed83 5a01 	vstr	s10, [r3, #4]
 800969c:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80096a0:	9b00      	ldr	r3, [sp, #0]
 80096a2:	ee36 6a43 	vsub.f32	s12, s12, s6
 80096a6:	ed93 4a01 	vldr	s8, [r3, #4]
 80096aa:	ed93 5a00 	vldr	s10, [r3]
 80096ae:	9b02      	ldr	r3, [sp, #8]
 80096b0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80096b4:	ee66 4a05 	vmul.f32	s9, s12, s10
 80096b8:	ee25 5a85 	vmul.f32	s10, s11, s10
 80096bc:	ee26 6a04 	vmul.f32	s12, s12, s8
 80096c0:	ee65 5a84 	vmul.f32	s11, s11, s8
 80096c4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80096c8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80096cc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80096d0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80096d4:	ed80 6a01 	vstr	s12, [r0, #4]
 80096d8:	edc0 5a00 	vstr	s11, [r0]
 80096dc:	edd3 5a01 	vldr	s11, [r3, #4]
 80096e0:	edd3 6a00 	vldr	s13, [r3]
 80096e4:	ee37 7a02 	vadd.f32	s14, s14, s4
 80096e8:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80096ec:	ee27 6a26 	vmul.f32	s12, s14, s13
 80096f0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80096f4:	ee27 7a25 	vmul.f32	s14, s14, s11
 80096f8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80096fc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009700:	ee76 7a27 	vadd.f32	s15, s12, s15
 8009704:	ed87 7a01 	vstr	s14, [r7, #4]
 8009708:	edc7 7a00 	vstr	s15, [r7]
 800970c:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8009710:	4621      	mov	r1, r4
 8009712:	686a      	ldr	r2, [r5, #4]
 8009714:	2304      	movs	r3, #4
 8009716:	f000 fabb 	bl	8009c90 <arm_radix8_butterfly_f32>
 800971a:	4630      	mov	r0, r6
 800971c:	4621      	mov	r1, r4
 800971e:	686a      	ldr	r2, [r5, #4]
 8009720:	2304      	movs	r3, #4
 8009722:	f000 fab5 	bl	8009c90 <arm_radix8_butterfly_f32>
 8009726:	9808      	ldr	r0, [sp, #32]
 8009728:	686a      	ldr	r2, [r5, #4]
 800972a:	4621      	mov	r1, r4
 800972c:	2304      	movs	r3, #4
 800972e:	f000 faaf 	bl	8009c90 <arm_radix8_butterfly_f32>
 8009732:	686a      	ldr	r2, [r5, #4]
 8009734:	9801      	ldr	r0, [sp, #4]
 8009736:	4621      	mov	r1, r4
 8009738:	2304      	movs	r3, #4
 800973a:	b00d      	add	sp, #52	; 0x34
 800973c:	ecbd 8b0a 	vpop	{d8-d12}
 8009740:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	f000 baa4 	b.w	8009c90 <arm_radix8_butterfly_f32>

08009748 <arm_cfft_f32>:
 8009748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800974c:	2a01      	cmp	r2, #1
 800974e:	4606      	mov	r6, r0
 8009750:	4617      	mov	r7, r2
 8009752:	460c      	mov	r4, r1
 8009754:	4698      	mov	r8, r3
 8009756:	8805      	ldrh	r5, [r0, #0]
 8009758:	d056      	beq.n	8009808 <arm_cfft_f32+0xc0>
 800975a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800975e:	d063      	beq.n	8009828 <arm_cfft_f32+0xe0>
 8009760:	d916      	bls.n	8009790 <arm_cfft_f32+0x48>
 8009762:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8009766:	d01a      	beq.n	800979e <arm_cfft_f32+0x56>
 8009768:	d947      	bls.n	80097fa <arm_cfft_f32+0xb2>
 800976a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800976e:	d05b      	beq.n	8009828 <arm_cfft_f32+0xe0>
 8009770:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8009774:	d105      	bne.n	8009782 <arm_cfft_f32+0x3a>
 8009776:	2301      	movs	r3, #1
 8009778:	6872      	ldr	r2, [r6, #4]
 800977a:	4629      	mov	r1, r5
 800977c:	4620      	mov	r0, r4
 800977e:	f000 fa87 	bl	8009c90 <arm_radix8_butterfly_f32>
 8009782:	f1b8 0f00 	cmp.w	r8, #0
 8009786:	d111      	bne.n	80097ac <arm_cfft_f32+0x64>
 8009788:	2f01      	cmp	r7, #1
 800978a:	d016      	beq.n	80097ba <arm_cfft_f32+0x72>
 800978c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009790:	2d20      	cmp	r5, #32
 8009792:	d049      	beq.n	8009828 <arm_cfft_f32+0xe0>
 8009794:	d935      	bls.n	8009802 <arm_cfft_f32+0xba>
 8009796:	2d40      	cmp	r5, #64	; 0x40
 8009798:	d0ed      	beq.n	8009776 <arm_cfft_f32+0x2e>
 800979a:	2d80      	cmp	r5, #128	; 0x80
 800979c:	d1f1      	bne.n	8009782 <arm_cfft_f32+0x3a>
 800979e:	4621      	mov	r1, r4
 80097a0:	4630      	mov	r0, r6
 80097a2:	f7ff fcab 	bl	80090fc <arm_cfft_radix8by2_f32>
 80097a6:	f1b8 0f00 	cmp.w	r8, #0
 80097aa:	d0ed      	beq.n	8009788 <arm_cfft_f32+0x40>
 80097ac:	68b2      	ldr	r2, [r6, #8]
 80097ae:	89b1      	ldrh	r1, [r6, #12]
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 f841 	bl	8009838 <arm_bitreversal_32>
 80097b6:	2f01      	cmp	r7, #1
 80097b8:	d1e8      	bne.n	800978c <arm_cfft_f32+0x44>
 80097ba:	ee07 5a90 	vmov	s15, r5
 80097be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80097ca:	2d00      	cmp	r5, #0
 80097cc:	d0de      	beq.n	800978c <arm_cfft_f32+0x44>
 80097ce:	f104 0108 	add.w	r1, r4, #8
 80097d2:	2300      	movs	r3, #0
 80097d4:	3301      	adds	r3, #1
 80097d6:	429d      	cmp	r5, r3
 80097d8:	f101 0108 	add.w	r1, r1, #8
 80097dc:	ed11 7a04 	vldr	s14, [r1, #-16]
 80097e0:	ed51 7a03 	vldr	s15, [r1, #-12]
 80097e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80097e8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80097ec:	ed01 7a04 	vstr	s14, [r1, #-16]
 80097f0:	ed41 7a03 	vstr	s15, [r1, #-12]
 80097f4:	d1ee      	bne.n	80097d4 <arm_cfft_f32+0x8c>
 80097f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097fa:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80097fe:	d0ba      	beq.n	8009776 <arm_cfft_f32+0x2e>
 8009800:	e7bf      	b.n	8009782 <arm_cfft_f32+0x3a>
 8009802:	2d10      	cmp	r5, #16
 8009804:	d0cb      	beq.n	800979e <arm_cfft_f32+0x56>
 8009806:	e7bc      	b.n	8009782 <arm_cfft_f32+0x3a>
 8009808:	b19d      	cbz	r5, 8009832 <arm_cfft_f32+0xea>
 800980a:	f101 030c 	add.w	r3, r1, #12
 800980e:	2200      	movs	r2, #0
 8009810:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009814:	3201      	adds	r2, #1
 8009816:	eef1 7a67 	vneg.f32	s15, s15
 800981a:	4295      	cmp	r5, r2
 800981c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8009820:	f103 0308 	add.w	r3, r3, #8
 8009824:	d1f4      	bne.n	8009810 <arm_cfft_f32+0xc8>
 8009826:	e798      	b.n	800975a <arm_cfft_f32+0x12>
 8009828:	4621      	mov	r1, r4
 800982a:	4630      	mov	r0, r6
 800982c:	f7ff fd36 	bl	800929c <arm_cfft_radix8by4_f32>
 8009830:	e7a7      	b.n	8009782 <arm_cfft_f32+0x3a>
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0aa      	beq.n	800978c <arm_cfft_f32+0x44>
 8009836:	e7b9      	b.n	80097ac <arm_cfft_f32+0x64>

08009838 <arm_bitreversal_32>:
 8009838:	b1e9      	cbz	r1, 8009876 <arm_bitreversal_32+0x3e>
 800983a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800983c:	2500      	movs	r5, #0
 800983e:	f102 0e02 	add.w	lr, r2, #2
 8009842:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8009846:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800984a:	08a4      	lsrs	r4, r4, #2
 800984c:	089b      	lsrs	r3, r3, #2
 800984e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8009852:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8009856:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800985a:	00a6      	lsls	r6, r4, #2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8009862:	3304      	adds	r3, #4
 8009864:	1d34      	adds	r4, r6, #4
 8009866:	3502      	adds	r5, #2
 8009868:	58c6      	ldr	r6, [r0, r3]
 800986a:	5907      	ldr	r7, [r0, r4]
 800986c:	50c7      	str	r7, [r0, r3]
 800986e:	428d      	cmp	r5, r1
 8009870:	5106      	str	r6, [r0, r4]
 8009872:	d3e6      	bcc.n	8009842 <arm_bitreversal_32+0xa>
 8009874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009876:	4770      	bx	lr

08009878 <arm_cmplx_mag_f32>:
 8009878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800987c:	ed2d 8b02 	vpush	{d8}
 8009880:	0897      	lsrs	r7, r2, #2
 8009882:	b084      	sub	sp, #16
 8009884:	d077      	beq.n	8009976 <arm_cmplx_mag_f32+0xfe>
 8009886:	f04f 0800 	mov.w	r8, #0
 800988a:	f100 0420 	add.w	r4, r0, #32
 800988e:	f101 0510 	add.w	r5, r1, #16
 8009892:	463e      	mov	r6, r7
 8009894:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8009898:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800989c:	ee20 0a00 	vmul.f32	s0, s0, s0
 80098a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80098a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80098a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80098ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b0:	f2c0 80c5 	blt.w	8009a3e <arm_cmplx_mag_f32+0x1c6>
 80098b4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80098b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098bc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80098c0:	f100 80cb 	bmi.w	8009a5a <arm_cmplx_mag_f32+0x1e2>
 80098c4:	ed05 8a04 	vstr	s16, [r5, #-16]
 80098c8:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 80098cc:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80098d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80098d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80098d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80098dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80098e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e4:	f2c0 80a8 	blt.w	8009a38 <arm_cmplx_mag_f32+0x1c0>
 80098e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80098ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098f0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80098f4:	f100 80a8 	bmi.w	8009a48 <arm_cmplx_mag_f32+0x1d0>
 80098f8:	ed05 8a03 	vstr	s16, [r5, #-12]
 80098fc:	ed14 0a04 	vldr	s0, [r4, #-16]
 8009900:	ed54 7a03 	vldr	s15, [r4, #-12]
 8009904:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009908:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800990c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009910:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009918:	f2c0 808b 	blt.w	8009a32 <arm_cmplx_mag_f32+0x1ba>
 800991c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009924:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009928:	f100 80a9 	bmi.w	8009a7e <arm_cmplx_mag_f32+0x206>
 800992c:	ed05 8a02 	vstr	s16, [r5, #-8]
 8009930:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009934:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009938:	ee20 0a00 	vmul.f32	s0, s0, s0
 800993c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009940:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009944:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994c:	db6e      	blt.n	8009a2c <arm_cmplx_mag_f32+0x1b4>
 800994e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009956:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800995a:	f100 8087 	bmi.w	8009a6c <arm_cmplx_mag_f32+0x1f4>
 800995e:	ed05 8a01 	vstr	s16, [r5, #-4]
 8009962:	3e01      	subs	r6, #1
 8009964:	f104 0420 	add.w	r4, r4, #32
 8009968:	f105 0510 	add.w	r5, r5, #16
 800996c:	d192      	bne.n	8009894 <arm_cmplx_mag_f32+0x1c>
 800996e:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8009972:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8009976:	f012 0203 	ands.w	r2, r2, #3
 800997a:	d052      	beq.n	8009a22 <arm_cmplx_mag_f32+0x1aa>
 800997c:	ed90 0a00 	vldr	s0, [r0]
 8009980:	edd0 7a01 	vldr	s15, [r0, #4]
 8009984:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009988:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800998c:	2300      	movs	r3, #0
 800998e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009992:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999a:	bfb8      	it	lt
 800999c:	600b      	strlt	r3, [r1, #0]
 800999e:	db08      	blt.n	80099b2 <arm_cmplx_mag_f32+0x13a>
 80099a0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80099a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80099ac:	d479      	bmi.n	8009aa2 <arm_cmplx_mag_f32+0x22a>
 80099ae:	ed81 8a00 	vstr	s16, [r1]
 80099b2:	3a01      	subs	r2, #1
 80099b4:	d035      	beq.n	8009a22 <arm_cmplx_mag_f32+0x1aa>
 80099b6:	ed90 0a02 	vldr	s0, [r0, #8]
 80099ba:	edd0 7a03 	vldr	s15, [r0, #12]
 80099be:	ee20 0a00 	vmul.f32	s0, s0, s0
 80099c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80099c6:	2300      	movs	r3, #0
 80099c8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80099cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80099d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099d4:	bfb8      	it	lt
 80099d6:	604b      	strlt	r3, [r1, #4]
 80099d8:	db08      	blt.n	80099ec <arm_cmplx_mag_f32+0x174>
 80099da:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80099de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80099e6:	d453      	bmi.n	8009a90 <arm_cmplx_mag_f32+0x218>
 80099e8:	ed81 8a01 	vstr	s16, [r1, #4]
 80099ec:	2a01      	cmp	r2, #1
 80099ee:	d018      	beq.n	8009a22 <arm_cmplx_mag_f32+0x1aa>
 80099f0:	ed90 0a04 	vldr	s0, [r0, #16]
 80099f4:	edd0 7a05 	vldr	s15, [r0, #20]
 80099f8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80099fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009a00:	2300      	movs	r3, #0
 8009a02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009a06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a0e:	db19      	blt.n	8009a44 <arm_cmplx_mag_f32+0x1cc>
 8009a10:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a18:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8009a1c:	d44a      	bmi.n	8009ab4 <arm_cmplx_mag_f32+0x23c>
 8009a1e:	ed81 8a02 	vstr	s16, [r1, #8]
 8009a22:	b004      	add	sp, #16
 8009a24:	ecbd 8b02 	vpop	{d8}
 8009a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a2c:	f845 8c04 	str.w	r8, [r5, #-4]
 8009a30:	e797      	b.n	8009962 <arm_cmplx_mag_f32+0xea>
 8009a32:	f845 8c08 	str.w	r8, [r5, #-8]
 8009a36:	e77b      	b.n	8009930 <arm_cmplx_mag_f32+0xb8>
 8009a38:	f845 8c0c 	str.w	r8, [r5, #-12]
 8009a3c:	e75e      	b.n	80098fc <arm_cmplx_mag_f32+0x84>
 8009a3e:	f845 8c10 	str.w	r8, [r5, #-16]
 8009a42:	e741      	b.n	80098c8 <arm_cmplx_mag_f32+0x50>
 8009a44:	608b      	str	r3, [r1, #8]
 8009a46:	e7ec      	b.n	8009a22 <arm_cmplx_mag_f32+0x1aa>
 8009a48:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009a4c:	9001      	str	r0, [sp, #4]
 8009a4e:	f003 faa9 	bl	800cfa4 <sqrtf>
 8009a52:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009a56:	9801      	ldr	r0, [sp, #4]
 8009a58:	e74e      	b.n	80098f8 <arm_cmplx_mag_f32+0x80>
 8009a5a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009a5e:	9001      	str	r0, [sp, #4]
 8009a60:	f003 faa0 	bl	800cfa4 <sqrtf>
 8009a64:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009a68:	9801      	ldr	r0, [sp, #4]
 8009a6a:	e72b      	b.n	80098c4 <arm_cmplx_mag_f32+0x4c>
 8009a6c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009a70:	9001      	str	r0, [sp, #4]
 8009a72:	f003 fa97 	bl	800cfa4 <sqrtf>
 8009a76:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009a7a:	9801      	ldr	r0, [sp, #4]
 8009a7c:	e76f      	b.n	800995e <arm_cmplx_mag_f32+0xe6>
 8009a7e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009a82:	9001      	str	r0, [sp, #4]
 8009a84:	f003 fa8e 	bl	800cfa4 <sqrtf>
 8009a88:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009a8c:	9801      	ldr	r0, [sp, #4]
 8009a8e:	e74d      	b.n	800992c <arm_cmplx_mag_f32+0xb4>
 8009a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a94:	9201      	str	r2, [sp, #4]
 8009a96:	f003 fa85 	bl	800cfa4 <sqrtf>
 8009a9a:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009a9e:	9903      	ldr	r1, [sp, #12]
 8009aa0:	e7a2      	b.n	80099e8 <arm_cmplx_mag_f32+0x170>
 8009aa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009aa6:	9201      	str	r2, [sp, #4]
 8009aa8:	f003 fa7c 	bl	800cfa4 <sqrtf>
 8009aac:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8009ab0:	9903      	ldr	r1, [sp, #12]
 8009ab2:	e77c      	b.n	80099ae <arm_cmplx_mag_f32+0x136>
 8009ab4:	9101      	str	r1, [sp, #4]
 8009ab6:	f003 fa75 	bl	800cfa4 <sqrtf>
 8009aba:	9901      	ldr	r1, [sp, #4]
 8009abc:	e7af      	b.n	8009a1e <arm_cmplx_mag_f32+0x1a6>
 8009abe:	bf00      	nop

08009ac0 <arm_cos_f32>:
 8009ac0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8009b48 <arm_cos_f32+0x88>
 8009ac4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009ac8:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8009acc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009ad0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009adc:	d504      	bpl.n	8009ae8 <arm_cos_f32+0x28>
 8009ade:	ee17 3a90 	vmov	r3, s15
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	ee07 3a90 	vmov	s15, r3
 8009ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aec:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8009b4c <arm_cos_f32+0x8c>
 8009af0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009af4:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009af8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8009afc:	ee17 3a90 	vmov	r3, s15
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b06:	d21a      	bcs.n	8009b3e <arm_cos_f32+0x7e>
 8009b08:	ee07 3a90 	vmov	s15, r3
 8009b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b10:	1c59      	adds	r1, r3, #1
 8009b12:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009b16:	4a0e      	ldr	r2, [pc, #56]	; (8009b50 <arm_cos_f32+0x90>)
 8009b18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009b1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b20:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009b24:	ed93 7a00 	vldr	s14, [r3]
 8009b28:	edd2 6a00 	vldr	s13, [r2]
 8009b2c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009b30:	ee20 0a26 	vmul.f32	s0, s0, s13
 8009b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b38:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009b3c:	4770      	bx	lr
 8009b3e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009b42:	2101      	movs	r1, #1
 8009b44:	2300      	movs	r3, #0
 8009b46:	e7e6      	b.n	8009b16 <arm_cos_f32+0x56>
 8009b48:	3e22f983 	.word	0x3e22f983
 8009b4c:	44000000 	.word	0x44000000
 8009b50:	08011adc 	.word	0x08011adc

08009b54 <arm_scale_f32>:
 8009b54:	b470      	push	{r4, r5, r6}
 8009b56:	0896      	lsrs	r6, r2, #2
 8009b58:	d025      	beq.n	8009ba6 <arm_scale_f32+0x52>
 8009b5a:	f100 0410 	add.w	r4, r0, #16
 8009b5e:	f101 0310 	add.w	r3, r1, #16
 8009b62:	4635      	mov	r5, r6
 8009b64:	ed54 7a04 	vldr	s15, [r4, #-16]
 8009b68:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009b6c:	3d01      	subs	r5, #1
 8009b6e:	ed43 7a04 	vstr	s15, [r3, #-16]
 8009b72:	ed54 7a03 	vldr	s15, [r4, #-12]
 8009b76:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009b7a:	f104 0410 	add.w	r4, r4, #16
 8009b7e:	ed43 7a03 	vstr	s15, [r3, #-12]
 8009b82:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8009b86:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009b8a:	f103 0310 	add.w	r3, r3, #16
 8009b8e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8009b92:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8009b96:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009b9a:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8009b9e:	d1e1      	bne.n	8009b64 <arm_scale_f32+0x10>
 8009ba0:	0136      	lsls	r6, r6, #4
 8009ba2:	4430      	add	r0, r6
 8009ba4:	4431      	add	r1, r6
 8009ba6:	f012 0203 	ands.w	r2, r2, #3
 8009baa:	d015      	beq.n	8009bd8 <arm_scale_f32+0x84>
 8009bac:	edd0 7a00 	vldr	s15, [r0]
 8009bb0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009bb4:	3a01      	subs	r2, #1
 8009bb6:	edc1 7a00 	vstr	s15, [r1]
 8009bba:	d00d      	beq.n	8009bd8 <arm_scale_f32+0x84>
 8009bbc:	edd0 7a01 	vldr	s15, [r0, #4]
 8009bc0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009bc4:	2a01      	cmp	r2, #1
 8009bc6:	edc1 7a01 	vstr	s15, [r1, #4]
 8009bca:	d005      	beq.n	8009bd8 <arm_scale_f32+0x84>
 8009bcc:	edd0 7a02 	vldr	s15, [r0, #8]
 8009bd0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009bd4:	ed81 0a02 	vstr	s0, [r1, #8]
 8009bd8:	bc70      	pop	{r4, r5, r6}
 8009bda:	4770      	bx	lr

08009bdc <arm_mult_f32>:
 8009bdc:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8009be0:	b4f0      	push	{r4, r5, r6, r7}
 8009be2:	d033      	beq.n	8009c4c <arm_mult_f32+0x70>
 8009be4:	f100 0610 	add.w	r6, r0, #16
 8009be8:	f101 0510 	add.w	r5, r1, #16
 8009bec:	f102 0410 	add.w	r4, r2, #16
 8009bf0:	4667      	mov	r7, ip
 8009bf2:	ed15 7a04 	vldr	s14, [r5, #-16]
 8009bf6:	ed56 7a04 	vldr	s15, [r6, #-16]
 8009bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009bfe:	3f01      	subs	r7, #1
 8009c00:	ed44 7a04 	vstr	s15, [r4, #-16]
 8009c04:	ed15 7a03 	vldr	s14, [r5, #-12]
 8009c08:	ed56 7a03 	vldr	s15, [r6, #-12]
 8009c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c10:	f106 0610 	add.w	r6, r6, #16
 8009c14:	ed44 7a03 	vstr	s15, [r4, #-12]
 8009c18:	ed15 7a02 	vldr	s14, [r5, #-8]
 8009c1c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8009c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c24:	f105 0510 	add.w	r5, r5, #16
 8009c28:	ed44 7a02 	vstr	s15, [r4, #-8]
 8009c2c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8009c30:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8009c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c38:	f104 0410 	add.w	r4, r4, #16
 8009c3c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8009c40:	d1d7      	bne.n	8009bf2 <arm_mult_f32+0x16>
 8009c42:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8009c46:	4420      	add	r0, r4
 8009c48:	4421      	add	r1, r4
 8009c4a:	4422      	add	r2, r4
 8009c4c:	f013 0303 	ands.w	r3, r3, #3
 8009c50:	d01b      	beq.n	8009c8a <arm_mult_f32+0xae>
 8009c52:	edd1 7a00 	vldr	s15, [r1]
 8009c56:	ed90 7a00 	vldr	s14, [r0]
 8009c5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	edc2 7a00 	vstr	s15, [r2]
 8009c64:	d011      	beq.n	8009c8a <arm_mult_f32+0xae>
 8009c66:	edd0 7a01 	vldr	s15, [r0, #4]
 8009c6a:	ed91 7a01 	vldr	s14, [r1, #4]
 8009c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	edc2 7a01 	vstr	s15, [r2, #4]
 8009c78:	d007      	beq.n	8009c8a <arm_mult_f32+0xae>
 8009c7a:	edd0 7a02 	vldr	s15, [r0, #8]
 8009c7e:	ed91 7a02 	vldr	s14, [r1, #8]
 8009c82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c86:	edc2 7a02 	vstr	s15, [r2, #8]
 8009c8a:	bcf0      	pop	{r4, r5, r6, r7}
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop

08009c90 <arm_radix8_butterfly_f32>:
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	ed2d 8b10 	vpush	{d8-d15}
 8009c98:	b095      	sub	sp, #84	; 0x54
 8009c9a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	ed9f bab9 	vldr	s22, [pc, #740]	; 8009f88 <arm_radix8_butterfly_f32+0x2f8>
 8009ca6:	9012      	str	r0, [sp, #72]	; 0x48
 8009ca8:	468b      	mov	fp, r1
 8009caa:	9313      	str	r3, [sp, #76]	; 0x4c
 8009cac:	4689      	mov	r9, r1
 8009cae:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8009cb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cb4:	960f      	str	r6, [sp, #60]	; 0x3c
 8009cb6:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8009cba:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8009cbe:	eb03 0508 	add.w	r5, r3, r8
 8009cc2:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8009cc6:	eb05 040e 	add.w	r4, r5, lr
 8009cca:	0137      	lsls	r7, r6, #4
 8009ccc:	eba6 030a 	sub.w	r3, r6, sl
 8009cd0:	eb04 000e 	add.w	r0, r4, lr
 8009cd4:	44b2      	add	sl, r6
 8009cd6:	1d3a      	adds	r2, r7, #4
 8009cd8:	9702      	str	r7, [sp, #8]
 8009cda:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8009cde:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8009ce2:	ebae 0c06 	sub.w	ip, lr, r6
 8009ce6:	9703      	str	r7, [sp, #12]
 8009ce8:	eb03 0708 	add.w	r7, r3, r8
 8009cec:	9701      	str	r7, [sp, #4]
 8009cee:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8009cf2:	9706      	str	r7, [sp, #24]
 8009cf4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009cf6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8009cfa:	f10e 0104 	add.w	r1, lr, #4
 8009cfe:	4439      	add	r1, r7
 8009d00:	443a      	add	r2, r7
 8009d02:	0137      	lsls	r7, r6, #4
 8009d04:	00f6      	lsls	r6, r6, #3
 8009d06:	9704      	str	r7, [sp, #16]
 8009d08:	9605      	str	r6, [sp, #20]
 8009d0a:	9f01      	ldr	r7, [sp, #4]
 8009d0c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8009d0e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8009d12:	f04f 0c00 	mov.w	ip, #0
 8009d16:	edd4 6a00 	vldr	s13, [r4]
 8009d1a:	edd7 1a00 	vldr	s3, [r7]
 8009d1e:	ed16 aa01 	vldr	s20, [r6, #-4]
 8009d22:	edd5 5a00 	vldr	s11, [r5]
 8009d26:	ed52 9a01 	vldr	s19, [r2, #-4]
 8009d2a:	ed90 6a00 	vldr	s12, [r0]
 8009d2e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009d32:	ed93 3a00 	vldr	s6, [r3]
 8009d36:	ee39 0a86 	vadd.f32	s0, s19, s12
 8009d3a:	ee33 2a21 	vadd.f32	s4, s6, s3
 8009d3e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8009d42:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8009d46:	ee35 7a02 	vadd.f32	s14, s10, s4
 8009d4a:	ee34 4a80 	vadd.f32	s8, s9, s0
 8009d4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009d52:	ee74 6a07 	vadd.f32	s13, s8, s14
 8009d56:	ee34 4a47 	vsub.f32	s8, s8, s14
 8009d5a:	ed46 6a01 	vstr	s13, [r6, #-4]
 8009d5e:	ed85 4a00 	vstr	s8, [r5]
 8009d62:	edd1 6a00 	vldr	s13, [r1]
 8009d66:	ed94 9a01 	vldr	s18, [r4, #4]
 8009d6a:	edd3 2a01 	vldr	s5, [r3, #4]
 8009d6e:	edd7 8a01 	vldr	s17, [r7, #4]
 8009d72:	edd6 0a00 	vldr	s1, [r6]
 8009d76:	edd5 3a01 	vldr	s7, [r5, #4]
 8009d7a:	ed90 8a01 	vldr	s16, [r0, #4]
 8009d7e:	ed92 7a00 	vldr	s14, [r2]
 8009d82:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009d86:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8009d8a:	ee72 aae8 	vsub.f32	s21, s5, s17
 8009d8e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8009d92:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8009d96:	ee77 7a83 	vadd.f32	s15, s15, s6
 8009d9a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8009d9e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8009da2:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8009da6:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8009daa:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8009dae:	ee77 0a08 	vadd.f32	s1, s14, s16
 8009db2:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8009db6:	ee37 7a48 	vsub.f32	s14, s14, s16
 8009dba:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8009dbe:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8009dc2:	ee76 6a89 	vadd.f32	s13, s13, s18
 8009dc6:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8009dca:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009dce:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8009dd2:	ee35 5a42 	vsub.f32	s10, s10, s4
 8009dd6:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8009dda:	ee33 2a20 	vadd.f32	s4, s6, s1
 8009dde:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8009de2:	ee33 3a60 	vsub.f32	s6, s6, s1
 8009de6:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8009dea:	ee77 0a01 	vadd.f32	s1, s14, s2
 8009dee:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8009df2:	ee37 7a41 	vsub.f32	s14, s14, s2
 8009df6:	ee73 1a84 	vadd.f32	s3, s7, s8
 8009dfa:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8009dfe:	ee76 3a27 	vadd.f32	s7, s12, s15
 8009e02:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009e06:	ee32 8a00 	vadd.f32	s16, s4, s0
 8009e0a:	ee33 1a45 	vsub.f32	s2, s6, s10
 8009e0e:	ee32 2a40 	vsub.f32	s4, s4, s0
 8009e12:	ee35 5a03 	vadd.f32	s10, s10, s6
 8009e16:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8009e1a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8009e1e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8009e22:	ee34 6a67 	vsub.f32	s12, s8, s15
 8009e26:	ee75 4a87 	vadd.f32	s9, s11, s14
 8009e2a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8009e2e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8009e32:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009e36:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8009e3a:	44dc      	add	ip, fp
 8009e3c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8009e40:	45e1      	cmp	r9, ip
 8009e42:	ed86 8a00 	vstr	s16, [r6]
 8009e46:	ed85 2a01 	vstr	s4, [r5, #4]
 8009e4a:	4456      	add	r6, sl
 8009e4c:	ed02 0a01 	vstr	s0, [r2, #-4]
 8009e50:	4455      	add	r5, sl
 8009e52:	edc0 6a00 	vstr	s13, [r0]
 8009e56:	ed82 1a00 	vstr	s2, [r2]
 8009e5a:	ed80 5a01 	vstr	s10, [r0, #4]
 8009e5e:	4452      	add	r2, sl
 8009e60:	ed01 3a01 	vstr	s6, [r1, #-4]
 8009e64:	4450      	add	r0, sl
 8009e66:	edc7 2a00 	vstr	s5, [r7]
 8009e6a:	edc4 4a00 	vstr	s9, [r4]
 8009e6e:	ed83 7a00 	vstr	s14, [r3]
 8009e72:	edc1 5a00 	vstr	s11, [r1]
 8009e76:	edc7 3a01 	vstr	s7, [r7, #4]
 8009e7a:	4451      	add	r1, sl
 8009e7c:	ed84 6a01 	vstr	s12, [r4, #4]
 8009e80:	4457      	add	r7, sl
 8009e82:	edc3 7a01 	vstr	s15, [r3, #4]
 8009e86:	4454      	add	r4, sl
 8009e88:	4453      	add	r3, sl
 8009e8a:	f63f af44 	bhi.w	8009d16 <arm_radix8_butterfly_f32+0x86>
 8009e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e90:	2b07      	cmp	r3, #7
 8009e92:	f240 81b7 	bls.w	800a204 <arm_radix8_butterfly_f32+0x574>
 8009e96:	9b06      	ldr	r3, [sp, #24]
 8009e98:	9903      	ldr	r1, [sp, #12]
 8009e9a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009e9c:	9e05      	ldr	r6, [sp, #20]
 8009e9e:	9a04      	ldr	r2, [sp, #16]
 8009ea0:	f103 0c08 	add.w	ip, r3, #8
 8009ea4:	9b02      	ldr	r3, [sp, #8]
 8009ea6:	3108      	adds	r1, #8
 8009ea8:	f108 0808 	add.w	r8, r8, #8
 8009eac:	1841      	adds	r1, r0, r1
 8009eae:	3608      	adds	r6, #8
 8009eb0:	330c      	adds	r3, #12
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4444      	add	r4, r8
 8009eb6:	18c3      	adds	r3, r0, r3
 8009eb8:	9109      	str	r1, [sp, #36]	; 0x24
 8009eba:	1981      	adds	r1, r0, r6
 8009ebc:	f10e 0e08 	add.w	lr, lr, #8
 8009ec0:	3208      	adds	r2, #8
 8009ec2:	940b      	str	r4, [sp, #44]	; 0x2c
 8009ec4:	9107      	str	r1, [sp, #28]
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	4601      	mov	r1, r0
 8009eca:	9304      	str	r3, [sp, #16]
 8009ecc:	f100 030c 	add.w	r3, r0, #12
 8009ed0:	4474      	add	r4, lr
 8009ed2:	f04f 0801 	mov.w	r8, #1
 8009ed6:	1882      	adds	r2, r0, r2
 8009ed8:	4461      	add	r1, ip
 8009eda:	9305      	str	r3, [sp, #20]
 8009edc:	464b      	mov	r3, r9
 8009ede:	940a      	str	r4, [sp, #40]	; 0x28
 8009ee0:	46c1      	mov	r9, r8
 8009ee2:	9208      	str	r2, [sp, #32]
 8009ee4:	46d8      	mov	r8, fp
 8009ee6:	9106      	str	r1, [sp, #24]
 8009ee8:	f04f 0e00 	mov.w	lr, #0
 8009eec:	469b      	mov	fp, r3
 8009eee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ef0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009ef2:	449e      	add	lr, r3
 8009ef4:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8009ef8:	441a      	add	r2, r3
 8009efa:	920e      	str	r2, [sp, #56]	; 0x38
 8009efc:	441a      	add	r2, r3
 8009efe:	18d4      	adds	r4, r2, r3
 8009f00:	18e5      	adds	r5, r4, r3
 8009f02:	18ee      	adds	r6, r5, r3
 8009f04:	18f7      	adds	r7, r6, r3
 8009f06:	eb07 0c03 	add.w	ip, r7, r3
 8009f0a:	920d      	str	r2, [sp, #52]	; 0x34
 8009f0c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8009f10:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8009f14:	910c      	str	r1, [sp, #48]	; 0x30
 8009f16:	4419      	add	r1, r3
 8009f18:	9103      	str	r1, [sp, #12]
 8009f1a:	4419      	add	r1, r3
 8009f1c:	18ca      	adds	r2, r1, r3
 8009f1e:	9202      	str	r2, [sp, #8]
 8009f20:	441a      	add	r2, r3
 8009f22:	18d0      	adds	r0, r2, r3
 8009f24:	ed92 ea01 	vldr	s28, [r2, #4]
 8009f28:	9a02      	ldr	r2, [sp, #8]
 8009f2a:	edd4 7a00 	vldr	s15, [r4]
 8009f2e:	edd2 da01 	vldr	s27, [r2, #4]
 8009f32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f34:	ed91 da01 	vldr	s26, [r1, #4]
 8009f38:	ed92 ca01 	vldr	s24, [r2, #4]
 8009f3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f3e:	9903      	ldr	r1, [sp, #12]
 8009f40:	edcd 7a03 	vstr	s15, [sp, #12]
 8009f44:	edd2 7a00 	vldr	s15, [r2]
 8009f48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f4a:	edcd 7a02 	vstr	s15, [sp, #8]
 8009f4e:	edd2 7a00 	vldr	s15, [r2]
 8009f52:	edd0 ea01 	vldr	s29, [r0, #4]
 8009f56:	edd1 ca01 	vldr	s25, [r1, #4]
 8009f5a:	eddc ba00 	vldr	s23, [ip]
 8009f5e:	edd7 aa00 	vldr	s21, [r7]
 8009f62:	ed96 aa00 	vldr	s20, [r6]
 8009f66:	edd5 9a00 	vldr	s19, [r5]
 8009f6a:	edcd 7a01 	vstr	s15, [sp, #4]
 8009f6e:	4403      	add	r3, r0
 8009f70:	ed93 fa01 	vldr	s30, [r3, #4]
 8009f74:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8009f78:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8009f7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f80:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009f84:	46cc      	mov	ip, r9
 8009f86:	e001      	b.n	8009f8c <arm_radix8_butterfly_f32+0x2fc>
 8009f88:	3f3504f3 	.word	0x3f3504f3
 8009f8c:	ed91 6a00 	vldr	s12, [r1]
 8009f90:	ed93 5a00 	vldr	s10, [r3]
 8009f94:	edd0 fa00 	vldr	s31, [r0]
 8009f98:	edd4 7a00 	vldr	s15, [r4]
 8009f9c:	ed95 7a00 	vldr	s14, [r5]
 8009fa0:	ed56 3a01 	vldr	s7, [r6, #-4]
 8009fa4:	ed17 3a01 	vldr	s6, [r7, #-4]
 8009fa8:	ed92 2a00 	vldr	s4, [r2]
 8009fac:	ed96 0a00 	vldr	s0, [r6]
 8009fb0:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009fb4:	ee32 1a06 	vadd.f32	s2, s4, s12
 8009fb8:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8009fbc:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009fc0:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009fc4:	ee71 6a24 	vadd.f32	s13, s2, s9
 8009fc8:	ee32 2a46 	vsub.f32	s4, s4, s12
 8009fcc:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009fd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009fd4:	ed06 6a01 	vstr	s12, [r6, #-4]
 8009fd8:	edd4 8a01 	vldr	s17, [r4, #4]
 8009fdc:	ed92 9a01 	vldr	s18, [r2, #4]
 8009fe0:	edd7 0a00 	vldr	s1, [r7]
 8009fe4:	edd1 2a01 	vldr	s5, [r1, #4]
 8009fe8:	ed95 7a01 	vldr	s14, [r5, #4]
 8009fec:	ed93 6a01 	vldr	s12, [r3, #4]
 8009ff0:	edd0 5a01 	vldr	s11, [r0, #4]
 8009ff4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009ff8:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8009ffc:	ee39 5a62 	vsub.f32	s10, s18, s5
 800a000:	ee78 fac7 	vsub.f32	s31, s17, s14
 800a004:	ee38 4a44 	vsub.f32	s8, s16, s8
 800a008:	ee38 7a87 	vadd.f32	s14, s17, s14
 800a00c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800a010:	ee79 2a22 	vadd.f32	s5, s18, s5
 800a014:	ee32 9a27 	vadd.f32	s18, s4, s15
 800a018:	ee72 7a67 	vsub.f32	s15, s4, s15
 800a01c:	ee30 2a06 	vadd.f32	s4, s0, s12
 800a020:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800a024:	ee71 4a64 	vsub.f32	s9, s2, s9
 800a028:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800a02c:	ee32 1a08 	vadd.f32	s2, s4, s16
 800a030:	ee72 fa87 	vadd.f32	s31, s5, s14
 800a034:	ee32 2a48 	vsub.f32	s4, s4, s16
 800a038:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800a03c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800a040:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a044:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800a048:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800a04c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800a050:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800a054:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a058:	ee30 6a46 	vsub.f32	s12, s0, s12
 800a05c:	ee74 0a22 	vadd.f32	s1, s8, s5
 800a060:	ee36 0a28 	vadd.f32	s0, s12, s17
 800a064:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a068:	ee36 6a68 	vsub.f32	s12, s12, s17
 800a06c:	ee32 4a64 	vsub.f32	s8, s4, s9
 800a070:	ee73 8a09 	vadd.f32	s17, s6, s18
 800a074:	ee74 4a82 	vadd.f32	s9, s9, s4
 800a078:	ee33 9a49 	vsub.f32	s18, s6, s18
 800a07c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800a080:	ee35 3a85 	vadd.f32	s6, s11, s10
 800a084:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800a088:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800a08c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800a090:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800a094:	ee30 7a68 	vsub.f32	s14, s0, s17
 800a098:	ee35 8a03 	vadd.f32	s16, s10, s6
 800a09c:	ee38 0a80 	vadd.f32	s0, s17, s0
 800a0a0:	ee73 3a82 	vadd.f32	s7, s7, s4
 800a0a4:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800a0a8:	ed9d 2a01 	vldr	s4, [sp, #4]
 800a0ac:	eddd 1a02 	vldr	s3, [sp, #8]
 800a0b0:	ee35 5a43 	vsub.f32	s10, s10, s6
 800a0b4:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800a0b8:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800a0bc:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800a0c0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a0c4:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800a0c8:	ee76 5a49 	vsub.f32	s11, s12, s18
 800a0cc:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800a0d0:	ee39 6a06 	vadd.f32	s12, s18, s12
 800a0d4:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800a0d8:	ee21 4a84 	vmul.f32	s8, s3, s8
 800a0dc:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800a0e0:	ee22 7a07 	vmul.f32	s14, s4, s14
 800a0e4:	ee22 2a08 	vmul.f32	s4, s4, s16
 800a0e8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800a0ec:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800a0f0:	ee31 1a09 	vadd.f32	s2, s2, s18
 800a0f4:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800a0f8:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800a0fc:	ee74 0a60 	vsub.f32	s1, s8, s1
 800a100:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a104:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800a108:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800a10c:	ee72 1a21 	vadd.f32	s3, s4, s3
 800a110:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800a114:	ee38 2a89 	vadd.f32	s4, s17, s18
 800a118:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800a11c:	ee38 8a04 	vadd.f32	s16, s16, s8
 800a120:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800a124:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800a128:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800a12c:	eddd 5a03 	vldr	s11, [sp, #12]
 800a130:	edc6 fa00 	vstr	s31, [r6]
 800a134:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800a138:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800a13c:	ee30 0a45 	vsub.f32	s0, s0, s10
 800a140:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800a144:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800a148:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800a14c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800a150:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800a154:	ee25 6a86 	vmul.f32	s12, s11, s12
 800a158:	ee74 4a89 	vadd.f32	s9, s9, s18
 800a15c:	ee34 3a43 	vsub.f32	s6, s8, s6
 800a160:	ee78 8a85 	vadd.f32	s17, s17, s10
 800a164:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a168:	44c4      	add	ip, r8
 800a16a:	45e3      	cmp	fp, ip
 800a16c:	edc3 3a00 	vstr	s7, [r3]
 800a170:	edc3 6a01 	vstr	s13, [r3, #4]
 800a174:	4456      	add	r6, sl
 800a176:	ed07 1a01 	vstr	s2, [r7, #-4]
 800a17a:	edc7 0a00 	vstr	s1, [r7]
 800a17e:	4453      	add	r3, sl
 800a180:	ed80 2a00 	vstr	s4, [r0]
 800a184:	edc0 2a01 	vstr	s5, [r0, #4]
 800a188:	4457      	add	r7, sl
 800a18a:	edc2 1a00 	vstr	s3, [r2]
 800a18e:	ed82 7a01 	vstr	s14, [r2, #4]
 800a192:	4450      	add	r0, sl
 800a194:	ed85 8a00 	vstr	s16, [r5]
 800a198:	ed85 0a01 	vstr	s0, [r5, #4]
 800a19c:	4452      	add	r2, sl
 800a19e:	edc1 4a00 	vstr	s9, [r1]
 800a1a2:	4455      	add	r5, sl
 800a1a4:	ed81 3a01 	vstr	s6, [r1, #4]
 800a1a8:	edc4 8a00 	vstr	s17, [r4]
 800a1ac:	ed84 6a01 	vstr	s12, [r4, #4]
 800a1b0:	4451      	add	r1, sl
 800a1b2:	4454      	add	r4, sl
 800a1b4:	f63f aeea 	bhi.w	8009f8c <arm_radix8_butterfly_f32+0x2fc>
 800a1b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	930a      	str	r3, [sp, #40]	; 0x28
 800a1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c6:	3308      	adds	r3, #8
 800a1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ca:	9b08      	ldr	r3, [sp, #32]
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	9308      	str	r3, [sp, #32]
 800a1d0:	9b07      	ldr	r3, [sp, #28]
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	9307      	str	r3, [sp, #28]
 800a1d6:	9b06      	ldr	r3, [sp, #24]
 800a1d8:	3308      	adds	r3, #8
 800a1da:	9306      	str	r3, [sp, #24]
 800a1dc:	9b05      	ldr	r3, [sp, #20]
 800a1de:	3308      	adds	r3, #8
 800a1e0:	9305      	str	r3, [sp, #20]
 800a1e2:	9b04      	ldr	r3, [sp, #16]
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	9304      	str	r3, [sp, #16]
 800a1e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1ea:	f109 0901 	add.w	r9, r9, #1
 800a1ee:	454b      	cmp	r3, r9
 800a1f0:	f47f ae7d 	bne.w	8009eee <arm_radix8_butterfly_f32+0x25e>
 800a1f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1f6:	00db      	lsls	r3, r3, #3
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	46d9      	mov	r9, fp
 800a1fc:	9310      	str	r3, [sp, #64]	; 0x40
 800a1fe:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800a202:	e554      	b.n	8009cae <arm_radix8_butterfly_f32+0x1e>
 800a204:	b015      	add	sp, #84	; 0x54
 800a206:	ecbd 8b10 	vpop	{d8-d15}
 800a20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20e:	bf00      	nop

0800a210 <__errno>:
 800a210:	4b01      	ldr	r3, [pc, #4]	; (800a218 <__errno+0x8>)
 800a212:	6818      	ldr	r0, [r3, #0]
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	20000014 	.word	0x20000014

0800a21c <std>:
 800a21c:	2300      	movs	r3, #0
 800a21e:	b510      	push	{r4, lr}
 800a220:	4604      	mov	r4, r0
 800a222:	e9c0 3300 	strd	r3, r3, [r0]
 800a226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a22a:	6083      	str	r3, [r0, #8]
 800a22c:	8181      	strh	r1, [r0, #12]
 800a22e:	6643      	str	r3, [r0, #100]	; 0x64
 800a230:	81c2      	strh	r2, [r0, #14]
 800a232:	6183      	str	r3, [r0, #24]
 800a234:	4619      	mov	r1, r3
 800a236:	2208      	movs	r2, #8
 800a238:	305c      	adds	r0, #92	; 0x5c
 800a23a:	f000 f91a 	bl	800a472 <memset>
 800a23e:	4b05      	ldr	r3, [pc, #20]	; (800a254 <std+0x38>)
 800a240:	6263      	str	r3, [r4, #36]	; 0x24
 800a242:	4b05      	ldr	r3, [pc, #20]	; (800a258 <std+0x3c>)
 800a244:	62a3      	str	r3, [r4, #40]	; 0x28
 800a246:	4b05      	ldr	r3, [pc, #20]	; (800a25c <std+0x40>)
 800a248:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a24a:	4b05      	ldr	r3, [pc, #20]	; (800a260 <std+0x44>)
 800a24c:	6224      	str	r4, [r4, #32]
 800a24e:	6323      	str	r3, [r4, #48]	; 0x30
 800a250:	bd10      	pop	{r4, pc}
 800a252:	bf00      	nop
 800a254:	0800b091 	.word	0x0800b091
 800a258:	0800b0b3 	.word	0x0800b0b3
 800a25c:	0800b0eb 	.word	0x0800b0eb
 800a260:	0800b10f 	.word	0x0800b10f

0800a264 <_cleanup_r>:
 800a264:	4901      	ldr	r1, [pc, #4]	; (800a26c <_cleanup_r+0x8>)
 800a266:	f000 b8af 	b.w	800a3c8 <_fwalk_reent>
 800a26a:	bf00      	nop
 800a26c:	0800c0e1 	.word	0x0800c0e1

0800a270 <__sfmoreglue>:
 800a270:	b570      	push	{r4, r5, r6, lr}
 800a272:	2268      	movs	r2, #104	; 0x68
 800a274:	1e4d      	subs	r5, r1, #1
 800a276:	4355      	muls	r5, r2
 800a278:	460e      	mov	r6, r1
 800a27a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a27e:	f000 f921 	bl	800a4c4 <_malloc_r>
 800a282:	4604      	mov	r4, r0
 800a284:	b140      	cbz	r0, 800a298 <__sfmoreglue+0x28>
 800a286:	2100      	movs	r1, #0
 800a288:	e9c0 1600 	strd	r1, r6, [r0]
 800a28c:	300c      	adds	r0, #12
 800a28e:	60a0      	str	r0, [r4, #8]
 800a290:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a294:	f000 f8ed 	bl	800a472 <memset>
 800a298:	4620      	mov	r0, r4
 800a29a:	bd70      	pop	{r4, r5, r6, pc}

0800a29c <__sfp_lock_acquire>:
 800a29c:	4801      	ldr	r0, [pc, #4]	; (800a2a4 <__sfp_lock_acquire+0x8>)
 800a29e:	f000 b8d8 	b.w	800a452 <__retarget_lock_acquire_recursive>
 800a2a2:	bf00      	nop
 800a2a4:	20010be5 	.word	0x20010be5

0800a2a8 <__sfp_lock_release>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	; (800a2b0 <__sfp_lock_release+0x8>)
 800a2aa:	f000 b8d3 	b.w	800a454 <__retarget_lock_release_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	20010be5 	.word	0x20010be5

0800a2b4 <__sinit_lock_acquire>:
 800a2b4:	4801      	ldr	r0, [pc, #4]	; (800a2bc <__sinit_lock_acquire+0x8>)
 800a2b6:	f000 b8cc 	b.w	800a452 <__retarget_lock_acquire_recursive>
 800a2ba:	bf00      	nop
 800a2bc:	20010be6 	.word	0x20010be6

0800a2c0 <__sinit_lock_release>:
 800a2c0:	4801      	ldr	r0, [pc, #4]	; (800a2c8 <__sinit_lock_release+0x8>)
 800a2c2:	f000 b8c7 	b.w	800a454 <__retarget_lock_release_recursive>
 800a2c6:	bf00      	nop
 800a2c8:	20010be6 	.word	0x20010be6

0800a2cc <__sinit>:
 800a2cc:	b510      	push	{r4, lr}
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	f7ff fff0 	bl	800a2b4 <__sinit_lock_acquire>
 800a2d4:	69a3      	ldr	r3, [r4, #24]
 800a2d6:	b11b      	cbz	r3, 800a2e0 <__sinit+0x14>
 800a2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2dc:	f7ff bff0 	b.w	800a2c0 <__sinit_lock_release>
 800a2e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2e4:	6523      	str	r3, [r4, #80]	; 0x50
 800a2e6:	4b13      	ldr	r3, [pc, #76]	; (800a334 <__sinit+0x68>)
 800a2e8:	4a13      	ldr	r2, [pc, #76]	; (800a338 <__sinit+0x6c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2ee:	42a3      	cmp	r3, r4
 800a2f0:	bf04      	itt	eq
 800a2f2:	2301      	moveq	r3, #1
 800a2f4:	61a3      	streq	r3, [r4, #24]
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f000 f820 	bl	800a33c <__sfp>
 800a2fc:	6060      	str	r0, [r4, #4]
 800a2fe:	4620      	mov	r0, r4
 800a300:	f000 f81c 	bl	800a33c <__sfp>
 800a304:	60a0      	str	r0, [r4, #8]
 800a306:	4620      	mov	r0, r4
 800a308:	f000 f818 	bl	800a33c <__sfp>
 800a30c:	2200      	movs	r2, #0
 800a30e:	60e0      	str	r0, [r4, #12]
 800a310:	2104      	movs	r1, #4
 800a312:	6860      	ldr	r0, [r4, #4]
 800a314:	f7ff ff82 	bl	800a21c <std>
 800a318:	68a0      	ldr	r0, [r4, #8]
 800a31a:	2201      	movs	r2, #1
 800a31c:	2109      	movs	r1, #9
 800a31e:	f7ff ff7d 	bl	800a21c <std>
 800a322:	68e0      	ldr	r0, [r4, #12]
 800a324:	2202      	movs	r2, #2
 800a326:	2112      	movs	r1, #18
 800a328:	f7ff ff78 	bl	800a21c <std>
 800a32c:	2301      	movs	r3, #1
 800a32e:	61a3      	str	r3, [r4, #24]
 800a330:	e7d2      	b.n	800a2d8 <__sinit+0xc>
 800a332:	bf00      	nop
 800a334:	08021e40 	.word	0x08021e40
 800a338:	0800a265 	.word	0x0800a265

0800a33c <__sfp>:
 800a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33e:	4607      	mov	r7, r0
 800a340:	f7ff ffac 	bl	800a29c <__sfp_lock_acquire>
 800a344:	4b1e      	ldr	r3, [pc, #120]	; (800a3c0 <__sfp+0x84>)
 800a346:	681e      	ldr	r6, [r3, #0]
 800a348:	69b3      	ldr	r3, [r6, #24]
 800a34a:	b913      	cbnz	r3, 800a352 <__sfp+0x16>
 800a34c:	4630      	mov	r0, r6
 800a34e:	f7ff ffbd 	bl	800a2cc <__sinit>
 800a352:	3648      	adds	r6, #72	; 0x48
 800a354:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a358:	3b01      	subs	r3, #1
 800a35a:	d503      	bpl.n	800a364 <__sfp+0x28>
 800a35c:	6833      	ldr	r3, [r6, #0]
 800a35e:	b30b      	cbz	r3, 800a3a4 <__sfp+0x68>
 800a360:	6836      	ldr	r6, [r6, #0]
 800a362:	e7f7      	b.n	800a354 <__sfp+0x18>
 800a364:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a368:	b9d5      	cbnz	r5, 800a3a0 <__sfp+0x64>
 800a36a:	4b16      	ldr	r3, [pc, #88]	; (800a3c4 <__sfp+0x88>)
 800a36c:	60e3      	str	r3, [r4, #12]
 800a36e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a372:	6665      	str	r5, [r4, #100]	; 0x64
 800a374:	f000 f86c 	bl	800a450 <__retarget_lock_init_recursive>
 800a378:	f7ff ff96 	bl	800a2a8 <__sfp_lock_release>
 800a37c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a380:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a384:	6025      	str	r5, [r4, #0]
 800a386:	61a5      	str	r5, [r4, #24]
 800a388:	2208      	movs	r2, #8
 800a38a:	4629      	mov	r1, r5
 800a38c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a390:	f000 f86f 	bl	800a472 <memset>
 800a394:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a398:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a39c:	4620      	mov	r0, r4
 800a39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3a0:	3468      	adds	r4, #104	; 0x68
 800a3a2:	e7d9      	b.n	800a358 <__sfp+0x1c>
 800a3a4:	2104      	movs	r1, #4
 800a3a6:	4638      	mov	r0, r7
 800a3a8:	f7ff ff62 	bl	800a270 <__sfmoreglue>
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	6030      	str	r0, [r6, #0]
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d1d5      	bne.n	800a360 <__sfp+0x24>
 800a3b4:	f7ff ff78 	bl	800a2a8 <__sfp_lock_release>
 800a3b8:	230c      	movs	r3, #12
 800a3ba:	603b      	str	r3, [r7, #0]
 800a3bc:	e7ee      	b.n	800a39c <__sfp+0x60>
 800a3be:	bf00      	nop
 800a3c0:	08021e40 	.word	0x08021e40
 800a3c4:	ffff0001 	.word	0xffff0001

0800a3c8 <_fwalk_reent>:
 800a3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3cc:	4606      	mov	r6, r0
 800a3ce:	4688      	mov	r8, r1
 800a3d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3d4:	2700      	movs	r7, #0
 800a3d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3da:	f1b9 0901 	subs.w	r9, r9, #1
 800a3de:	d505      	bpl.n	800a3ec <_fwalk_reent+0x24>
 800a3e0:	6824      	ldr	r4, [r4, #0]
 800a3e2:	2c00      	cmp	r4, #0
 800a3e4:	d1f7      	bne.n	800a3d6 <_fwalk_reent+0xe>
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ec:	89ab      	ldrh	r3, [r5, #12]
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d907      	bls.n	800a402 <_fwalk_reent+0x3a>
 800a3f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	d003      	beq.n	800a402 <_fwalk_reent+0x3a>
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	47c0      	blx	r8
 800a400:	4307      	orrs	r7, r0
 800a402:	3568      	adds	r5, #104	; 0x68
 800a404:	e7e9      	b.n	800a3da <_fwalk_reent+0x12>
	...

0800a408 <__libc_init_array>:
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	4d0d      	ldr	r5, [pc, #52]	; (800a440 <__libc_init_array+0x38>)
 800a40c:	4c0d      	ldr	r4, [pc, #52]	; (800a444 <__libc_init_array+0x3c>)
 800a40e:	1b64      	subs	r4, r4, r5
 800a410:	10a4      	asrs	r4, r4, #2
 800a412:	2600      	movs	r6, #0
 800a414:	42a6      	cmp	r6, r4
 800a416:	d109      	bne.n	800a42c <__libc_init_array+0x24>
 800a418:	4d0b      	ldr	r5, [pc, #44]	; (800a448 <__libc_init_array+0x40>)
 800a41a:	4c0c      	ldr	r4, [pc, #48]	; (800a44c <__libc_init_array+0x44>)
 800a41c:	f003 ff24 	bl	800e268 <_init>
 800a420:	1b64      	subs	r4, r4, r5
 800a422:	10a4      	asrs	r4, r4, #2
 800a424:	2600      	movs	r6, #0
 800a426:	42a6      	cmp	r6, r4
 800a428:	d105      	bne.n	800a436 <__libc_init_array+0x2e>
 800a42a:	bd70      	pop	{r4, r5, r6, pc}
 800a42c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a430:	4798      	blx	r3
 800a432:	3601      	adds	r6, #1
 800a434:	e7ee      	b.n	800a414 <__libc_init_array+0xc>
 800a436:	f855 3b04 	ldr.w	r3, [r5], #4
 800a43a:	4798      	blx	r3
 800a43c:	3601      	adds	r6, #1
 800a43e:	e7f2      	b.n	800a426 <__libc_init_array+0x1e>
 800a440:	080223a0 	.word	0x080223a0
 800a444:	080223a0 	.word	0x080223a0
 800a448:	080223a0 	.word	0x080223a0
 800a44c:	080223a4 	.word	0x080223a4

0800a450 <__retarget_lock_init_recursive>:
 800a450:	4770      	bx	lr

0800a452 <__retarget_lock_acquire_recursive>:
 800a452:	4770      	bx	lr

0800a454 <__retarget_lock_release_recursive>:
 800a454:	4770      	bx	lr

0800a456 <memcpy>:
 800a456:	440a      	add	r2, r1
 800a458:	4291      	cmp	r1, r2
 800a45a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a45e:	d100      	bne.n	800a462 <memcpy+0xc>
 800a460:	4770      	bx	lr
 800a462:	b510      	push	{r4, lr}
 800a464:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a46c:	4291      	cmp	r1, r2
 800a46e:	d1f9      	bne.n	800a464 <memcpy+0xe>
 800a470:	bd10      	pop	{r4, pc}

0800a472 <memset>:
 800a472:	4402      	add	r2, r0
 800a474:	4603      	mov	r3, r0
 800a476:	4293      	cmp	r3, r2
 800a478:	d100      	bne.n	800a47c <memset+0xa>
 800a47a:	4770      	bx	lr
 800a47c:	f803 1b01 	strb.w	r1, [r3], #1
 800a480:	e7f9      	b.n	800a476 <memset+0x4>
	...

0800a484 <sbrk_aligned>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	4e0e      	ldr	r6, [pc, #56]	; (800a4c0 <sbrk_aligned+0x3c>)
 800a488:	460c      	mov	r4, r1
 800a48a:	6831      	ldr	r1, [r6, #0]
 800a48c:	4605      	mov	r5, r0
 800a48e:	b911      	cbnz	r1, 800a496 <sbrk_aligned+0x12>
 800a490:	f000 fdee 	bl	800b070 <_sbrk_r>
 800a494:	6030      	str	r0, [r6, #0]
 800a496:	4621      	mov	r1, r4
 800a498:	4628      	mov	r0, r5
 800a49a:	f000 fde9 	bl	800b070 <_sbrk_r>
 800a49e:	1c43      	adds	r3, r0, #1
 800a4a0:	d00a      	beq.n	800a4b8 <sbrk_aligned+0x34>
 800a4a2:	1cc4      	adds	r4, r0, #3
 800a4a4:	f024 0403 	bic.w	r4, r4, #3
 800a4a8:	42a0      	cmp	r0, r4
 800a4aa:	d007      	beq.n	800a4bc <sbrk_aligned+0x38>
 800a4ac:	1a21      	subs	r1, r4, r0
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	f000 fdde 	bl	800b070 <_sbrk_r>
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	d101      	bne.n	800a4bc <sbrk_aligned+0x38>
 800a4b8:	f04f 34ff 	mov.w	r4, #4294967295
 800a4bc:	4620      	mov	r0, r4
 800a4be:	bd70      	pop	{r4, r5, r6, pc}
 800a4c0:	20010bec 	.word	0x20010bec

0800a4c4 <_malloc_r>:
 800a4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c8:	1ccd      	adds	r5, r1, #3
 800a4ca:	f025 0503 	bic.w	r5, r5, #3
 800a4ce:	3508      	adds	r5, #8
 800a4d0:	2d0c      	cmp	r5, #12
 800a4d2:	bf38      	it	cc
 800a4d4:	250c      	movcc	r5, #12
 800a4d6:	2d00      	cmp	r5, #0
 800a4d8:	4607      	mov	r7, r0
 800a4da:	db01      	blt.n	800a4e0 <_malloc_r+0x1c>
 800a4dc:	42a9      	cmp	r1, r5
 800a4de:	d905      	bls.n	800a4ec <_malloc_r+0x28>
 800a4e0:	230c      	movs	r3, #12
 800a4e2:	603b      	str	r3, [r7, #0]
 800a4e4:	2600      	movs	r6, #0
 800a4e6:	4630      	mov	r0, r6
 800a4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ec:	4e2e      	ldr	r6, [pc, #184]	; (800a5a8 <_malloc_r+0xe4>)
 800a4ee:	f001 feb7 	bl	800c260 <__malloc_lock>
 800a4f2:	6833      	ldr	r3, [r6, #0]
 800a4f4:	461c      	mov	r4, r3
 800a4f6:	bb34      	cbnz	r4, 800a546 <_malloc_r+0x82>
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	f7ff ffc2 	bl	800a484 <sbrk_aligned>
 800a500:	1c43      	adds	r3, r0, #1
 800a502:	4604      	mov	r4, r0
 800a504:	d14d      	bne.n	800a5a2 <_malloc_r+0xde>
 800a506:	6834      	ldr	r4, [r6, #0]
 800a508:	4626      	mov	r6, r4
 800a50a:	2e00      	cmp	r6, #0
 800a50c:	d140      	bne.n	800a590 <_malloc_r+0xcc>
 800a50e:	6823      	ldr	r3, [r4, #0]
 800a510:	4631      	mov	r1, r6
 800a512:	4638      	mov	r0, r7
 800a514:	eb04 0803 	add.w	r8, r4, r3
 800a518:	f000 fdaa 	bl	800b070 <_sbrk_r>
 800a51c:	4580      	cmp	r8, r0
 800a51e:	d13a      	bne.n	800a596 <_malloc_r+0xd2>
 800a520:	6821      	ldr	r1, [r4, #0]
 800a522:	3503      	adds	r5, #3
 800a524:	1a6d      	subs	r5, r5, r1
 800a526:	f025 0503 	bic.w	r5, r5, #3
 800a52a:	3508      	adds	r5, #8
 800a52c:	2d0c      	cmp	r5, #12
 800a52e:	bf38      	it	cc
 800a530:	250c      	movcc	r5, #12
 800a532:	4629      	mov	r1, r5
 800a534:	4638      	mov	r0, r7
 800a536:	f7ff ffa5 	bl	800a484 <sbrk_aligned>
 800a53a:	3001      	adds	r0, #1
 800a53c:	d02b      	beq.n	800a596 <_malloc_r+0xd2>
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	442b      	add	r3, r5
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	e00e      	b.n	800a564 <_malloc_r+0xa0>
 800a546:	6822      	ldr	r2, [r4, #0]
 800a548:	1b52      	subs	r2, r2, r5
 800a54a:	d41e      	bmi.n	800a58a <_malloc_r+0xc6>
 800a54c:	2a0b      	cmp	r2, #11
 800a54e:	d916      	bls.n	800a57e <_malloc_r+0xba>
 800a550:	1961      	adds	r1, r4, r5
 800a552:	42a3      	cmp	r3, r4
 800a554:	6025      	str	r5, [r4, #0]
 800a556:	bf18      	it	ne
 800a558:	6059      	strne	r1, [r3, #4]
 800a55a:	6863      	ldr	r3, [r4, #4]
 800a55c:	bf08      	it	eq
 800a55e:	6031      	streq	r1, [r6, #0]
 800a560:	5162      	str	r2, [r4, r5]
 800a562:	604b      	str	r3, [r1, #4]
 800a564:	4638      	mov	r0, r7
 800a566:	f104 060b 	add.w	r6, r4, #11
 800a56a:	f001 fe7f 	bl	800c26c <__malloc_unlock>
 800a56e:	f026 0607 	bic.w	r6, r6, #7
 800a572:	1d23      	adds	r3, r4, #4
 800a574:	1af2      	subs	r2, r6, r3
 800a576:	d0b6      	beq.n	800a4e6 <_malloc_r+0x22>
 800a578:	1b9b      	subs	r3, r3, r6
 800a57a:	50a3      	str	r3, [r4, r2]
 800a57c:	e7b3      	b.n	800a4e6 <_malloc_r+0x22>
 800a57e:	6862      	ldr	r2, [r4, #4]
 800a580:	42a3      	cmp	r3, r4
 800a582:	bf0c      	ite	eq
 800a584:	6032      	streq	r2, [r6, #0]
 800a586:	605a      	strne	r2, [r3, #4]
 800a588:	e7ec      	b.n	800a564 <_malloc_r+0xa0>
 800a58a:	4623      	mov	r3, r4
 800a58c:	6864      	ldr	r4, [r4, #4]
 800a58e:	e7b2      	b.n	800a4f6 <_malloc_r+0x32>
 800a590:	4634      	mov	r4, r6
 800a592:	6876      	ldr	r6, [r6, #4]
 800a594:	e7b9      	b.n	800a50a <_malloc_r+0x46>
 800a596:	230c      	movs	r3, #12
 800a598:	603b      	str	r3, [r7, #0]
 800a59a:	4638      	mov	r0, r7
 800a59c:	f001 fe66 	bl	800c26c <__malloc_unlock>
 800a5a0:	e7a1      	b.n	800a4e6 <_malloc_r+0x22>
 800a5a2:	6025      	str	r5, [r4, #0]
 800a5a4:	e7de      	b.n	800a564 <_malloc_r+0xa0>
 800a5a6:	bf00      	nop
 800a5a8:	20010be8 	.word	0x20010be8

0800a5ac <__cvt>:
 800a5ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b0:	ec55 4b10 	vmov	r4, r5, d0
 800a5b4:	2d00      	cmp	r5, #0
 800a5b6:	460e      	mov	r6, r1
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	462b      	mov	r3, r5
 800a5bc:	bfbb      	ittet	lt
 800a5be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a5c2:	461d      	movlt	r5, r3
 800a5c4:	2300      	movge	r3, #0
 800a5c6:	232d      	movlt	r3, #45	; 0x2d
 800a5c8:	700b      	strb	r3, [r1, #0]
 800a5ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a5d0:	4691      	mov	r9, r2
 800a5d2:	f023 0820 	bic.w	r8, r3, #32
 800a5d6:	bfbc      	itt	lt
 800a5d8:	4622      	movlt	r2, r4
 800a5da:	4614      	movlt	r4, r2
 800a5dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a5e0:	d005      	beq.n	800a5ee <__cvt+0x42>
 800a5e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a5e6:	d100      	bne.n	800a5ea <__cvt+0x3e>
 800a5e8:	3601      	adds	r6, #1
 800a5ea:	2102      	movs	r1, #2
 800a5ec:	e000      	b.n	800a5f0 <__cvt+0x44>
 800a5ee:	2103      	movs	r1, #3
 800a5f0:	ab03      	add	r3, sp, #12
 800a5f2:	9301      	str	r3, [sp, #4]
 800a5f4:	ab02      	add	r3, sp, #8
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	ec45 4b10 	vmov	d0, r4, r5
 800a5fc:	4653      	mov	r3, sl
 800a5fe:	4632      	mov	r2, r6
 800a600:	f000 fefa 	bl	800b3f8 <_dtoa_r>
 800a604:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a608:	4607      	mov	r7, r0
 800a60a:	d102      	bne.n	800a612 <__cvt+0x66>
 800a60c:	f019 0f01 	tst.w	r9, #1
 800a610:	d022      	beq.n	800a658 <__cvt+0xac>
 800a612:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a616:	eb07 0906 	add.w	r9, r7, r6
 800a61a:	d110      	bne.n	800a63e <__cvt+0x92>
 800a61c:	783b      	ldrb	r3, [r7, #0]
 800a61e:	2b30      	cmp	r3, #48	; 0x30
 800a620:	d10a      	bne.n	800a638 <__cvt+0x8c>
 800a622:	2200      	movs	r2, #0
 800a624:	2300      	movs	r3, #0
 800a626:	4620      	mov	r0, r4
 800a628:	4629      	mov	r1, r5
 800a62a:	f7f6 fa4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a62e:	b918      	cbnz	r0, 800a638 <__cvt+0x8c>
 800a630:	f1c6 0601 	rsb	r6, r6, #1
 800a634:	f8ca 6000 	str.w	r6, [sl]
 800a638:	f8da 3000 	ldr.w	r3, [sl]
 800a63c:	4499      	add	r9, r3
 800a63e:	2200      	movs	r2, #0
 800a640:	2300      	movs	r3, #0
 800a642:	4620      	mov	r0, r4
 800a644:	4629      	mov	r1, r5
 800a646:	f7f6 fa3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a64a:	b108      	cbz	r0, 800a650 <__cvt+0xa4>
 800a64c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a650:	2230      	movs	r2, #48	; 0x30
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	454b      	cmp	r3, r9
 800a656:	d307      	bcc.n	800a668 <__cvt+0xbc>
 800a658:	9b03      	ldr	r3, [sp, #12]
 800a65a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a65c:	1bdb      	subs	r3, r3, r7
 800a65e:	4638      	mov	r0, r7
 800a660:	6013      	str	r3, [r2, #0]
 800a662:	b004      	add	sp, #16
 800a664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a668:	1c59      	adds	r1, r3, #1
 800a66a:	9103      	str	r1, [sp, #12]
 800a66c:	701a      	strb	r2, [r3, #0]
 800a66e:	e7f0      	b.n	800a652 <__cvt+0xa6>

0800a670 <__exponent>:
 800a670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a672:	4603      	mov	r3, r0
 800a674:	2900      	cmp	r1, #0
 800a676:	bfb8      	it	lt
 800a678:	4249      	neglt	r1, r1
 800a67a:	f803 2b02 	strb.w	r2, [r3], #2
 800a67e:	bfb4      	ite	lt
 800a680:	222d      	movlt	r2, #45	; 0x2d
 800a682:	222b      	movge	r2, #43	; 0x2b
 800a684:	2909      	cmp	r1, #9
 800a686:	7042      	strb	r2, [r0, #1]
 800a688:	dd2a      	ble.n	800a6e0 <__exponent+0x70>
 800a68a:	f10d 0407 	add.w	r4, sp, #7
 800a68e:	46a4      	mov	ip, r4
 800a690:	270a      	movs	r7, #10
 800a692:	46a6      	mov	lr, r4
 800a694:	460a      	mov	r2, r1
 800a696:	fb91 f6f7 	sdiv	r6, r1, r7
 800a69a:	fb07 1516 	mls	r5, r7, r6, r1
 800a69e:	3530      	adds	r5, #48	; 0x30
 800a6a0:	2a63      	cmp	r2, #99	; 0x63
 800a6a2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a6a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	dcf1      	bgt.n	800a692 <__exponent+0x22>
 800a6ae:	3130      	adds	r1, #48	; 0x30
 800a6b0:	f1ae 0502 	sub.w	r5, lr, #2
 800a6b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a6b8:	1c44      	adds	r4, r0, #1
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	4561      	cmp	r1, ip
 800a6be:	d30a      	bcc.n	800a6d6 <__exponent+0x66>
 800a6c0:	f10d 0209 	add.w	r2, sp, #9
 800a6c4:	eba2 020e 	sub.w	r2, r2, lr
 800a6c8:	4565      	cmp	r5, ip
 800a6ca:	bf88      	it	hi
 800a6cc:	2200      	movhi	r2, #0
 800a6ce:	4413      	add	r3, r2
 800a6d0:	1a18      	subs	r0, r3, r0
 800a6d2:	b003      	add	sp, #12
 800a6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6da:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a6de:	e7ed      	b.n	800a6bc <__exponent+0x4c>
 800a6e0:	2330      	movs	r3, #48	; 0x30
 800a6e2:	3130      	adds	r1, #48	; 0x30
 800a6e4:	7083      	strb	r3, [r0, #2]
 800a6e6:	70c1      	strb	r1, [r0, #3]
 800a6e8:	1d03      	adds	r3, r0, #4
 800a6ea:	e7f1      	b.n	800a6d0 <__exponent+0x60>

0800a6ec <_printf_float>:
 800a6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f0:	ed2d 8b02 	vpush	{d8}
 800a6f4:	b08d      	sub	sp, #52	; 0x34
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a6fc:	4616      	mov	r6, r2
 800a6fe:	461f      	mov	r7, r3
 800a700:	4605      	mov	r5, r0
 800a702:	f001 fd29 	bl	800c158 <_localeconv_r>
 800a706:	f8d0 a000 	ldr.w	sl, [r0]
 800a70a:	4650      	mov	r0, sl
 800a70c:	f7f5 fd60 	bl	80001d0 <strlen>
 800a710:	2300      	movs	r3, #0
 800a712:	930a      	str	r3, [sp, #40]	; 0x28
 800a714:	6823      	ldr	r3, [r4, #0]
 800a716:	9305      	str	r3, [sp, #20]
 800a718:	f8d8 3000 	ldr.w	r3, [r8]
 800a71c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a720:	3307      	adds	r3, #7
 800a722:	f023 0307 	bic.w	r3, r3, #7
 800a726:	f103 0208 	add.w	r2, r3, #8
 800a72a:	f8c8 2000 	str.w	r2, [r8]
 800a72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a732:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a736:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a73a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a73e:	9307      	str	r3, [sp, #28]
 800a740:	f8cd 8018 	str.w	r8, [sp, #24]
 800a744:	ee08 0a10 	vmov	s16, r0
 800a748:	4b9f      	ldr	r3, [pc, #636]	; (800a9c8 <_printf_float+0x2dc>)
 800a74a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a74e:	f04f 32ff 	mov.w	r2, #4294967295
 800a752:	f7f6 f9eb 	bl	8000b2c <__aeabi_dcmpun>
 800a756:	bb88      	cbnz	r0, 800a7bc <_printf_float+0xd0>
 800a758:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a75c:	4b9a      	ldr	r3, [pc, #616]	; (800a9c8 <_printf_float+0x2dc>)
 800a75e:	f04f 32ff 	mov.w	r2, #4294967295
 800a762:	f7f6 f9c5 	bl	8000af0 <__aeabi_dcmple>
 800a766:	bb48      	cbnz	r0, 800a7bc <_printf_float+0xd0>
 800a768:	2200      	movs	r2, #0
 800a76a:	2300      	movs	r3, #0
 800a76c:	4640      	mov	r0, r8
 800a76e:	4649      	mov	r1, r9
 800a770:	f7f6 f9b4 	bl	8000adc <__aeabi_dcmplt>
 800a774:	b110      	cbz	r0, 800a77c <_printf_float+0x90>
 800a776:	232d      	movs	r3, #45	; 0x2d
 800a778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a77c:	4b93      	ldr	r3, [pc, #588]	; (800a9cc <_printf_float+0x2e0>)
 800a77e:	4894      	ldr	r0, [pc, #592]	; (800a9d0 <_printf_float+0x2e4>)
 800a780:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a784:	bf94      	ite	ls
 800a786:	4698      	movls	r8, r3
 800a788:	4680      	movhi	r8, r0
 800a78a:	2303      	movs	r3, #3
 800a78c:	6123      	str	r3, [r4, #16]
 800a78e:	9b05      	ldr	r3, [sp, #20]
 800a790:	f023 0204 	bic.w	r2, r3, #4
 800a794:	6022      	str	r2, [r4, #0]
 800a796:	f04f 0900 	mov.w	r9, #0
 800a79a:	9700      	str	r7, [sp, #0]
 800a79c:	4633      	mov	r3, r6
 800a79e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a7a0:	4621      	mov	r1, r4
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	f000 f9d8 	bl	800ab58 <_printf_common>
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	f040 8090 	bne.w	800a8ce <_printf_float+0x1e2>
 800a7ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b2:	b00d      	add	sp, #52	; 0x34
 800a7b4:	ecbd 8b02 	vpop	{d8}
 800a7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7bc:	4642      	mov	r2, r8
 800a7be:	464b      	mov	r3, r9
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	f7f6 f9b2 	bl	8000b2c <__aeabi_dcmpun>
 800a7c8:	b140      	cbz	r0, 800a7dc <_printf_float+0xf0>
 800a7ca:	464b      	mov	r3, r9
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	bfbc      	itt	lt
 800a7d0:	232d      	movlt	r3, #45	; 0x2d
 800a7d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a7d6:	487f      	ldr	r0, [pc, #508]	; (800a9d4 <_printf_float+0x2e8>)
 800a7d8:	4b7f      	ldr	r3, [pc, #508]	; (800a9d8 <_printf_float+0x2ec>)
 800a7da:	e7d1      	b.n	800a780 <_printf_float+0x94>
 800a7dc:	6863      	ldr	r3, [r4, #4]
 800a7de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a7e2:	9206      	str	r2, [sp, #24]
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	d13f      	bne.n	800a868 <_printf_float+0x17c>
 800a7e8:	2306      	movs	r3, #6
 800a7ea:	6063      	str	r3, [r4, #4]
 800a7ec:	9b05      	ldr	r3, [sp, #20]
 800a7ee:	6861      	ldr	r1, [r4, #4]
 800a7f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	9303      	str	r3, [sp, #12]
 800a7f8:	ab0a      	add	r3, sp, #40	; 0x28
 800a7fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a7fe:	ab09      	add	r3, sp, #36	; 0x24
 800a800:	ec49 8b10 	vmov	d0, r8, r9
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	6022      	str	r2, [r4, #0]
 800a808:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a80c:	4628      	mov	r0, r5
 800a80e:	f7ff fecd 	bl	800a5ac <__cvt>
 800a812:	9b06      	ldr	r3, [sp, #24]
 800a814:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a816:	2b47      	cmp	r3, #71	; 0x47
 800a818:	4680      	mov	r8, r0
 800a81a:	d108      	bne.n	800a82e <_printf_float+0x142>
 800a81c:	1cc8      	adds	r0, r1, #3
 800a81e:	db02      	blt.n	800a826 <_printf_float+0x13a>
 800a820:	6863      	ldr	r3, [r4, #4]
 800a822:	4299      	cmp	r1, r3
 800a824:	dd41      	ble.n	800a8aa <_printf_float+0x1be>
 800a826:	f1ab 0b02 	sub.w	fp, fp, #2
 800a82a:	fa5f fb8b 	uxtb.w	fp, fp
 800a82e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a832:	d820      	bhi.n	800a876 <_printf_float+0x18a>
 800a834:	3901      	subs	r1, #1
 800a836:	465a      	mov	r2, fp
 800a838:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a83c:	9109      	str	r1, [sp, #36]	; 0x24
 800a83e:	f7ff ff17 	bl	800a670 <__exponent>
 800a842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a844:	1813      	adds	r3, r2, r0
 800a846:	2a01      	cmp	r2, #1
 800a848:	4681      	mov	r9, r0
 800a84a:	6123      	str	r3, [r4, #16]
 800a84c:	dc02      	bgt.n	800a854 <_printf_float+0x168>
 800a84e:	6822      	ldr	r2, [r4, #0]
 800a850:	07d2      	lsls	r2, r2, #31
 800a852:	d501      	bpl.n	800a858 <_printf_float+0x16c>
 800a854:	3301      	adds	r3, #1
 800a856:	6123      	str	r3, [r4, #16]
 800a858:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d09c      	beq.n	800a79a <_printf_float+0xae>
 800a860:	232d      	movs	r3, #45	; 0x2d
 800a862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a866:	e798      	b.n	800a79a <_printf_float+0xae>
 800a868:	9a06      	ldr	r2, [sp, #24]
 800a86a:	2a47      	cmp	r2, #71	; 0x47
 800a86c:	d1be      	bne.n	800a7ec <_printf_float+0x100>
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1bc      	bne.n	800a7ec <_printf_float+0x100>
 800a872:	2301      	movs	r3, #1
 800a874:	e7b9      	b.n	800a7ea <_printf_float+0xfe>
 800a876:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a87a:	d118      	bne.n	800a8ae <_printf_float+0x1c2>
 800a87c:	2900      	cmp	r1, #0
 800a87e:	6863      	ldr	r3, [r4, #4]
 800a880:	dd0b      	ble.n	800a89a <_printf_float+0x1ae>
 800a882:	6121      	str	r1, [r4, #16]
 800a884:	b913      	cbnz	r3, 800a88c <_printf_float+0x1a0>
 800a886:	6822      	ldr	r2, [r4, #0]
 800a888:	07d0      	lsls	r0, r2, #31
 800a88a:	d502      	bpl.n	800a892 <_printf_float+0x1a6>
 800a88c:	3301      	adds	r3, #1
 800a88e:	440b      	add	r3, r1
 800a890:	6123      	str	r3, [r4, #16]
 800a892:	65a1      	str	r1, [r4, #88]	; 0x58
 800a894:	f04f 0900 	mov.w	r9, #0
 800a898:	e7de      	b.n	800a858 <_printf_float+0x16c>
 800a89a:	b913      	cbnz	r3, 800a8a2 <_printf_float+0x1b6>
 800a89c:	6822      	ldr	r2, [r4, #0]
 800a89e:	07d2      	lsls	r2, r2, #31
 800a8a0:	d501      	bpl.n	800a8a6 <_printf_float+0x1ba>
 800a8a2:	3302      	adds	r3, #2
 800a8a4:	e7f4      	b.n	800a890 <_printf_float+0x1a4>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e7f2      	b.n	800a890 <_printf_float+0x1a4>
 800a8aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8b0:	4299      	cmp	r1, r3
 800a8b2:	db05      	blt.n	800a8c0 <_printf_float+0x1d4>
 800a8b4:	6823      	ldr	r3, [r4, #0]
 800a8b6:	6121      	str	r1, [r4, #16]
 800a8b8:	07d8      	lsls	r0, r3, #31
 800a8ba:	d5ea      	bpl.n	800a892 <_printf_float+0x1a6>
 800a8bc:	1c4b      	adds	r3, r1, #1
 800a8be:	e7e7      	b.n	800a890 <_printf_float+0x1a4>
 800a8c0:	2900      	cmp	r1, #0
 800a8c2:	bfd4      	ite	le
 800a8c4:	f1c1 0202 	rsble	r2, r1, #2
 800a8c8:	2201      	movgt	r2, #1
 800a8ca:	4413      	add	r3, r2
 800a8cc:	e7e0      	b.n	800a890 <_printf_float+0x1a4>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	055a      	lsls	r2, r3, #21
 800a8d2:	d407      	bmi.n	800a8e4 <_printf_float+0x1f8>
 800a8d4:	6923      	ldr	r3, [r4, #16]
 800a8d6:	4642      	mov	r2, r8
 800a8d8:	4631      	mov	r1, r6
 800a8da:	4628      	mov	r0, r5
 800a8dc:	47b8      	blx	r7
 800a8de:	3001      	adds	r0, #1
 800a8e0:	d12c      	bne.n	800a93c <_printf_float+0x250>
 800a8e2:	e764      	b.n	800a7ae <_printf_float+0xc2>
 800a8e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8e8:	f240 80e0 	bls.w	800aaac <_printf_float+0x3c0>
 800a8ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f7f6 f8e8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d034      	beq.n	800a966 <_printf_float+0x27a>
 800a8fc:	4a37      	ldr	r2, [pc, #220]	; (800a9dc <_printf_float+0x2f0>)
 800a8fe:	2301      	movs	r3, #1
 800a900:	4631      	mov	r1, r6
 800a902:	4628      	mov	r0, r5
 800a904:	47b8      	blx	r7
 800a906:	3001      	adds	r0, #1
 800a908:	f43f af51 	beq.w	800a7ae <_printf_float+0xc2>
 800a90c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a910:	429a      	cmp	r2, r3
 800a912:	db02      	blt.n	800a91a <_printf_float+0x22e>
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	07d8      	lsls	r0, r3, #31
 800a918:	d510      	bpl.n	800a93c <_printf_float+0x250>
 800a91a:	ee18 3a10 	vmov	r3, s16
 800a91e:	4652      	mov	r2, sl
 800a920:	4631      	mov	r1, r6
 800a922:	4628      	mov	r0, r5
 800a924:	47b8      	blx	r7
 800a926:	3001      	adds	r0, #1
 800a928:	f43f af41 	beq.w	800a7ae <_printf_float+0xc2>
 800a92c:	f04f 0800 	mov.w	r8, #0
 800a930:	f104 091a 	add.w	r9, r4, #26
 800a934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a936:	3b01      	subs	r3, #1
 800a938:	4543      	cmp	r3, r8
 800a93a:	dc09      	bgt.n	800a950 <_printf_float+0x264>
 800a93c:	6823      	ldr	r3, [r4, #0]
 800a93e:	079b      	lsls	r3, r3, #30
 800a940:	f100 8105 	bmi.w	800ab4e <_printf_float+0x462>
 800a944:	68e0      	ldr	r0, [r4, #12]
 800a946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a948:	4298      	cmp	r0, r3
 800a94a:	bfb8      	it	lt
 800a94c:	4618      	movlt	r0, r3
 800a94e:	e730      	b.n	800a7b2 <_printf_float+0xc6>
 800a950:	2301      	movs	r3, #1
 800a952:	464a      	mov	r2, r9
 800a954:	4631      	mov	r1, r6
 800a956:	4628      	mov	r0, r5
 800a958:	47b8      	blx	r7
 800a95a:	3001      	adds	r0, #1
 800a95c:	f43f af27 	beq.w	800a7ae <_printf_float+0xc2>
 800a960:	f108 0801 	add.w	r8, r8, #1
 800a964:	e7e6      	b.n	800a934 <_printf_float+0x248>
 800a966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a968:	2b00      	cmp	r3, #0
 800a96a:	dc39      	bgt.n	800a9e0 <_printf_float+0x2f4>
 800a96c:	4a1b      	ldr	r2, [pc, #108]	; (800a9dc <_printf_float+0x2f0>)
 800a96e:	2301      	movs	r3, #1
 800a970:	4631      	mov	r1, r6
 800a972:	4628      	mov	r0, r5
 800a974:	47b8      	blx	r7
 800a976:	3001      	adds	r0, #1
 800a978:	f43f af19 	beq.w	800a7ae <_printf_float+0xc2>
 800a97c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a980:	4313      	orrs	r3, r2
 800a982:	d102      	bne.n	800a98a <_printf_float+0x29e>
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	07d9      	lsls	r1, r3, #31
 800a988:	d5d8      	bpl.n	800a93c <_printf_float+0x250>
 800a98a:	ee18 3a10 	vmov	r3, s16
 800a98e:	4652      	mov	r2, sl
 800a990:	4631      	mov	r1, r6
 800a992:	4628      	mov	r0, r5
 800a994:	47b8      	blx	r7
 800a996:	3001      	adds	r0, #1
 800a998:	f43f af09 	beq.w	800a7ae <_printf_float+0xc2>
 800a99c:	f04f 0900 	mov.w	r9, #0
 800a9a0:	f104 0a1a 	add.w	sl, r4, #26
 800a9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a6:	425b      	negs	r3, r3
 800a9a8:	454b      	cmp	r3, r9
 800a9aa:	dc01      	bgt.n	800a9b0 <_printf_float+0x2c4>
 800a9ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ae:	e792      	b.n	800a8d6 <_printf_float+0x1ea>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	4652      	mov	r2, sl
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	47b8      	blx	r7
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	f43f aef7 	beq.w	800a7ae <_printf_float+0xc2>
 800a9c0:	f109 0901 	add.w	r9, r9, #1
 800a9c4:	e7ee      	b.n	800a9a4 <_printf_float+0x2b8>
 800a9c6:	bf00      	nop
 800a9c8:	7fefffff 	.word	0x7fefffff
 800a9cc:	08021e44 	.word	0x08021e44
 800a9d0:	08021e48 	.word	0x08021e48
 800a9d4:	08021e50 	.word	0x08021e50
 800a9d8:	08021e4c 	.word	0x08021e4c
 800a9dc:	08021e54 	.word	0x08021e54
 800a9e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	bfa8      	it	ge
 800a9e8:	461a      	movge	r2, r3
 800a9ea:	2a00      	cmp	r2, #0
 800a9ec:	4691      	mov	r9, r2
 800a9ee:	dc37      	bgt.n	800aa60 <_printf_float+0x374>
 800a9f0:	f04f 0b00 	mov.w	fp, #0
 800a9f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9f8:	f104 021a 	add.w	r2, r4, #26
 800a9fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9fe:	9305      	str	r3, [sp, #20]
 800aa00:	eba3 0309 	sub.w	r3, r3, r9
 800aa04:	455b      	cmp	r3, fp
 800aa06:	dc33      	bgt.n	800aa70 <_printf_float+0x384>
 800aa08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	db3b      	blt.n	800aa88 <_printf_float+0x39c>
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	07da      	lsls	r2, r3, #31
 800aa14:	d438      	bmi.n	800aa88 <_printf_float+0x39c>
 800aa16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa18:	9a05      	ldr	r2, [sp, #20]
 800aa1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa1c:	1a9a      	subs	r2, r3, r2
 800aa1e:	eba3 0901 	sub.w	r9, r3, r1
 800aa22:	4591      	cmp	r9, r2
 800aa24:	bfa8      	it	ge
 800aa26:	4691      	movge	r9, r2
 800aa28:	f1b9 0f00 	cmp.w	r9, #0
 800aa2c:	dc35      	bgt.n	800aa9a <_printf_float+0x3ae>
 800aa2e:	f04f 0800 	mov.w	r8, #0
 800aa32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa36:	f104 0a1a 	add.w	sl, r4, #26
 800aa3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa3e:	1a9b      	subs	r3, r3, r2
 800aa40:	eba3 0309 	sub.w	r3, r3, r9
 800aa44:	4543      	cmp	r3, r8
 800aa46:	f77f af79 	ble.w	800a93c <_printf_float+0x250>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	4652      	mov	r2, sl
 800aa4e:	4631      	mov	r1, r6
 800aa50:	4628      	mov	r0, r5
 800aa52:	47b8      	blx	r7
 800aa54:	3001      	adds	r0, #1
 800aa56:	f43f aeaa 	beq.w	800a7ae <_printf_float+0xc2>
 800aa5a:	f108 0801 	add.w	r8, r8, #1
 800aa5e:	e7ec      	b.n	800aa3a <_printf_float+0x34e>
 800aa60:	4613      	mov	r3, r2
 800aa62:	4631      	mov	r1, r6
 800aa64:	4642      	mov	r2, r8
 800aa66:	4628      	mov	r0, r5
 800aa68:	47b8      	blx	r7
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	d1c0      	bne.n	800a9f0 <_printf_float+0x304>
 800aa6e:	e69e      	b.n	800a7ae <_printf_float+0xc2>
 800aa70:	2301      	movs	r3, #1
 800aa72:	4631      	mov	r1, r6
 800aa74:	4628      	mov	r0, r5
 800aa76:	9205      	str	r2, [sp, #20]
 800aa78:	47b8      	blx	r7
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	f43f ae97 	beq.w	800a7ae <_printf_float+0xc2>
 800aa80:	9a05      	ldr	r2, [sp, #20]
 800aa82:	f10b 0b01 	add.w	fp, fp, #1
 800aa86:	e7b9      	b.n	800a9fc <_printf_float+0x310>
 800aa88:	ee18 3a10 	vmov	r3, s16
 800aa8c:	4652      	mov	r2, sl
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4628      	mov	r0, r5
 800aa92:	47b8      	blx	r7
 800aa94:	3001      	adds	r0, #1
 800aa96:	d1be      	bne.n	800aa16 <_printf_float+0x32a>
 800aa98:	e689      	b.n	800a7ae <_printf_float+0xc2>
 800aa9a:	9a05      	ldr	r2, [sp, #20]
 800aa9c:	464b      	mov	r3, r9
 800aa9e:	4442      	add	r2, r8
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	47b8      	blx	r7
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	d1c1      	bne.n	800aa2e <_printf_float+0x342>
 800aaaa:	e680      	b.n	800a7ae <_printf_float+0xc2>
 800aaac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaae:	2a01      	cmp	r2, #1
 800aab0:	dc01      	bgt.n	800aab6 <_printf_float+0x3ca>
 800aab2:	07db      	lsls	r3, r3, #31
 800aab4:	d538      	bpl.n	800ab28 <_printf_float+0x43c>
 800aab6:	2301      	movs	r3, #1
 800aab8:	4642      	mov	r2, r8
 800aaba:	4631      	mov	r1, r6
 800aabc:	4628      	mov	r0, r5
 800aabe:	47b8      	blx	r7
 800aac0:	3001      	adds	r0, #1
 800aac2:	f43f ae74 	beq.w	800a7ae <_printf_float+0xc2>
 800aac6:	ee18 3a10 	vmov	r3, s16
 800aaca:	4652      	mov	r2, sl
 800aacc:	4631      	mov	r1, r6
 800aace:	4628      	mov	r0, r5
 800aad0:	47b8      	blx	r7
 800aad2:	3001      	adds	r0, #1
 800aad4:	f43f ae6b 	beq.w	800a7ae <_printf_float+0xc2>
 800aad8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aadc:	2200      	movs	r2, #0
 800aade:	2300      	movs	r3, #0
 800aae0:	f7f5 fff2 	bl	8000ac8 <__aeabi_dcmpeq>
 800aae4:	b9d8      	cbnz	r0, 800ab1e <_printf_float+0x432>
 800aae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae8:	f108 0201 	add.w	r2, r8, #1
 800aaec:	3b01      	subs	r3, #1
 800aaee:	4631      	mov	r1, r6
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	47b8      	blx	r7
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	d10e      	bne.n	800ab16 <_printf_float+0x42a>
 800aaf8:	e659      	b.n	800a7ae <_printf_float+0xc2>
 800aafa:	2301      	movs	r3, #1
 800aafc:	4652      	mov	r2, sl
 800aafe:	4631      	mov	r1, r6
 800ab00:	4628      	mov	r0, r5
 800ab02:	47b8      	blx	r7
 800ab04:	3001      	adds	r0, #1
 800ab06:	f43f ae52 	beq.w	800a7ae <_printf_float+0xc2>
 800ab0a:	f108 0801 	add.w	r8, r8, #1
 800ab0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab10:	3b01      	subs	r3, #1
 800ab12:	4543      	cmp	r3, r8
 800ab14:	dcf1      	bgt.n	800aafa <_printf_float+0x40e>
 800ab16:	464b      	mov	r3, r9
 800ab18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab1c:	e6dc      	b.n	800a8d8 <_printf_float+0x1ec>
 800ab1e:	f04f 0800 	mov.w	r8, #0
 800ab22:	f104 0a1a 	add.w	sl, r4, #26
 800ab26:	e7f2      	b.n	800ab0e <_printf_float+0x422>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	4642      	mov	r2, r8
 800ab2c:	e7df      	b.n	800aaee <_printf_float+0x402>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	464a      	mov	r2, r9
 800ab32:	4631      	mov	r1, r6
 800ab34:	4628      	mov	r0, r5
 800ab36:	47b8      	blx	r7
 800ab38:	3001      	adds	r0, #1
 800ab3a:	f43f ae38 	beq.w	800a7ae <_printf_float+0xc2>
 800ab3e:	f108 0801 	add.w	r8, r8, #1
 800ab42:	68e3      	ldr	r3, [r4, #12]
 800ab44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab46:	1a5b      	subs	r3, r3, r1
 800ab48:	4543      	cmp	r3, r8
 800ab4a:	dcf0      	bgt.n	800ab2e <_printf_float+0x442>
 800ab4c:	e6fa      	b.n	800a944 <_printf_float+0x258>
 800ab4e:	f04f 0800 	mov.w	r8, #0
 800ab52:	f104 0919 	add.w	r9, r4, #25
 800ab56:	e7f4      	b.n	800ab42 <_printf_float+0x456>

0800ab58 <_printf_common>:
 800ab58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab5c:	4616      	mov	r6, r2
 800ab5e:	4699      	mov	r9, r3
 800ab60:	688a      	ldr	r2, [r1, #8]
 800ab62:	690b      	ldr	r3, [r1, #16]
 800ab64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	bfb8      	it	lt
 800ab6c:	4613      	movlt	r3, r2
 800ab6e:	6033      	str	r3, [r6, #0]
 800ab70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab74:	4607      	mov	r7, r0
 800ab76:	460c      	mov	r4, r1
 800ab78:	b10a      	cbz	r2, 800ab7e <_printf_common+0x26>
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	6033      	str	r3, [r6, #0]
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	0699      	lsls	r1, r3, #26
 800ab82:	bf42      	ittt	mi
 800ab84:	6833      	ldrmi	r3, [r6, #0]
 800ab86:	3302      	addmi	r3, #2
 800ab88:	6033      	strmi	r3, [r6, #0]
 800ab8a:	6825      	ldr	r5, [r4, #0]
 800ab8c:	f015 0506 	ands.w	r5, r5, #6
 800ab90:	d106      	bne.n	800aba0 <_printf_common+0x48>
 800ab92:	f104 0a19 	add.w	sl, r4, #25
 800ab96:	68e3      	ldr	r3, [r4, #12]
 800ab98:	6832      	ldr	r2, [r6, #0]
 800ab9a:	1a9b      	subs	r3, r3, r2
 800ab9c:	42ab      	cmp	r3, r5
 800ab9e:	dc26      	bgt.n	800abee <_printf_common+0x96>
 800aba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aba4:	1e13      	subs	r3, r2, #0
 800aba6:	6822      	ldr	r2, [r4, #0]
 800aba8:	bf18      	it	ne
 800abaa:	2301      	movne	r3, #1
 800abac:	0692      	lsls	r2, r2, #26
 800abae:	d42b      	bmi.n	800ac08 <_printf_common+0xb0>
 800abb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abb4:	4649      	mov	r1, r9
 800abb6:	4638      	mov	r0, r7
 800abb8:	47c0      	blx	r8
 800abba:	3001      	adds	r0, #1
 800abbc:	d01e      	beq.n	800abfc <_printf_common+0xa4>
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	68e5      	ldr	r5, [r4, #12]
 800abc2:	6832      	ldr	r2, [r6, #0]
 800abc4:	f003 0306 	and.w	r3, r3, #6
 800abc8:	2b04      	cmp	r3, #4
 800abca:	bf08      	it	eq
 800abcc:	1aad      	subeq	r5, r5, r2
 800abce:	68a3      	ldr	r3, [r4, #8]
 800abd0:	6922      	ldr	r2, [r4, #16]
 800abd2:	bf0c      	ite	eq
 800abd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abd8:	2500      	movne	r5, #0
 800abda:	4293      	cmp	r3, r2
 800abdc:	bfc4      	itt	gt
 800abde:	1a9b      	subgt	r3, r3, r2
 800abe0:	18ed      	addgt	r5, r5, r3
 800abe2:	2600      	movs	r6, #0
 800abe4:	341a      	adds	r4, #26
 800abe6:	42b5      	cmp	r5, r6
 800abe8:	d11a      	bne.n	800ac20 <_printf_common+0xc8>
 800abea:	2000      	movs	r0, #0
 800abec:	e008      	b.n	800ac00 <_printf_common+0xa8>
 800abee:	2301      	movs	r3, #1
 800abf0:	4652      	mov	r2, sl
 800abf2:	4649      	mov	r1, r9
 800abf4:	4638      	mov	r0, r7
 800abf6:	47c0      	blx	r8
 800abf8:	3001      	adds	r0, #1
 800abfa:	d103      	bne.n	800ac04 <_printf_common+0xac>
 800abfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ac00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac04:	3501      	adds	r5, #1
 800ac06:	e7c6      	b.n	800ab96 <_printf_common+0x3e>
 800ac08:	18e1      	adds	r1, r4, r3
 800ac0a:	1c5a      	adds	r2, r3, #1
 800ac0c:	2030      	movs	r0, #48	; 0x30
 800ac0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac12:	4422      	add	r2, r4
 800ac14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac1c:	3302      	adds	r3, #2
 800ac1e:	e7c7      	b.n	800abb0 <_printf_common+0x58>
 800ac20:	2301      	movs	r3, #1
 800ac22:	4622      	mov	r2, r4
 800ac24:	4649      	mov	r1, r9
 800ac26:	4638      	mov	r0, r7
 800ac28:	47c0      	blx	r8
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	d0e6      	beq.n	800abfc <_printf_common+0xa4>
 800ac2e:	3601      	adds	r6, #1
 800ac30:	e7d9      	b.n	800abe6 <_printf_common+0x8e>
	...

0800ac34 <_printf_i>:
 800ac34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac38:	7e0f      	ldrb	r7, [r1, #24]
 800ac3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac3c:	2f78      	cmp	r7, #120	; 0x78
 800ac3e:	4691      	mov	r9, r2
 800ac40:	4680      	mov	r8, r0
 800ac42:	460c      	mov	r4, r1
 800ac44:	469a      	mov	sl, r3
 800ac46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac4a:	d807      	bhi.n	800ac5c <_printf_i+0x28>
 800ac4c:	2f62      	cmp	r7, #98	; 0x62
 800ac4e:	d80a      	bhi.n	800ac66 <_printf_i+0x32>
 800ac50:	2f00      	cmp	r7, #0
 800ac52:	f000 80d8 	beq.w	800ae06 <_printf_i+0x1d2>
 800ac56:	2f58      	cmp	r7, #88	; 0x58
 800ac58:	f000 80a3 	beq.w	800ada2 <_printf_i+0x16e>
 800ac5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac64:	e03a      	b.n	800acdc <_printf_i+0xa8>
 800ac66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac6a:	2b15      	cmp	r3, #21
 800ac6c:	d8f6      	bhi.n	800ac5c <_printf_i+0x28>
 800ac6e:	a101      	add	r1, pc, #4	; (adr r1, 800ac74 <_printf_i+0x40>)
 800ac70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac74:	0800accd 	.word	0x0800accd
 800ac78:	0800ace1 	.word	0x0800ace1
 800ac7c:	0800ac5d 	.word	0x0800ac5d
 800ac80:	0800ac5d 	.word	0x0800ac5d
 800ac84:	0800ac5d 	.word	0x0800ac5d
 800ac88:	0800ac5d 	.word	0x0800ac5d
 800ac8c:	0800ace1 	.word	0x0800ace1
 800ac90:	0800ac5d 	.word	0x0800ac5d
 800ac94:	0800ac5d 	.word	0x0800ac5d
 800ac98:	0800ac5d 	.word	0x0800ac5d
 800ac9c:	0800ac5d 	.word	0x0800ac5d
 800aca0:	0800aded 	.word	0x0800aded
 800aca4:	0800ad11 	.word	0x0800ad11
 800aca8:	0800adcf 	.word	0x0800adcf
 800acac:	0800ac5d 	.word	0x0800ac5d
 800acb0:	0800ac5d 	.word	0x0800ac5d
 800acb4:	0800ae0f 	.word	0x0800ae0f
 800acb8:	0800ac5d 	.word	0x0800ac5d
 800acbc:	0800ad11 	.word	0x0800ad11
 800acc0:	0800ac5d 	.word	0x0800ac5d
 800acc4:	0800ac5d 	.word	0x0800ac5d
 800acc8:	0800add7 	.word	0x0800add7
 800accc:	682b      	ldr	r3, [r5, #0]
 800acce:	1d1a      	adds	r2, r3, #4
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	602a      	str	r2, [r5, #0]
 800acd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acdc:	2301      	movs	r3, #1
 800acde:	e0a3      	b.n	800ae28 <_printf_i+0x1f4>
 800ace0:	6820      	ldr	r0, [r4, #0]
 800ace2:	6829      	ldr	r1, [r5, #0]
 800ace4:	0606      	lsls	r6, r0, #24
 800ace6:	f101 0304 	add.w	r3, r1, #4
 800acea:	d50a      	bpl.n	800ad02 <_printf_i+0xce>
 800acec:	680e      	ldr	r6, [r1, #0]
 800acee:	602b      	str	r3, [r5, #0]
 800acf0:	2e00      	cmp	r6, #0
 800acf2:	da03      	bge.n	800acfc <_printf_i+0xc8>
 800acf4:	232d      	movs	r3, #45	; 0x2d
 800acf6:	4276      	negs	r6, r6
 800acf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acfc:	485e      	ldr	r0, [pc, #376]	; (800ae78 <_printf_i+0x244>)
 800acfe:	230a      	movs	r3, #10
 800ad00:	e019      	b.n	800ad36 <_printf_i+0x102>
 800ad02:	680e      	ldr	r6, [r1, #0]
 800ad04:	602b      	str	r3, [r5, #0]
 800ad06:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad0a:	bf18      	it	ne
 800ad0c:	b236      	sxthne	r6, r6
 800ad0e:	e7ef      	b.n	800acf0 <_printf_i+0xbc>
 800ad10:	682b      	ldr	r3, [r5, #0]
 800ad12:	6820      	ldr	r0, [r4, #0]
 800ad14:	1d19      	adds	r1, r3, #4
 800ad16:	6029      	str	r1, [r5, #0]
 800ad18:	0601      	lsls	r1, r0, #24
 800ad1a:	d501      	bpl.n	800ad20 <_printf_i+0xec>
 800ad1c:	681e      	ldr	r6, [r3, #0]
 800ad1e:	e002      	b.n	800ad26 <_printf_i+0xf2>
 800ad20:	0646      	lsls	r6, r0, #25
 800ad22:	d5fb      	bpl.n	800ad1c <_printf_i+0xe8>
 800ad24:	881e      	ldrh	r6, [r3, #0]
 800ad26:	4854      	ldr	r0, [pc, #336]	; (800ae78 <_printf_i+0x244>)
 800ad28:	2f6f      	cmp	r7, #111	; 0x6f
 800ad2a:	bf0c      	ite	eq
 800ad2c:	2308      	moveq	r3, #8
 800ad2e:	230a      	movne	r3, #10
 800ad30:	2100      	movs	r1, #0
 800ad32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad36:	6865      	ldr	r5, [r4, #4]
 800ad38:	60a5      	str	r5, [r4, #8]
 800ad3a:	2d00      	cmp	r5, #0
 800ad3c:	bfa2      	ittt	ge
 800ad3e:	6821      	ldrge	r1, [r4, #0]
 800ad40:	f021 0104 	bicge.w	r1, r1, #4
 800ad44:	6021      	strge	r1, [r4, #0]
 800ad46:	b90e      	cbnz	r6, 800ad4c <_printf_i+0x118>
 800ad48:	2d00      	cmp	r5, #0
 800ad4a:	d04d      	beq.n	800ade8 <_printf_i+0x1b4>
 800ad4c:	4615      	mov	r5, r2
 800ad4e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad52:	fb03 6711 	mls	r7, r3, r1, r6
 800ad56:	5dc7      	ldrb	r7, [r0, r7]
 800ad58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad5c:	4637      	mov	r7, r6
 800ad5e:	42bb      	cmp	r3, r7
 800ad60:	460e      	mov	r6, r1
 800ad62:	d9f4      	bls.n	800ad4e <_printf_i+0x11a>
 800ad64:	2b08      	cmp	r3, #8
 800ad66:	d10b      	bne.n	800ad80 <_printf_i+0x14c>
 800ad68:	6823      	ldr	r3, [r4, #0]
 800ad6a:	07de      	lsls	r6, r3, #31
 800ad6c:	d508      	bpl.n	800ad80 <_printf_i+0x14c>
 800ad6e:	6923      	ldr	r3, [r4, #16]
 800ad70:	6861      	ldr	r1, [r4, #4]
 800ad72:	4299      	cmp	r1, r3
 800ad74:	bfde      	ittt	le
 800ad76:	2330      	movle	r3, #48	; 0x30
 800ad78:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad80:	1b52      	subs	r2, r2, r5
 800ad82:	6122      	str	r2, [r4, #16]
 800ad84:	f8cd a000 	str.w	sl, [sp]
 800ad88:	464b      	mov	r3, r9
 800ad8a:	aa03      	add	r2, sp, #12
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	4640      	mov	r0, r8
 800ad90:	f7ff fee2 	bl	800ab58 <_printf_common>
 800ad94:	3001      	adds	r0, #1
 800ad96:	d14c      	bne.n	800ae32 <_printf_i+0x1fe>
 800ad98:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9c:	b004      	add	sp, #16
 800ad9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada2:	4835      	ldr	r0, [pc, #212]	; (800ae78 <_printf_i+0x244>)
 800ada4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ada8:	6829      	ldr	r1, [r5, #0]
 800adaa:	6823      	ldr	r3, [r4, #0]
 800adac:	f851 6b04 	ldr.w	r6, [r1], #4
 800adb0:	6029      	str	r1, [r5, #0]
 800adb2:	061d      	lsls	r5, r3, #24
 800adb4:	d514      	bpl.n	800ade0 <_printf_i+0x1ac>
 800adb6:	07df      	lsls	r7, r3, #31
 800adb8:	bf44      	itt	mi
 800adba:	f043 0320 	orrmi.w	r3, r3, #32
 800adbe:	6023      	strmi	r3, [r4, #0]
 800adc0:	b91e      	cbnz	r6, 800adca <_printf_i+0x196>
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	f023 0320 	bic.w	r3, r3, #32
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	2310      	movs	r3, #16
 800adcc:	e7b0      	b.n	800ad30 <_printf_i+0xfc>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	f043 0320 	orr.w	r3, r3, #32
 800add4:	6023      	str	r3, [r4, #0]
 800add6:	2378      	movs	r3, #120	; 0x78
 800add8:	4828      	ldr	r0, [pc, #160]	; (800ae7c <_printf_i+0x248>)
 800adda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800adde:	e7e3      	b.n	800ada8 <_printf_i+0x174>
 800ade0:	0659      	lsls	r1, r3, #25
 800ade2:	bf48      	it	mi
 800ade4:	b2b6      	uxthmi	r6, r6
 800ade6:	e7e6      	b.n	800adb6 <_printf_i+0x182>
 800ade8:	4615      	mov	r5, r2
 800adea:	e7bb      	b.n	800ad64 <_printf_i+0x130>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	6826      	ldr	r6, [r4, #0]
 800adf0:	6961      	ldr	r1, [r4, #20]
 800adf2:	1d18      	adds	r0, r3, #4
 800adf4:	6028      	str	r0, [r5, #0]
 800adf6:	0635      	lsls	r5, r6, #24
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	d501      	bpl.n	800ae00 <_printf_i+0x1cc>
 800adfc:	6019      	str	r1, [r3, #0]
 800adfe:	e002      	b.n	800ae06 <_printf_i+0x1d2>
 800ae00:	0670      	lsls	r0, r6, #25
 800ae02:	d5fb      	bpl.n	800adfc <_printf_i+0x1c8>
 800ae04:	8019      	strh	r1, [r3, #0]
 800ae06:	2300      	movs	r3, #0
 800ae08:	6123      	str	r3, [r4, #16]
 800ae0a:	4615      	mov	r5, r2
 800ae0c:	e7ba      	b.n	800ad84 <_printf_i+0x150>
 800ae0e:	682b      	ldr	r3, [r5, #0]
 800ae10:	1d1a      	adds	r2, r3, #4
 800ae12:	602a      	str	r2, [r5, #0]
 800ae14:	681d      	ldr	r5, [r3, #0]
 800ae16:	6862      	ldr	r2, [r4, #4]
 800ae18:	2100      	movs	r1, #0
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	f7f5 f9e0 	bl	80001e0 <memchr>
 800ae20:	b108      	cbz	r0, 800ae26 <_printf_i+0x1f2>
 800ae22:	1b40      	subs	r0, r0, r5
 800ae24:	6060      	str	r0, [r4, #4]
 800ae26:	6863      	ldr	r3, [r4, #4]
 800ae28:	6123      	str	r3, [r4, #16]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae30:	e7a8      	b.n	800ad84 <_printf_i+0x150>
 800ae32:	6923      	ldr	r3, [r4, #16]
 800ae34:	462a      	mov	r2, r5
 800ae36:	4649      	mov	r1, r9
 800ae38:	4640      	mov	r0, r8
 800ae3a:	47d0      	blx	sl
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	d0ab      	beq.n	800ad98 <_printf_i+0x164>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	079b      	lsls	r3, r3, #30
 800ae44:	d413      	bmi.n	800ae6e <_printf_i+0x23a>
 800ae46:	68e0      	ldr	r0, [r4, #12]
 800ae48:	9b03      	ldr	r3, [sp, #12]
 800ae4a:	4298      	cmp	r0, r3
 800ae4c:	bfb8      	it	lt
 800ae4e:	4618      	movlt	r0, r3
 800ae50:	e7a4      	b.n	800ad9c <_printf_i+0x168>
 800ae52:	2301      	movs	r3, #1
 800ae54:	4632      	mov	r2, r6
 800ae56:	4649      	mov	r1, r9
 800ae58:	4640      	mov	r0, r8
 800ae5a:	47d0      	blx	sl
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	d09b      	beq.n	800ad98 <_printf_i+0x164>
 800ae60:	3501      	adds	r5, #1
 800ae62:	68e3      	ldr	r3, [r4, #12]
 800ae64:	9903      	ldr	r1, [sp, #12]
 800ae66:	1a5b      	subs	r3, r3, r1
 800ae68:	42ab      	cmp	r3, r5
 800ae6a:	dcf2      	bgt.n	800ae52 <_printf_i+0x21e>
 800ae6c:	e7eb      	b.n	800ae46 <_printf_i+0x212>
 800ae6e:	2500      	movs	r5, #0
 800ae70:	f104 0619 	add.w	r6, r4, #25
 800ae74:	e7f5      	b.n	800ae62 <_printf_i+0x22e>
 800ae76:	bf00      	nop
 800ae78:	08021e56 	.word	0x08021e56
 800ae7c:	08021e67 	.word	0x08021e67

0800ae80 <iprintf>:
 800ae80:	b40f      	push	{r0, r1, r2, r3}
 800ae82:	4b0a      	ldr	r3, [pc, #40]	; (800aeac <iprintf+0x2c>)
 800ae84:	b513      	push	{r0, r1, r4, lr}
 800ae86:	681c      	ldr	r4, [r3, #0]
 800ae88:	b124      	cbz	r4, 800ae94 <iprintf+0x14>
 800ae8a:	69a3      	ldr	r3, [r4, #24]
 800ae8c:	b913      	cbnz	r3, 800ae94 <iprintf+0x14>
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f7ff fa1c 	bl	800a2cc <__sinit>
 800ae94:	ab05      	add	r3, sp, #20
 800ae96:	9a04      	ldr	r2, [sp, #16]
 800ae98:	68a1      	ldr	r1, [r4, #8]
 800ae9a:	9301      	str	r3, [sp, #4]
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f001 fdfb 	bl	800ca98 <_vfiprintf_r>
 800aea2:	b002      	add	sp, #8
 800aea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea8:	b004      	add	sp, #16
 800aeaa:	4770      	bx	lr
 800aeac:	20000014 	.word	0x20000014

0800aeb0 <_puts_r>:
 800aeb0:	b570      	push	{r4, r5, r6, lr}
 800aeb2:	460e      	mov	r6, r1
 800aeb4:	4605      	mov	r5, r0
 800aeb6:	b118      	cbz	r0, 800aec0 <_puts_r+0x10>
 800aeb8:	6983      	ldr	r3, [r0, #24]
 800aeba:	b90b      	cbnz	r3, 800aec0 <_puts_r+0x10>
 800aebc:	f7ff fa06 	bl	800a2cc <__sinit>
 800aec0:	69ab      	ldr	r3, [r5, #24]
 800aec2:	68ac      	ldr	r4, [r5, #8]
 800aec4:	b913      	cbnz	r3, 800aecc <_puts_r+0x1c>
 800aec6:	4628      	mov	r0, r5
 800aec8:	f7ff fa00 	bl	800a2cc <__sinit>
 800aecc:	4b2c      	ldr	r3, [pc, #176]	; (800af80 <_puts_r+0xd0>)
 800aece:	429c      	cmp	r4, r3
 800aed0:	d120      	bne.n	800af14 <_puts_r+0x64>
 800aed2:	686c      	ldr	r4, [r5, #4]
 800aed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aed6:	07db      	lsls	r3, r3, #31
 800aed8:	d405      	bmi.n	800aee6 <_puts_r+0x36>
 800aeda:	89a3      	ldrh	r3, [r4, #12]
 800aedc:	0598      	lsls	r0, r3, #22
 800aede:	d402      	bmi.n	800aee6 <_puts_r+0x36>
 800aee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aee2:	f7ff fab6 	bl	800a452 <__retarget_lock_acquire_recursive>
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	0719      	lsls	r1, r3, #28
 800aeea:	d51d      	bpl.n	800af28 <_puts_r+0x78>
 800aeec:	6923      	ldr	r3, [r4, #16]
 800aeee:	b1db      	cbz	r3, 800af28 <_puts_r+0x78>
 800aef0:	3e01      	subs	r6, #1
 800aef2:	68a3      	ldr	r3, [r4, #8]
 800aef4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aef8:	3b01      	subs	r3, #1
 800aefa:	60a3      	str	r3, [r4, #8]
 800aefc:	bb39      	cbnz	r1, 800af4e <_puts_r+0x9e>
 800aefe:	2b00      	cmp	r3, #0
 800af00:	da38      	bge.n	800af74 <_puts_r+0xc4>
 800af02:	4622      	mov	r2, r4
 800af04:	210a      	movs	r1, #10
 800af06:	4628      	mov	r0, r5
 800af08:	f000 f906 	bl	800b118 <__swbuf_r>
 800af0c:	3001      	adds	r0, #1
 800af0e:	d011      	beq.n	800af34 <_puts_r+0x84>
 800af10:	250a      	movs	r5, #10
 800af12:	e011      	b.n	800af38 <_puts_r+0x88>
 800af14:	4b1b      	ldr	r3, [pc, #108]	; (800af84 <_puts_r+0xd4>)
 800af16:	429c      	cmp	r4, r3
 800af18:	d101      	bne.n	800af1e <_puts_r+0x6e>
 800af1a:	68ac      	ldr	r4, [r5, #8]
 800af1c:	e7da      	b.n	800aed4 <_puts_r+0x24>
 800af1e:	4b1a      	ldr	r3, [pc, #104]	; (800af88 <_puts_r+0xd8>)
 800af20:	429c      	cmp	r4, r3
 800af22:	bf08      	it	eq
 800af24:	68ec      	ldreq	r4, [r5, #12]
 800af26:	e7d5      	b.n	800aed4 <_puts_r+0x24>
 800af28:	4621      	mov	r1, r4
 800af2a:	4628      	mov	r0, r5
 800af2c:	f000 f958 	bl	800b1e0 <__swsetup_r>
 800af30:	2800      	cmp	r0, #0
 800af32:	d0dd      	beq.n	800aef0 <_puts_r+0x40>
 800af34:	f04f 35ff 	mov.w	r5, #4294967295
 800af38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af3a:	07da      	lsls	r2, r3, #31
 800af3c:	d405      	bmi.n	800af4a <_puts_r+0x9a>
 800af3e:	89a3      	ldrh	r3, [r4, #12]
 800af40:	059b      	lsls	r3, r3, #22
 800af42:	d402      	bmi.n	800af4a <_puts_r+0x9a>
 800af44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af46:	f7ff fa85 	bl	800a454 <__retarget_lock_release_recursive>
 800af4a:	4628      	mov	r0, r5
 800af4c:	bd70      	pop	{r4, r5, r6, pc}
 800af4e:	2b00      	cmp	r3, #0
 800af50:	da04      	bge.n	800af5c <_puts_r+0xac>
 800af52:	69a2      	ldr	r2, [r4, #24]
 800af54:	429a      	cmp	r2, r3
 800af56:	dc06      	bgt.n	800af66 <_puts_r+0xb6>
 800af58:	290a      	cmp	r1, #10
 800af5a:	d004      	beq.n	800af66 <_puts_r+0xb6>
 800af5c:	6823      	ldr	r3, [r4, #0]
 800af5e:	1c5a      	adds	r2, r3, #1
 800af60:	6022      	str	r2, [r4, #0]
 800af62:	7019      	strb	r1, [r3, #0]
 800af64:	e7c5      	b.n	800aef2 <_puts_r+0x42>
 800af66:	4622      	mov	r2, r4
 800af68:	4628      	mov	r0, r5
 800af6a:	f000 f8d5 	bl	800b118 <__swbuf_r>
 800af6e:	3001      	adds	r0, #1
 800af70:	d1bf      	bne.n	800aef2 <_puts_r+0x42>
 800af72:	e7df      	b.n	800af34 <_puts_r+0x84>
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	250a      	movs	r5, #10
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	6022      	str	r2, [r4, #0]
 800af7c:	701d      	strb	r5, [r3, #0]
 800af7e:	e7db      	b.n	800af38 <_puts_r+0x88>
 800af80:	08021e00 	.word	0x08021e00
 800af84:	08021e20 	.word	0x08021e20
 800af88:	08021de0 	.word	0x08021de0

0800af8c <puts>:
 800af8c:	4b02      	ldr	r3, [pc, #8]	; (800af98 <puts+0xc>)
 800af8e:	4601      	mov	r1, r0
 800af90:	6818      	ldr	r0, [r3, #0]
 800af92:	f7ff bf8d 	b.w	800aeb0 <_puts_r>
 800af96:	bf00      	nop
 800af98:	20000014 	.word	0x20000014

0800af9c <cleanup_glue>:
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	460c      	mov	r4, r1
 800afa0:	6809      	ldr	r1, [r1, #0]
 800afa2:	4605      	mov	r5, r0
 800afa4:	b109      	cbz	r1, 800afaa <cleanup_glue+0xe>
 800afa6:	f7ff fff9 	bl	800af9c <cleanup_glue>
 800afaa:	4621      	mov	r1, r4
 800afac:	4628      	mov	r0, r5
 800afae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afb2:	f001 bcfb 	b.w	800c9ac <_free_r>
	...

0800afb8 <_reclaim_reent>:
 800afb8:	4b2c      	ldr	r3, [pc, #176]	; (800b06c <_reclaim_reent+0xb4>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4283      	cmp	r3, r0
 800afbe:	b570      	push	{r4, r5, r6, lr}
 800afc0:	4604      	mov	r4, r0
 800afc2:	d051      	beq.n	800b068 <_reclaim_reent+0xb0>
 800afc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800afc6:	b143      	cbz	r3, 800afda <_reclaim_reent+0x22>
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d14a      	bne.n	800b064 <_reclaim_reent+0xac>
 800afce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afd0:	6819      	ldr	r1, [r3, #0]
 800afd2:	b111      	cbz	r1, 800afda <_reclaim_reent+0x22>
 800afd4:	4620      	mov	r0, r4
 800afd6:	f001 fce9 	bl	800c9ac <_free_r>
 800afda:	6961      	ldr	r1, [r4, #20]
 800afdc:	b111      	cbz	r1, 800afe4 <_reclaim_reent+0x2c>
 800afde:	4620      	mov	r0, r4
 800afe0:	f001 fce4 	bl	800c9ac <_free_r>
 800afe4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800afe6:	b111      	cbz	r1, 800afee <_reclaim_reent+0x36>
 800afe8:	4620      	mov	r0, r4
 800afea:	f001 fcdf 	bl	800c9ac <_free_r>
 800afee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aff0:	b111      	cbz	r1, 800aff8 <_reclaim_reent+0x40>
 800aff2:	4620      	mov	r0, r4
 800aff4:	f001 fcda 	bl	800c9ac <_free_r>
 800aff8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800affa:	b111      	cbz	r1, 800b002 <_reclaim_reent+0x4a>
 800affc:	4620      	mov	r0, r4
 800affe:	f001 fcd5 	bl	800c9ac <_free_r>
 800b002:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b004:	b111      	cbz	r1, 800b00c <_reclaim_reent+0x54>
 800b006:	4620      	mov	r0, r4
 800b008:	f001 fcd0 	bl	800c9ac <_free_r>
 800b00c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b00e:	b111      	cbz	r1, 800b016 <_reclaim_reent+0x5e>
 800b010:	4620      	mov	r0, r4
 800b012:	f001 fccb 	bl	800c9ac <_free_r>
 800b016:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b018:	b111      	cbz	r1, 800b020 <_reclaim_reent+0x68>
 800b01a:	4620      	mov	r0, r4
 800b01c:	f001 fcc6 	bl	800c9ac <_free_r>
 800b020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b022:	b111      	cbz	r1, 800b02a <_reclaim_reent+0x72>
 800b024:	4620      	mov	r0, r4
 800b026:	f001 fcc1 	bl	800c9ac <_free_r>
 800b02a:	69a3      	ldr	r3, [r4, #24]
 800b02c:	b1e3      	cbz	r3, 800b068 <_reclaim_reent+0xb0>
 800b02e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b030:	4620      	mov	r0, r4
 800b032:	4798      	blx	r3
 800b034:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b036:	b1b9      	cbz	r1, 800b068 <_reclaim_reent+0xb0>
 800b038:	4620      	mov	r0, r4
 800b03a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b03e:	f7ff bfad 	b.w	800af9c <cleanup_glue>
 800b042:	5949      	ldr	r1, [r1, r5]
 800b044:	b941      	cbnz	r1, 800b058 <_reclaim_reent+0xa0>
 800b046:	3504      	adds	r5, #4
 800b048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b04a:	2d80      	cmp	r5, #128	; 0x80
 800b04c:	68d9      	ldr	r1, [r3, #12]
 800b04e:	d1f8      	bne.n	800b042 <_reclaim_reent+0x8a>
 800b050:	4620      	mov	r0, r4
 800b052:	f001 fcab 	bl	800c9ac <_free_r>
 800b056:	e7ba      	b.n	800afce <_reclaim_reent+0x16>
 800b058:	680e      	ldr	r6, [r1, #0]
 800b05a:	4620      	mov	r0, r4
 800b05c:	f001 fca6 	bl	800c9ac <_free_r>
 800b060:	4631      	mov	r1, r6
 800b062:	e7ef      	b.n	800b044 <_reclaim_reent+0x8c>
 800b064:	2500      	movs	r5, #0
 800b066:	e7ef      	b.n	800b048 <_reclaim_reent+0x90>
 800b068:	bd70      	pop	{r4, r5, r6, pc}
 800b06a:	bf00      	nop
 800b06c:	20000014 	.word	0x20000014

0800b070 <_sbrk_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4d06      	ldr	r5, [pc, #24]	; (800b08c <_sbrk_r+0x1c>)
 800b074:	2300      	movs	r3, #0
 800b076:	4604      	mov	r4, r0
 800b078:	4608      	mov	r0, r1
 800b07a:	602b      	str	r3, [r5, #0]
 800b07c:	f7f7 fa5a 	bl	8002534 <_sbrk>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	d102      	bne.n	800b08a <_sbrk_r+0x1a>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	b103      	cbz	r3, 800b08a <_sbrk_r+0x1a>
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	bd38      	pop	{r3, r4, r5, pc}
 800b08c:	20010bf0 	.word	0x20010bf0

0800b090 <__sread>:
 800b090:	b510      	push	{r4, lr}
 800b092:	460c      	mov	r4, r1
 800b094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b098:	f001 fe2e 	bl	800ccf8 <_read_r>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	bfab      	itete	ge
 800b0a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0a2:	89a3      	ldrhlt	r3, [r4, #12]
 800b0a4:	181b      	addge	r3, r3, r0
 800b0a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0aa:	bfac      	ite	ge
 800b0ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0ae:	81a3      	strhlt	r3, [r4, #12]
 800b0b0:	bd10      	pop	{r4, pc}

0800b0b2 <__swrite>:
 800b0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b6:	461f      	mov	r7, r3
 800b0b8:	898b      	ldrh	r3, [r1, #12]
 800b0ba:	05db      	lsls	r3, r3, #23
 800b0bc:	4605      	mov	r5, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	4616      	mov	r6, r2
 800b0c2:	d505      	bpl.n	800b0d0 <__swrite+0x1e>
 800b0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f001 f848 	bl	800c160 <_lseek_r>
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0da:	81a3      	strh	r3, [r4, #12]
 800b0dc:	4632      	mov	r2, r6
 800b0de:	463b      	mov	r3, r7
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e6:	f000 b869 	b.w	800b1bc <_write_r>

0800b0ea <__sseek>:
 800b0ea:	b510      	push	{r4, lr}
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f2:	f001 f835 	bl	800c160 <_lseek_r>
 800b0f6:	1c43      	adds	r3, r0, #1
 800b0f8:	89a3      	ldrh	r3, [r4, #12]
 800b0fa:	bf15      	itete	ne
 800b0fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b0fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b106:	81a3      	strheq	r3, [r4, #12]
 800b108:	bf18      	it	ne
 800b10a:	81a3      	strhne	r3, [r4, #12]
 800b10c:	bd10      	pop	{r4, pc}

0800b10e <__sclose>:
 800b10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b112:	f000 b8d3 	b.w	800b2bc <_close_r>
	...

0800b118 <__swbuf_r>:
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	460e      	mov	r6, r1
 800b11c:	4614      	mov	r4, r2
 800b11e:	4605      	mov	r5, r0
 800b120:	b118      	cbz	r0, 800b12a <__swbuf_r+0x12>
 800b122:	6983      	ldr	r3, [r0, #24]
 800b124:	b90b      	cbnz	r3, 800b12a <__swbuf_r+0x12>
 800b126:	f7ff f8d1 	bl	800a2cc <__sinit>
 800b12a:	4b21      	ldr	r3, [pc, #132]	; (800b1b0 <__swbuf_r+0x98>)
 800b12c:	429c      	cmp	r4, r3
 800b12e:	d12b      	bne.n	800b188 <__swbuf_r+0x70>
 800b130:	686c      	ldr	r4, [r5, #4]
 800b132:	69a3      	ldr	r3, [r4, #24]
 800b134:	60a3      	str	r3, [r4, #8]
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	071a      	lsls	r2, r3, #28
 800b13a:	d52f      	bpl.n	800b19c <__swbuf_r+0x84>
 800b13c:	6923      	ldr	r3, [r4, #16]
 800b13e:	b36b      	cbz	r3, 800b19c <__swbuf_r+0x84>
 800b140:	6923      	ldr	r3, [r4, #16]
 800b142:	6820      	ldr	r0, [r4, #0]
 800b144:	1ac0      	subs	r0, r0, r3
 800b146:	6963      	ldr	r3, [r4, #20]
 800b148:	b2f6      	uxtb	r6, r6
 800b14a:	4283      	cmp	r3, r0
 800b14c:	4637      	mov	r7, r6
 800b14e:	dc04      	bgt.n	800b15a <__swbuf_r+0x42>
 800b150:	4621      	mov	r1, r4
 800b152:	4628      	mov	r0, r5
 800b154:	f000 ffc4 	bl	800c0e0 <_fflush_r>
 800b158:	bb30      	cbnz	r0, 800b1a8 <__swbuf_r+0x90>
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	3b01      	subs	r3, #1
 800b15e:	60a3      	str	r3, [r4, #8]
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	6022      	str	r2, [r4, #0]
 800b166:	701e      	strb	r6, [r3, #0]
 800b168:	6963      	ldr	r3, [r4, #20]
 800b16a:	3001      	adds	r0, #1
 800b16c:	4283      	cmp	r3, r0
 800b16e:	d004      	beq.n	800b17a <__swbuf_r+0x62>
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	07db      	lsls	r3, r3, #31
 800b174:	d506      	bpl.n	800b184 <__swbuf_r+0x6c>
 800b176:	2e0a      	cmp	r6, #10
 800b178:	d104      	bne.n	800b184 <__swbuf_r+0x6c>
 800b17a:	4621      	mov	r1, r4
 800b17c:	4628      	mov	r0, r5
 800b17e:	f000 ffaf 	bl	800c0e0 <_fflush_r>
 800b182:	b988      	cbnz	r0, 800b1a8 <__swbuf_r+0x90>
 800b184:	4638      	mov	r0, r7
 800b186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b188:	4b0a      	ldr	r3, [pc, #40]	; (800b1b4 <__swbuf_r+0x9c>)
 800b18a:	429c      	cmp	r4, r3
 800b18c:	d101      	bne.n	800b192 <__swbuf_r+0x7a>
 800b18e:	68ac      	ldr	r4, [r5, #8]
 800b190:	e7cf      	b.n	800b132 <__swbuf_r+0x1a>
 800b192:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <__swbuf_r+0xa0>)
 800b194:	429c      	cmp	r4, r3
 800b196:	bf08      	it	eq
 800b198:	68ec      	ldreq	r4, [r5, #12]
 800b19a:	e7ca      	b.n	800b132 <__swbuf_r+0x1a>
 800b19c:	4621      	mov	r1, r4
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f000 f81e 	bl	800b1e0 <__swsetup_r>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d0cb      	beq.n	800b140 <__swbuf_r+0x28>
 800b1a8:	f04f 37ff 	mov.w	r7, #4294967295
 800b1ac:	e7ea      	b.n	800b184 <__swbuf_r+0x6c>
 800b1ae:	bf00      	nop
 800b1b0:	08021e00 	.word	0x08021e00
 800b1b4:	08021e20 	.word	0x08021e20
 800b1b8:	08021de0 	.word	0x08021de0

0800b1bc <_write_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	4d07      	ldr	r5, [pc, #28]	; (800b1dc <_write_r+0x20>)
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	4608      	mov	r0, r1
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	602a      	str	r2, [r5, #0]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	f7f6 fc02 	bl	80019d4 <_write>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_write_r+0x1e>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_write_r+0x1e>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	20010bf0 	.word	0x20010bf0

0800b1e0 <__swsetup_r>:
 800b1e0:	4b32      	ldr	r3, [pc, #200]	; (800b2ac <__swsetup_r+0xcc>)
 800b1e2:	b570      	push	{r4, r5, r6, lr}
 800b1e4:	681d      	ldr	r5, [r3, #0]
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	460c      	mov	r4, r1
 800b1ea:	b125      	cbz	r5, 800b1f6 <__swsetup_r+0x16>
 800b1ec:	69ab      	ldr	r3, [r5, #24]
 800b1ee:	b913      	cbnz	r3, 800b1f6 <__swsetup_r+0x16>
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f7ff f86b 	bl	800a2cc <__sinit>
 800b1f6:	4b2e      	ldr	r3, [pc, #184]	; (800b2b0 <__swsetup_r+0xd0>)
 800b1f8:	429c      	cmp	r4, r3
 800b1fa:	d10f      	bne.n	800b21c <__swsetup_r+0x3c>
 800b1fc:	686c      	ldr	r4, [r5, #4]
 800b1fe:	89a3      	ldrh	r3, [r4, #12]
 800b200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b204:	0719      	lsls	r1, r3, #28
 800b206:	d42c      	bmi.n	800b262 <__swsetup_r+0x82>
 800b208:	06dd      	lsls	r5, r3, #27
 800b20a:	d411      	bmi.n	800b230 <__swsetup_r+0x50>
 800b20c:	2309      	movs	r3, #9
 800b20e:	6033      	str	r3, [r6, #0]
 800b210:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b214:	81a3      	strh	r3, [r4, #12]
 800b216:	f04f 30ff 	mov.w	r0, #4294967295
 800b21a:	e03e      	b.n	800b29a <__swsetup_r+0xba>
 800b21c:	4b25      	ldr	r3, [pc, #148]	; (800b2b4 <__swsetup_r+0xd4>)
 800b21e:	429c      	cmp	r4, r3
 800b220:	d101      	bne.n	800b226 <__swsetup_r+0x46>
 800b222:	68ac      	ldr	r4, [r5, #8]
 800b224:	e7eb      	b.n	800b1fe <__swsetup_r+0x1e>
 800b226:	4b24      	ldr	r3, [pc, #144]	; (800b2b8 <__swsetup_r+0xd8>)
 800b228:	429c      	cmp	r4, r3
 800b22a:	bf08      	it	eq
 800b22c:	68ec      	ldreq	r4, [r5, #12]
 800b22e:	e7e6      	b.n	800b1fe <__swsetup_r+0x1e>
 800b230:	0758      	lsls	r0, r3, #29
 800b232:	d512      	bpl.n	800b25a <__swsetup_r+0x7a>
 800b234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b236:	b141      	cbz	r1, 800b24a <__swsetup_r+0x6a>
 800b238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b23c:	4299      	cmp	r1, r3
 800b23e:	d002      	beq.n	800b246 <__swsetup_r+0x66>
 800b240:	4630      	mov	r0, r6
 800b242:	f001 fbb3 	bl	800c9ac <_free_r>
 800b246:	2300      	movs	r3, #0
 800b248:	6363      	str	r3, [r4, #52]	; 0x34
 800b24a:	89a3      	ldrh	r3, [r4, #12]
 800b24c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b250:	81a3      	strh	r3, [r4, #12]
 800b252:	2300      	movs	r3, #0
 800b254:	6063      	str	r3, [r4, #4]
 800b256:	6923      	ldr	r3, [r4, #16]
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	89a3      	ldrh	r3, [r4, #12]
 800b25c:	f043 0308 	orr.w	r3, r3, #8
 800b260:	81a3      	strh	r3, [r4, #12]
 800b262:	6923      	ldr	r3, [r4, #16]
 800b264:	b94b      	cbnz	r3, 800b27a <__swsetup_r+0x9a>
 800b266:	89a3      	ldrh	r3, [r4, #12]
 800b268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b26c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b270:	d003      	beq.n	800b27a <__swsetup_r+0x9a>
 800b272:	4621      	mov	r1, r4
 800b274:	4630      	mov	r0, r6
 800b276:	f000 ffab 	bl	800c1d0 <__smakebuf_r>
 800b27a:	89a0      	ldrh	r0, [r4, #12]
 800b27c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b280:	f010 0301 	ands.w	r3, r0, #1
 800b284:	d00a      	beq.n	800b29c <__swsetup_r+0xbc>
 800b286:	2300      	movs	r3, #0
 800b288:	60a3      	str	r3, [r4, #8]
 800b28a:	6963      	ldr	r3, [r4, #20]
 800b28c:	425b      	negs	r3, r3
 800b28e:	61a3      	str	r3, [r4, #24]
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	b943      	cbnz	r3, 800b2a6 <__swsetup_r+0xc6>
 800b294:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b298:	d1ba      	bne.n	800b210 <__swsetup_r+0x30>
 800b29a:	bd70      	pop	{r4, r5, r6, pc}
 800b29c:	0781      	lsls	r1, r0, #30
 800b29e:	bf58      	it	pl
 800b2a0:	6963      	ldrpl	r3, [r4, #20]
 800b2a2:	60a3      	str	r3, [r4, #8]
 800b2a4:	e7f4      	b.n	800b290 <__swsetup_r+0xb0>
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	e7f7      	b.n	800b29a <__swsetup_r+0xba>
 800b2aa:	bf00      	nop
 800b2ac:	20000014 	.word	0x20000014
 800b2b0:	08021e00 	.word	0x08021e00
 800b2b4:	08021e20 	.word	0x08021e20
 800b2b8:	08021de0 	.word	0x08021de0

0800b2bc <_close_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	4d06      	ldr	r5, [pc, #24]	; (800b2d8 <_close_r+0x1c>)
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	4608      	mov	r0, r1
 800b2c6:	602b      	str	r3, [r5, #0]
 800b2c8:	f7f7 f8ff 	bl	80024ca <_close>
 800b2cc:	1c43      	adds	r3, r0, #1
 800b2ce:	d102      	bne.n	800b2d6 <_close_r+0x1a>
 800b2d0:	682b      	ldr	r3, [r5, #0]
 800b2d2:	b103      	cbz	r3, 800b2d6 <_close_r+0x1a>
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	bd38      	pop	{r3, r4, r5, pc}
 800b2d8:	20010bf0 	.word	0x20010bf0

0800b2dc <quorem>:
 800b2dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e0:	6903      	ldr	r3, [r0, #16]
 800b2e2:	690c      	ldr	r4, [r1, #16]
 800b2e4:	42a3      	cmp	r3, r4
 800b2e6:	4607      	mov	r7, r0
 800b2e8:	f2c0 8081 	blt.w	800b3ee <quorem+0x112>
 800b2ec:	3c01      	subs	r4, #1
 800b2ee:	f101 0814 	add.w	r8, r1, #20
 800b2f2:	f100 0514 	add.w	r5, r0, #20
 800b2f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2fa:	9301      	str	r3, [sp, #4]
 800b2fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b300:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b304:	3301      	adds	r3, #1
 800b306:	429a      	cmp	r2, r3
 800b308:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b30c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b310:	fbb2 f6f3 	udiv	r6, r2, r3
 800b314:	d331      	bcc.n	800b37a <quorem+0x9e>
 800b316:	f04f 0e00 	mov.w	lr, #0
 800b31a:	4640      	mov	r0, r8
 800b31c:	46ac      	mov	ip, r5
 800b31e:	46f2      	mov	sl, lr
 800b320:	f850 2b04 	ldr.w	r2, [r0], #4
 800b324:	b293      	uxth	r3, r2
 800b326:	fb06 e303 	mla	r3, r6, r3, lr
 800b32a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b32e:	b29b      	uxth	r3, r3
 800b330:	ebaa 0303 	sub.w	r3, sl, r3
 800b334:	f8dc a000 	ldr.w	sl, [ip]
 800b338:	0c12      	lsrs	r2, r2, #16
 800b33a:	fa13 f38a 	uxtah	r3, r3, sl
 800b33e:	fb06 e202 	mla	r2, r6, r2, lr
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	9b00      	ldr	r3, [sp, #0]
 800b346:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b34a:	b292      	uxth	r2, r2
 800b34c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b350:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b354:	f8bd 3000 	ldrh.w	r3, [sp]
 800b358:	4581      	cmp	r9, r0
 800b35a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b35e:	f84c 3b04 	str.w	r3, [ip], #4
 800b362:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b366:	d2db      	bcs.n	800b320 <quorem+0x44>
 800b368:	f855 300b 	ldr.w	r3, [r5, fp]
 800b36c:	b92b      	cbnz	r3, 800b37a <quorem+0x9e>
 800b36e:	9b01      	ldr	r3, [sp, #4]
 800b370:	3b04      	subs	r3, #4
 800b372:	429d      	cmp	r5, r3
 800b374:	461a      	mov	r2, r3
 800b376:	d32e      	bcc.n	800b3d6 <quorem+0xfa>
 800b378:	613c      	str	r4, [r7, #16]
 800b37a:	4638      	mov	r0, r7
 800b37c:	f001 f9fe 	bl	800c77c <__mcmp>
 800b380:	2800      	cmp	r0, #0
 800b382:	db24      	blt.n	800b3ce <quorem+0xf2>
 800b384:	3601      	adds	r6, #1
 800b386:	4628      	mov	r0, r5
 800b388:	f04f 0c00 	mov.w	ip, #0
 800b38c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b390:	f8d0 e000 	ldr.w	lr, [r0]
 800b394:	b293      	uxth	r3, r2
 800b396:	ebac 0303 	sub.w	r3, ip, r3
 800b39a:	0c12      	lsrs	r2, r2, #16
 800b39c:	fa13 f38e 	uxtah	r3, r3, lr
 800b3a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b3a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3ae:	45c1      	cmp	r9, r8
 800b3b0:	f840 3b04 	str.w	r3, [r0], #4
 800b3b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b3b8:	d2e8      	bcs.n	800b38c <quorem+0xb0>
 800b3ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3c2:	b922      	cbnz	r2, 800b3ce <quorem+0xf2>
 800b3c4:	3b04      	subs	r3, #4
 800b3c6:	429d      	cmp	r5, r3
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	d30a      	bcc.n	800b3e2 <quorem+0x106>
 800b3cc:	613c      	str	r4, [r7, #16]
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	b003      	add	sp, #12
 800b3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d6:	6812      	ldr	r2, [r2, #0]
 800b3d8:	3b04      	subs	r3, #4
 800b3da:	2a00      	cmp	r2, #0
 800b3dc:	d1cc      	bne.n	800b378 <quorem+0x9c>
 800b3de:	3c01      	subs	r4, #1
 800b3e0:	e7c7      	b.n	800b372 <quorem+0x96>
 800b3e2:	6812      	ldr	r2, [r2, #0]
 800b3e4:	3b04      	subs	r3, #4
 800b3e6:	2a00      	cmp	r2, #0
 800b3e8:	d1f0      	bne.n	800b3cc <quorem+0xf0>
 800b3ea:	3c01      	subs	r4, #1
 800b3ec:	e7eb      	b.n	800b3c6 <quorem+0xea>
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	e7ee      	b.n	800b3d0 <quorem+0xf4>
 800b3f2:	0000      	movs	r0, r0
 800b3f4:	0000      	movs	r0, r0
	...

0800b3f8 <_dtoa_r>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	ed2d 8b04 	vpush	{d8-d9}
 800b400:	ec57 6b10 	vmov	r6, r7, d0
 800b404:	b093      	sub	sp, #76	; 0x4c
 800b406:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b408:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b40c:	9106      	str	r1, [sp, #24]
 800b40e:	ee10 aa10 	vmov	sl, s0
 800b412:	4604      	mov	r4, r0
 800b414:	9209      	str	r2, [sp, #36]	; 0x24
 800b416:	930c      	str	r3, [sp, #48]	; 0x30
 800b418:	46bb      	mov	fp, r7
 800b41a:	b975      	cbnz	r5, 800b43a <_dtoa_r+0x42>
 800b41c:	2010      	movs	r0, #16
 800b41e:	f000 ff17 	bl	800c250 <malloc>
 800b422:	4602      	mov	r2, r0
 800b424:	6260      	str	r0, [r4, #36]	; 0x24
 800b426:	b920      	cbnz	r0, 800b432 <_dtoa_r+0x3a>
 800b428:	4ba7      	ldr	r3, [pc, #668]	; (800b6c8 <_dtoa_r+0x2d0>)
 800b42a:	21ea      	movs	r1, #234	; 0xea
 800b42c:	48a7      	ldr	r0, [pc, #668]	; (800b6cc <_dtoa_r+0x2d4>)
 800b42e:	f001 fc75 	bl	800cd1c <__assert_func>
 800b432:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b436:	6005      	str	r5, [r0, #0]
 800b438:	60c5      	str	r5, [r0, #12]
 800b43a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b43c:	6819      	ldr	r1, [r3, #0]
 800b43e:	b151      	cbz	r1, 800b456 <_dtoa_r+0x5e>
 800b440:	685a      	ldr	r2, [r3, #4]
 800b442:	604a      	str	r2, [r1, #4]
 800b444:	2301      	movs	r3, #1
 800b446:	4093      	lsls	r3, r2
 800b448:	608b      	str	r3, [r1, #8]
 800b44a:	4620      	mov	r0, r4
 800b44c:	f000 ff54 	bl	800c2f8 <_Bfree>
 800b450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b452:	2200      	movs	r2, #0
 800b454:	601a      	str	r2, [r3, #0]
 800b456:	1e3b      	subs	r3, r7, #0
 800b458:	bfaa      	itet	ge
 800b45a:	2300      	movge	r3, #0
 800b45c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b460:	f8c8 3000 	strge.w	r3, [r8]
 800b464:	4b9a      	ldr	r3, [pc, #616]	; (800b6d0 <_dtoa_r+0x2d8>)
 800b466:	bfbc      	itt	lt
 800b468:	2201      	movlt	r2, #1
 800b46a:	f8c8 2000 	strlt.w	r2, [r8]
 800b46e:	ea33 030b 	bics.w	r3, r3, fp
 800b472:	d11b      	bne.n	800b4ac <_dtoa_r+0xb4>
 800b474:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b476:	f242 730f 	movw	r3, #9999	; 0x270f
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b480:	4333      	orrs	r3, r6
 800b482:	f000 8592 	beq.w	800bfaa <_dtoa_r+0xbb2>
 800b486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b488:	b963      	cbnz	r3, 800b4a4 <_dtoa_r+0xac>
 800b48a:	4b92      	ldr	r3, [pc, #584]	; (800b6d4 <_dtoa_r+0x2dc>)
 800b48c:	e022      	b.n	800b4d4 <_dtoa_r+0xdc>
 800b48e:	4b92      	ldr	r3, [pc, #584]	; (800b6d8 <_dtoa_r+0x2e0>)
 800b490:	9301      	str	r3, [sp, #4]
 800b492:	3308      	adds	r3, #8
 800b494:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b496:	6013      	str	r3, [r2, #0]
 800b498:	9801      	ldr	r0, [sp, #4]
 800b49a:	b013      	add	sp, #76	; 0x4c
 800b49c:	ecbd 8b04 	vpop	{d8-d9}
 800b4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a4:	4b8b      	ldr	r3, [pc, #556]	; (800b6d4 <_dtoa_r+0x2dc>)
 800b4a6:	9301      	str	r3, [sp, #4]
 800b4a8:	3303      	adds	r3, #3
 800b4aa:	e7f3      	b.n	800b494 <_dtoa_r+0x9c>
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	4650      	mov	r0, sl
 800b4b2:	4659      	mov	r1, fp
 800b4b4:	f7f5 fb08 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4b8:	ec4b ab19 	vmov	d9, sl, fp
 800b4bc:	4680      	mov	r8, r0
 800b4be:	b158      	cbz	r0, 800b4d8 <_dtoa_r+0xe0>
 800b4c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	6013      	str	r3, [r2, #0]
 800b4c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f000 856b 	beq.w	800bfa4 <_dtoa_r+0xbac>
 800b4ce:	4883      	ldr	r0, [pc, #524]	; (800b6dc <_dtoa_r+0x2e4>)
 800b4d0:	6018      	str	r0, [r3, #0]
 800b4d2:	1e43      	subs	r3, r0, #1
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	e7df      	b.n	800b498 <_dtoa_r+0xa0>
 800b4d8:	ec4b ab10 	vmov	d0, sl, fp
 800b4dc:	aa10      	add	r2, sp, #64	; 0x40
 800b4de:	a911      	add	r1, sp, #68	; 0x44
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f001 f9f1 	bl	800c8c8 <__d2b>
 800b4e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b4ea:	ee08 0a10 	vmov	s16, r0
 800b4ee:	2d00      	cmp	r5, #0
 800b4f0:	f000 8084 	beq.w	800b5fc <_dtoa_r+0x204>
 800b4f4:	ee19 3a90 	vmov	r3, s19
 800b4f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b500:	4656      	mov	r6, sl
 800b502:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b506:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b50a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b50e:	4b74      	ldr	r3, [pc, #464]	; (800b6e0 <_dtoa_r+0x2e8>)
 800b510:	2200      	movs	r2, #0
 800b512:	4630      	mov	r0, r6
 800b514:	4639      	mov	r1, r7
 800b516:	f7f4 feb7 	bl	8000288 <__aeabi_dsub>
 800b51a:	a365      	add	r3, pc, #404	; (adr r3, 800b6b0 <_dtoa_r+0x2b8>)
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	f7f5 f86a 	bl	80005f8 <__aeabi_dmul>
 800b524:	a364      	add	r3, pc, #400	; (adr r3, 800b6b8 <_dtoa_r+0x2c0>)
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	f7f4 feaf 	bl	800028c <__adddf3>
 800b52e:	4606      	mov	r6, r0
 800b530:	4628      	mov	r0, r5
 800b532:	460f      	mov	r7, r1
 800b534:	f7f4 fff6 	bl	8000524 <__aeabi_i2d>
 800b538:	a361      	add	r3, pc, #388	; (adr r3, 800b6c0 <_dtoa_r+0x2c8>)
 800b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53e:	f7f5 f85b 	bl	80005f8 <__aeabi_dmul>
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	4630      	mov	r0, r6
 800b548:	4639      	mov	r1, r7
 800b54a:	f7f4 fe9f 	bl	800028c <__adddf3>
 800b54e:	4606      	mov	r6, r0
 800b550:	460f      	mov	r7, r1
 800b552:	f7f5 fb01 	bl	8000b58 <__aeabi_d2iz>
 800b556:	2200      	movs	r2, #0
 800b558:	9000      	str	r0, [sp, #0]
 800b55a:	2300      	movs	r3, #0
 800b55c:	4630      	mov	r0, r6
 800b55e:	4639      	mov	r1, r7
 800b560:	f7f5 fabc 	bl	8000adc <__aeabi_dcmplt>
 800b564:	b150      	cbz	r0, 800b57c <_dtoa_r+0x184>
 800b566:	9800      	ldr	r0, [sp, #0]
 800b568:	f7f4 ffdc 	bl	8000524 <__aeabi_i2d>
 800b56c:	4632      	mov	r2, r6
 800b56e:	463b      	mov	r3, r7
 800b570:	f7f5 faaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800b574:	b910      	cbnz	r0, 800b57c <_dtoa_r+0x184>
 800b576:	9b00      	ldr	r3, [sp, #0]
 800b578:	3b01      	subs	r3, #1
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	9b00      	ldr	r3, [sp, #0]
 800b57e:	2b16      	cmp	r3, #22
 800b580:	d85a      	bhi.n	800b638 <_dtoa_r+0x240>
 800b582:	9a00      	ldr	r2, [sp, #0]
 800b584:	4b57      	ldr	r3, [pc, #348]	; (800b6e4 <_dtoa_r+0x2ec>)
 800b586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	ec51 0b19 	vmov	r0, r1, d9
 800b592:	f7f5 faa3 	bl	8000adc <__aeabi_dcmplt>
 800b596:	2800      	cmp	r0, #0
 800b598:	d050      	beq.n	800b63c <_dtoa_r+0x244>
 800b59a:	9b00      	ldr	r3, [sp, #0]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5a6:	1b5d      	subs	r5, r3, r5
 800b5a8:	1e6b      	subs	r3, r5, #1
 800b5aa:	9305      	str	r3, [sp, #20]
 800b5ac:	bf45      	ittet	mi
 800b5ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800b5b2:	9304      	strmi	r3, [sp, #16]
 800b5b4:	2300      	movpl	r3, #0
 800b5b6:	2300      	movmi	r3, #0
 800b5b8:	bf4c      	ite	mi
 800b5ba:	9305      	strmi	r3, [sp, #20]
 800b5bc:	9304      	strpl	r3, [sp, #16]
 800b5be:	9b00      	ldr	r3, [sp, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	db3d      	blt.n	800b640 <_dtoa_r+0x248>
 800b5c4:	9b05      	ldr	r3, [sp, #20]
 800b5c6:	9a00      	ldr	r2, [sp, #0]
 800b5c8:	920a      	str	r2, [sp, #40]	; 0x28
 800b5ca:	4413      	add	r3, r2
 800b5cc:	9305      	str	r3, [sp, #20]
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	9307      	str	r3, [sp, #28]
 800b5d2:	9b06      	ldr	r3, [sp, #24]
 800b5d4:	2b09      	cmp	r3, #9
 800b5d6:	f200 8089 	bhi.w	800b6ec <_dtoa_r+0x2f4>
 800b5da:	2b05      	cmp	r3, #5
 800b5dc:	bfc4      	itt	gt
 800b5de:	3b04      	subgt	r3, #4
 800b5e0:	9306      	strgt	r3, [sp, #24]
 800b5e2:	9b06      	ldr	r3, [sp, #24]
 800b5e4:	f1a3 0302 	sub.w	r3, r3, #2
 800b5e8:	bfcc      	ite	gt
 800b5ea:	2500      	movgt	r5, #0
 800b5ec:	2501      	movle	r5, #1
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	f200 8087 	bhi.w	800b702 <_dtoa_r+0x30a>
 800b5f4:	e8df f003 	tbb	[pc, r3]
 800b5f8:	59383a2d 	.word	0x59383a2d
 800b5fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b600:	441d      	add	r5, r3
 800b602:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b606:	2b20      	cmp	r3, #32
 800b608:	bfc1      	itttt	gt
 800b60a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b60e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b612:	fa0b f303 	lslgt.w	r3, fp, r3
 800b616:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b61a:	bfda      	itte	le
 800b61c:	f1c3 0320 	rsble	r3, r3, #32
 800b620:	fa06 f003 	lslle.w	r0, r6, r3
 800b624:	4318      	orrgt	r0, r3
 800b626:	f7f4 ff6d 	bl	8000504 <__aeabi_ui2d>
 800b62a:	2301      	movs	r3, #1
 800b62c:	4606      	mov	r6, r0
 800b62e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b632:	3d01      	subs	r5, #1
 800b634:	930e      	str	r3, [sp, #56]	; 0x38
 800b636:	e76a      	b.n	800b50e <_dtoa_r+0x116>
 800b638:	2301      	movs	r3, #1
 800b63a:	e7b2      	b.n	800b5a2 <_dtoa_r+0x1aa>
 800b63c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b63e:	e7b1      	b.n	800b5a4 <_dtoa_r+0x1ac>
 800b640:	9b04      	ldr	r3, [sp, #16]
 800b642:	9a00      	ldr	r2, [sp, #0]
 800b644:	1a9b      	subs	r3, r3, r2
 800b646:	9304      	str	r3, [sp, #16]
 800b648:	4253      	negs	r3, r2
 800b64a:	9307      	str	r3, [sp, #28]
 800b64c:	2300      	movs	r3, #0
 800b64e:	930a      	str	r3, [sp, #40]	; 0x28
 800b650:	e7bf      	b.n	800b5d2 <_dtoa_r+0x1da>
 800b652:	2300      	movs	r3, #0
 800b654:	9308      	str	r3, [sp, #32]
 800b656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b658:	2b00      	cmp	r3, #0
 800b65a:	dc55      	bgt.n	800b708 <_dtoa_r+0x310>
 800b65c:	2301      	movs	r3, #1
 800b65e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b662:	461a      	mov	r2, r3
 800b664:	9209      	str	r2, [sp, #36]	; 0x24
 800b666:	e00c      	b.n	800b682 <_dtoa_r+0x28a>
 800b668:	2301      	movs	r3, #1
 800b66a:	e7f3      	b.n	800b654 <_dtoa_r+0x25c>
 800b66c:	2300      	movs	r3, #0
 800b66e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b670:	9308      	str	r3, [sp, #32]
 800b672:	9b00      	ldr	r3, [sp, #0]
 800b674:	4413      	add	r3, r2
 800b676:	9302      	str	r3, [sp, #8]
 800b678:	3301      	adds	r3, #1
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	9303      	str	r3, [sp, #12]
 800b67e:	bfb8      	it	lt
 800b680:	2301      	movlt	r3, #1
 800b682:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b684:	2200      	movs	r2, #0
 800b686:	6042      	str	r2, [r0, #4]
 800b688:	2204      	movs	r2, #4
 800b68a:	f102 0614 	add.w	r6, r2, #20
 800b68e:	429e      	cmp	r6, r3
 800b690:	6841      	ldr	r1, [r0, #4]
 800b692:	d93d      	bls.n	800b710 <_dtoa_r+0x318>
 800b694:	4620      	mov	r0, r4
 800b696:	f000 fdef 	bl	800c278 <_Balloc>
 800b69a:	9001      	str	r0, [sp, #4]
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d13b      	bne.n	800b718 <_dtoa_r+0x320>
 800b6a0:	4b11      	ldr	r3, [pc, #68]	; (800b6e8 <_dtoa_r+0x2f0>)
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b6a8:	e6c0      	b.n	800b42c <_dtoa_r+0x34>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e7df      	b.n	800b66e <_dtoa_r+0x276>
 800b6ae:	bf00      	nop
 800b6b0:	636f4361 	.word	0x636f4361
 800b6b4:	3fd287a7 	.word	0x3fd287a7
 800b6b8:	8b60c8b3 	.word	0x8b60c8b3
 800b6bc:	3fc68a28 	.word	0x3fc68a28
 800b6c0:	509f79fb 	.word	0x509f79fb
 800b6c4:	3fd34413 	.word	0x3fd34413
 800b6c8:	08021e85 	.word	0x08021e85
 800b6cc:	08021e9c 	.word	0x08021e9c
 800b6d0:	7ff00000 	.word	0x7ff00000
 800b6d4:	08021e81 	.word	0x08021e81
 800b6d8:	08021e78 	.word	0x08021e78
 800b6dc:	08021e55 	.word	0x08021e55
 800b6e0:	3ff80000 	.word	0x3ff80000
 800b6e4:	08021f90 	.word	0x08021f90
 800b6e8:	08021ef7 	.word	0x08021ef7
 800b6ec:	2501      	movs	r5, #1
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	9306      	str	r3, [sp, #24]
 800b6f2:	9508      	str	r5, [sp, #32]
 800b6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	2312      	movs	r3, #18
 800b700:	e7b0      	b.n	800b664 <_dtoa_r+0x26c>
 800b702:	2301      	movs	r3, #1
 800b704:	9308      	str	r3, [sp, #32]
 800b706:	e7f5      	b.n	800b6f4 <_dtoa_r+0x2fc>
 800b708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b70e:	e7b8      	b.n	800b682 <_dtoa_r+0x28a>
 800b710:	3101      	adds	r1, #1
 800b712:	6041      	str	r1, [r0, #4]
 800b714:	0052      	lsls	r2, r2, #1
 800b716:	e7b8      	b.n	800b68a <_dtoa_r+0x292>
 800b718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b71a:	9a01      	ldr	r2, [sp, #4]
 800b71c:	601a      	str	r2, [r3, #0]
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	2b0e      	cmp	r3, #14
 800b722:	f200 809d 	bhi.w	800b860 <_dtoa_r+0x468>
 800b726:	2d00      	cmp	r5, #0
 800b728:	f000 809a 	beq.w	800b860 <_dtoa_r+0x468>
 800b72c:	9b00      	ldr	r3, [sp, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	dd32      	ble.n	800b798 <_dtoa_r+0x3a0>
 800b732:	4ab7      	ldr	r2, [pc, #732]	; (800ba10 <_dtoa_r+0x618>)
 800b734:	f003 030f 	and.w	r3, r3, #15
 800b738:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b73c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b740:	9b00      	ldr	r3, [sp, #0]
 800b742:	05d8      	lsls	r0, r3, #23
 800b744:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b748:	d516      	bpl.n	800b778 <_dtoa_r+0x380>
 800b74a:	4bb2      	ldr	r3, [pc, #712]	; (800ba14 <_dtoa_r+0x61c>)
 800b74c:	ec51 0b19 	vmov	r0, r1, d9
 800b750:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b754:	f7f5 f87a 	bl	800084c <__aeabi_ddiv>
 800b758:	f007 070f 	and.w	r7, r7, #15
 800b75c:	4682      	mov	sl, r0
 800b75e:	468b      	mov	fp, r1
 800b760:	2503      	movs	r5, #3
 800b762:	4eac      	ldr	r6, [pc, #688]	; (800ba14 <_dtoa_r+0x61c>)
 800b764:	b957      	cbnz	r7, 800b77c <_dtoa_r+0x384>
 800b766:	4642      	mov	r2, r8
 800b768:	464b      	mov	r3, r9
 800b76a:	4650      	mov	r0, sl
 800b76c:	4659      	mov	r1, fp
 800b76e:	f7f5 f86d 	bl	800084c <__aeabi_ddiv>
 800b772:	4682      	mov	sl, r0
 800b774:	468b      	mov	fp, r1
 800b776:	e028      	b.n	800b7ca <_dtoa_r+0x3d2>
 800b778:	2502      	movs	r5, #2
 800b77a:	e7f2      	b.n	800b762 <_dtoa_r+0x36a>
 800b77c:	07f9      	lsls	r1, r7, #31
 800b77e:	d508      	bpl.n	800b792 <_dtoa_r+0x39a>
 800b780:	4640      	mov	r0, r8
 800b782:	4649      	mov	r1, r9
 800b784:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b788:	f7f4 ff36 	bl	80005f8 <__aeabi_dmul>
 800b78c:	3501      	adds	r5, #1
 800b78e:	4680      	mov	r8, r0
 800b790:	4689      	mov	r9, r1
 800b792:	107f      	asrs	r7, r7, #1
 800b794:	3608      	adds	r6, #8
 800b796:	e7e5      	b.n	800b764 <_dtoa_r+0x36c>
 800b798:	f000 809b 	beq.w	800b8d2 <_dtoa_r+0x4da>
 800b79c:	9b00      	ldr	r3, [sp, #0]
 800b79e:	4f9d      	ldr	r7, [pc, #628]	; (800ba14 <_dtoa_r+0x61c>)
 800b7a0:	425e      	negs	r6, r3
 800b7a2:	4b9b      	ldr	r3, [pc, #620]	; (800ba10 <_dtoa_r+0x618>)
 800b7a4:	f006 020f 	and.w	r2, r6, #15
 800b7a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b0:	ec51 0b19 	vmov	r0, r1, d9
 800b7b4:	f7f4 ff20 	bl	80005f8 <__aeabi_dmul>
 800b7b8:	1136      	asrs	r6, r6, #4
 800b7ba:	4682      	mov	sl, r0
 800b7bc:	468b      	mov	fp, r1
 800b7be:	2300      	movs	r3, #0
 800b7c0:	2502      	movs	r5, #2
 800b7c2:	2e00      	cmp	r6, #0
 800b7c4:	d17a      	bne.n	800b8bc <_dtoa_r+0x4c4>
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1d3      	bne.n	800b772 <_dtoa_r+0x37a>
 800b7ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 8082 	beq.w	800b8d6 <_dtoa_r+0x4de>
 800b7d2:	4b91      	ldr	r3, [pc, #580]	; (800ba18 <_dtoa_r+0x620>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4650      	mov	r0, sl
 800b7d8:	4659      	mov	r1, fp
 800b7da:	f7f5 f97f 	bl	8000adc <__aeabi_dcmplt>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	d079      	beq.n	800b8d6 <_dtoa_r+0x4de>
 800b7e2:	9b03      	ldr	r3, [sp, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d076      	beq.n	800b8d6 <_dtoa_r+0x4de>
 800b7e8:	9b02      	ldr	r3, [sp, #8]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	dd36      	ble.n	800b85c <_dtoa_r+0x464>
 800b7ee:	9b00      	ldr	r3, [sp, #0]
 800b7f0:	4650      	mov	r0, sl
 800b7f2:	4659      	mov	r1, fp
 800b7f4:	1e5f      	subs	r7, r3, #1
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	4b88      	ldr	r3, [pc, #544]	; (800ba1c <_dtoa_r+0x624>)
 800b7fa:	f7f4 fefd 	bl	80005f8 <__aeabi_dmul>
 800b7fe:	9e02      	ldr	r6, [sp, #8]
 800b800:	4682      	mov	sl, r0
 800b802:	468b      	mov	fp, r1
 800b804:	3501      	adds	r5, #1
 800b806:	4628      	mov	r0, r5
 800b808:	f7f4 fe8c 	bl	8000524 <__aeabi_i2d>
 800b80c:	4652      	mov	r2, sl
 800b80e:	465b      	mov	r3, fp
 800b810:	f7f4 fef2 	bl	80005f8 <__aeabi_dmul>
 800b814:	4b82      	ldr	r3, [pc, #520]	; (800ba20 <_dtoa_r+0x628>)
 800b816:	2200      	movs	r2, #0
 800b818:	f7f4 fd38 	bl	800028c <__adddf3>
 800b81c:	46d0      	mov	r8, sl
 800b81e:	46d9      	mov	r9, fp
 800b820:	4682      	mov	sl, r0
 800b822:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b826:	2e00      	cmp	r6, #0
 800b828:	d158      	bne.n	800b8dc <_dtoa_r+0x4e4>
 800b82a:	4b7e      	ldr	r3, [pc, #504]	; (800ba24 <_dtoa_r+0x62c>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	4640      	mov	r0, r8
 800b830:	4649      	mov	r1, r9
 800b832:	f7f4 fd29 	bl	8000288 <__aeabi_dsub>
 800b836:	4652      	mov	r2, sl
 800b838:	465b      	mov	r3, fp
 800b83a:	4680      	mov	r8, r0
 800b83c:	4689      	mov	r9, r1
 800b83e:	f7f5 f96b 	bl	8000b18 <__aeabi_dcmpgt>
 800b842:	2800      	cmp	r0, #0
 800b844:	f040 8295 	bne.w	800bd72 <_dtoa_r+0x97a>
 800b848:	4652      	mov	r2, sl
 800b84a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b84e:	4640      	mov	r0, r8
 800b850:	4649      	mov	r1, r9
 800b852:	f7f5 f943 	bl	8000adc <__aeabi_dcmplt>
 800b856:	2800      	cmp	r0, #0
 800b858:	f040 8289 	bne.w	800bd6e <_dtoa_r+0x976>
 800b85c:	ec5b ab19 	vmov	sl, fp, d9
 800b860:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b862:	2b00      	cmp	r3, #0
 800b864:	f2c0 8148 	blt.w	800baf8 <_dtoa_r+0x700>
 800b868:	9a00      	ldr	r2, [sp, #0]
 800b86a:	2a0e      	cmp	r2, #14
 800b86c:	f300 8144 	bgt.w	800baf8 <_dtoa_r+0x700>
 800b870:	4b67      	ldr	r3, [pc, #412]	; (800ba10 <_dtoa_r+0x618>)
 800b872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b876:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f280 80d5 	bge.w	800ba2c <_dtoa_r+0x634>
 800b882:	9b03      	ldr	r3, [sp, #12]
 800b884:	2b00      	cmp	r3, #0
 800b886:	f300 80d1 	bgt.w	800ba2c <_dtoa_r+0x634>
 800b88a:	f040 826f 	bne.w	800bd6c <_dtoa_r+0x974>
 800b88e:	4b65      	ldr	r3, [pc, #404]	; (800ba24 <_dtoa_r+0x62c>)
 800b890:	2200      	movs	r2, #0
 800b892:	4640      	mov	r0, r8
 800b894:	4649      	mov	r1, r9
 800b896:	f7f4 feaf 	bl	80005f8 <__aeabi_dmul>
 800b89a:	4652      	mov	r2, sl
 800b89c:	465b      	mov	r3, fp
 800b89e:	f7f5 f931 	bl	8000b04 <__aeabi_dcmpge>
 800b8a2:	9e03      	ldr	r6, [sp, #12]
 800b8a4:	4637      	mov	r7, r6
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	f040 8245 	bne.w	800bd36 <_dtoa_r+0x93e>
 800b8ac:	9d01      	ldr	r5, [sp, #4]
 800b8ae:	2331      	movs	r3, #49	; 0x31
 800b8b0:	f805 3b01 	strb.w	r3, [r5], #1
 800b8b4:	9b00      	ldr	r3, [sp, #0]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	e240      	b.n	800bd3e <_dtoa_r+0x946>
 800b8bc:	07f2      	lsls	r2, r6, #31
 800b8be:	d505      	bpl.n	800b8cc <_dtoa_r+0x4d4>
 800b8c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8c4:	f7f4 fe98 	bl	80005f8 <__aeabi_dmul>
 800b8c8:	3501      	adds	r5, #1
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	1076      	asrs	r6, r6, #1
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	e777      	b.n	800b7c2 <_dtoa_r+0x3ca>
 800b8d2:	2502      	movs	r5, #2
 800b8d4:	e779      	b.n	800b7ca <_dtoa_r+0x3d2>
 800b8d6:	9f00      	ldr	r7, [sp, #0]
 800b8d8:	9e03      	ldr	r6, [sp, #12]
 800b8da:	e794      	b.n	800b806 <_dtoa_r+0x40e>
 800b8dc:	9901      	ldr	r1, [sp, #4]
 800b8de:	4b4c      	ldr	r3, [pc, #304]	; (800ba10 <_dtoa_r+0x618>)
 800b8e0:	4431      	add	r1, r6
 800b8e2:	910d      	str	r1, [sp, #52]	; 0x34
 800b8e4:	9908      	ldr	r1, [sp, #32]
 800b8e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b8ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8ee:	2900      	cmp	r1, #0
 800b8f0:	d043      	beq.n	800b97a <_dtoa_r+0x582>
 800b8f2:	494d      	ldr	r1, [pc, #308]	; (800ba28 <_dtoa_r+0x630>)
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	f7f4 ffa9 	bl	800084c <__aeabi_ddiv>
 800b8fa:	4652      	mov	r2, sl
 800b8fc:	465b      	mov	r3, fp
 800b8fe:	f7f4 fcc3 	bl	8000288 <__aeabi_dsub>
 800b902:	9d01      	ldr	r5, [sp, #4]
 800b904:	4682      	mov	sl, r0
 800b906:	468b      	mov	fp, r1
 800b908:	4649      	mov	r1, r9
 800b90a:	4640      	mov	r0, r8
 800b90c:	f7f5 f924 	bl	8000b58 <__aeabi_d2iz>
 800b910:	4606      	mov	r6, r0
 800b912:	f7f4 fe07 	bl	8000524 <__aeabi_i2d>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4640      	mov	r0, r8
 800b91c:	4649      	mov	r1, r9
 800b91e:	f7f4 fcb3 	bl	8000288 <__aeabi_dsub>
 800b922:	3630      	adds	r6, #48	; 0x30
 800b924:	f805 6b01 	strb.w	r6, [r5], #1
 800b928:	4652      	mov	r2, sl
 800b92a:	465b      	mov	r3, fp
 800b92c:	4680      	mov	r8, r0
 800b92e:	4689      	mov	r9, r1
 800b930:	f7f5 f8d4 	bl	8000adc <__aeabi_dcmplt>
 800b934:	2800      	cmp	r0, #0
 800b936:	d163      	bne.n	800ba00 <_dtoa_r+0x608>
 800b938:	4642      	mov	r2, r8
 800b93a:	464b      	mov	r3, r9
 800b93c:	4936      	ldr	r1, [pc, #216]	; (800ba18 <_dtoa_r+0x620>)
 800b93e:	2000      	movs	r0, #0
 800b940:	f7f4 fca2 	bl	8000288 <__aeabi_dsub>
 800b944:	4652      	mov	r2, sl
 800b946:	465b      	mov	r3, fp
 800b948:	f7f5 f8c8 	bl	8000adc <__aeabi_dcmplt>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	f040 80b5 	bne.w	800babc <_dtoa_r+0x6c4>
 800b952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b954:	429d      	cmp	r5, r3
 800b956:	d081      	beq.n	800b85c <_dtoa_r+0x464>
 800b958:	4b30      	ldr	r3, [pc, #192]	; (800ba1c <_dtoa_r+0x624>)
 800b95a:	2200      	movs	r2, #0
 800b95c:	4650      	mov	r0, sl
 800b95e:	4659      	mov	r1, fp
 800b960:	f7f4 fe4a 	bl	80005f8 <__aeabi_dmul>
 800b964:	4b2d      	ldr	r3, [pc, #180]	; (800ba1c <_dtoa_r+0x624>)
 800b966:	4682      	mov	sl, r0
 800b968:	468b      	mov	fp, r1
 800b96a:	4640      	mov	r0, r8
 800b96c:	4649      	mov	r1, r9
 800b96e:	2200      	movs	r2, #0
 800b970:	f7f4 fe42 	bl	80005f8 <__aeabi_dmul>
 800b974:	4680      	mov	r8, r0
 800b976:	4689      	mov	r9, r1
 800b978:	e7c6      	b.n	800b908 <_dtoa_r+0x510>
 800b97a:	4650      	mov	r0, sl
 800b97c:	4659      	mov	r1, fp
 800b97e:	f7f4 fe3b 	bl	80005f8 <__aeabi_dmul>
 800b982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b984:	9d01      	ldr	r5, [sp, #4]
 800b986:	930f      	str	r3, [sp, #60]	; 0x3c
 800b988:	4682      	mov	sl, r0
 800b98a:	468b      	mov	fp, r1
 800b98c:	4649      	mov	r1, r9
 800b98e:	4640      	mov	r0, r8
 800b990:	f7f5 f8e2 	bl	8000b58 <__aeabi_d2iz>
 800b994:	4606      	mov	r6, r0
 800b996:	f7f4 fdc5 	bl	8000524 <__aeabi_i2d>
 800b99a:	3630      	adds	r6, #48	; 0x30
 800b99c:	4602      	mov	r2, r0
 800b99e:	460b      	mov	r3, r1
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	4649      	mov	r1, r9
 800b9a4:	f7f4 fc70 	bl	8000288 <__aeabi_dsub>
 800b9a8:	f805 6b01 	strb.w	r6, [r5], #1
 800b9ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9ae:	429d      	cmp	r5, r3
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	4689      	mov	r9, r1
 800b9b4:	f04f 0200 	mov.w	r2, #0
 800b9b8:	d124      	bne.n	800ba04 <_dtoa_r+0x60c>
 800b9ba:	4b1b      	ldr	r3, [pc, #108]	; (800ba28 <_dtoa_r+0x630>)
 800b9bc:	4650      	mov	r0, sl
 800b9be:	4659      	mov	r1, fp
 800b9c0:	f7f4 fc64 	bl	800028c <__adddf3>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	4640      	mov	r0, r8
 800b9ca:	4649      	mov	r1, r9
 800b9cc:	f7f5 f8a4 	bl	8000b18 <__aeabi_dcmpgt>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d173      	bne.n	800babc <_dtoa_r+0x6c4>
 800b9d4:	4652      	mov	r2, sl
 800b9d6:	465b      	mov	r3, fp
 800b9d8:	4913      	ldr	r1, [pc, #76]	; (800ba28 <_dtoa_r+0x630>)
 800b9da:	2000      	movs	r0, #0
 800b9dc:	f7f4 fc54 	bl	8000288 <__aeabi_dsub>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4640      	mov	r0, r8
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	f7f5 f878 	bl	8000adc <__aeabi_dcmplt>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	f43f af35 	beq.w	800b85c <_dtoa_r+0x464>
 800b9f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b9f4:	1e6b      	subs	r3, r5, #1
 800b9f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b9fc:	2b30      	cmp	r3, #48	; 0x30
 800b9fe:	d0f8      	beq.n	800b9f2 <_dtoa_r+0x5fa>
 800ba00:	9700      	str	r7, [sp, #0]
 800ba02:	e049      	b.n	800ba98 <_dtoa_r+0x6a0>
 800ba04:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <_dtoa_r+0x624>)
 800ba06:	f7f4 fdf7 	bl	80005f8 <__aeabi_dmul>
 800ba0a:	4680      	mov	r8, r0
 800ba0c:	4689      	mov	r9, r1
 800ba0e:	e7bd      	b.n	800b98c <_dtoa_r+0x594>
 800ba10:	08021f90 	.word	0x08021f90
 800ba14:	08021f68 	.word	0x08021f68
 800ba18:	3ff00000 	.word	0x3ff00000
 800ba1c:	40240000 	.word	0x40240000
 800ba20:	401c0000 	.word	0x401c0000
 800ba24:	40140000 	.word	0x40140000
 800ba28:	3fe00000 	.word	0x3fe00000
 800ba2c:	9d01      	ldr	r5, [sp, #4]
 800ba2e:	4656      	mov	r6, sl
 800ba30:	465f      	mov	r7, fp
 800ba32:	4642      	mov	r2, r8
 800ba34:	464b      	mov	r3, r9
 800ba36:	4630      	mov	r0, r6
 800ba38:	4639      	mov	r1, r7
 800ba3a:	f7f4 ff07 	bl	800084c <__aeabi_ddiv>
 800ba3e:	f7f5 f88b 	bl	8000b58 <__aeabi_d2iz>
 800ba42:	4682      	mov	sl, r0
 800ba44:	f7f4 fd6e 	bl	8000524 <__aeabi_i2d>
 800ba48:	4642      	mov	r2, r8
 800ba4a:	464b      	mov	r3, r9
 800ba4c:	f7f4 fdd4 	bl	80005f8 <__aeabi_dmul>
 800ba50:	4602      	mov	r2, r0
 800ba52:	460b      	mov	r3, r1
 800ba54:	4630      	mov	r0, r6
 800ba56:	4639      	mov	r1, r7
 800ba58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ba5c:	f7f4 fc14 	bl	8000288 <__aeabi_dsub>
 800ba60:	f805 6b01 	strb.w	r6, [r5], #1
 800ba64:	9e01      	ldr	r6, [sp, #4]
 800ba66:	9f03      	ldr	r7, [sp, #12]
 800ba68:	1bae      	subs	r6, r5, r6
 800ba6a:	42b7      	cmp	r7, r6
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	460b      	mov	r3, r1
 800ba70:	d135      	bne.n	800bade <_dtoa_r+0x6e6>
 800ba72:	f7f4 fc0b 	bl	800028c <__adddf3>
 800ba76:	4642      	mov	r2, r8
 800ba78:	464b      	mov	r3, r9
 800ba7a:	4606      	mov	r6, r0
 800ba7c:	460f      	mov	r7, r1
 800ba7e:	f7f5 f84b 	bl	8000b18 <__aeabi_dcmpgt>
 800ba82:	b9d0      	cbnz	r0, 800baba <_dtoa_r+0x6c2>
 800ba84:	4642      	mov	r2, r8
 800ba86:	464b      	mov	r3, r9
 800ba88:	4630      	mov	r0, r6
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	f7f5 f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba90:	b110      	cbz	r0, 800ba98 <_dtoa_r+0x6a0>
 800ba92:	f01a 0f01 	tst.w	sl, #1
 800ba96:	d110      	bne.n	800baba <_dtoa_r+0x6c2>
 800ba98:	4620      	mov	r0, r4
 800ba9a:	ee18 1a10 	vmov	r1, s16
 800ba9e:	f000 fc2b 	bl	800c2f8 <_Bfree>
 800baa2:	2300      	movs	r3, #0
 800baa4:	9800      	ldr	r0, [sp, #0]
 800baa6:	702b      	strb	r3, [r5, #0]
 800baa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baaa:	3001      	adds	r0, #1
 800baac:	6018      	str	r0, [r3, #0]
 800baae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f43f acf1 	beq.w	800b498 <_dtoa_r+0xa0>
 800bab6:	601d      	str	r5, [r3, #0]
 800bab8:	e4ee      	b.n	800b498 <_dtoa_r+0xa0>
 800baba:	9f00      	ldr	r7, [sp, #0]
 800babc:	462b      	mov	r3, r5
 800babe:	461d      	mov	r5, r3
 800bac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bac4:	2a39      	cmp	r2, #57	; 0x39
 800bac6:	d106      	bne.n	800bad6 <_dtoa_r+0x6de>
 800bac8:	9a01      	ldr	r2, [sp, #4]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d1f7      	bne.n	800babe <_dtoa_r+0x6c6>
 800bace:	9901      	ldr	r1, [sp, #4]
 800bad0:	2230      	movs	r2, #48	; 0x30
 800bad2:	3701      	adds	r7, #1
 800bad4:	700a      	strb	r2, [r1, #0]
 800bad6:	781a      	ldrb	r2, [r3, #0]
 800bad8:	3201      	adds	r2, #1
 800bada:	701a      	strb	r2, [r3, #0]
 800badc:	e790      	b.n	800ba00 <_dtoa_r+0x608>
 800bade:	4ba6      	ldr	r3, [pc, #664]	; (800bd78 <_dtoa_r+0x980>)
 800bae0:	2200      	movs	r2, #0
 800bae2:	f7f4 fd89 	bl	80005f8 <__aeabi_dmul>
 800bae6:	2200      	movs	r2, #0
 800bae8:	2300      	movs	r3, #0
 800baea:	4606      	mov	r6, r0
 800baec:	460f      	mov	r7, r1
 800baee:	f7f4 ffeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d09d      	beq.n	800ba32 <_dtoa_r+0x63a>
 800baf6:	e7cf      	b.n	800ba98 <_dtoa_r+0x6a0>
 800baf8:	9a08      	ldr	r2, [sp, #32]
 800bafa:	2a00      	cmp	r2, #0
 800bafc:	f000 80d7 	beq.w	800bcae <_dtoa_r+0x8b6>
 800bb00:	9a06      	ldr	r2, [sp, #24]
 800bb02:	2a01      	cmp	r2, #1
 800bb04:	f300 80ba 	bgt.w	800bc7c <_dtoa_r+0x884>
 800bb08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb0a:	2a00      	cmp	r2, #0
 800bb0c:	f000 80b2 	beq.w	800bc74 <_dtoa_r+0x87c>
 800bb10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb14:	9e07      	ldr	r6, [sp, #28]
 800bb16:	9d04      	ldr	r5, [sp, #16]
 800bb18:	9a04      	ldr	r2, [sp, #16]
 800bb1a:	441a      	add	r2, r3
 800bb1c:	9204      	str	r2, [sp, #16]
 800bb1e:	9a05      	ldr	r2, [sp, #20]
 800bb20:	2101      	movs	r1, #1
 800bb22:	441a      	add	r2, r3
 800bb24:	4620      	mov	r0, r4
 800bb26:	9205      	str	r2, [sp, #20]
 800bb28:	f000 fc9e 	bl	800c468 <__i2b>
 800bb2c:	4607      	mov	r7, r0
 800bb2e:	2d00      	cmp	r5, #0
 800bb30:	dd0c      	ble.n	800bb4c <_dtoa_r+0x754>
 800bb32:	9b05      	ldr	r3, [sp, #20]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	dd09      	ble.n	800bb4c <_dtoa_r+0x754>
 800bb38:	42ab      	cmp	r3, r5
 800bb3a:	9a04      	ldr	r2, [sp, #16]
 800bb3c:	bfa8      	it	ge
 800bb3e:	462b      	movge	r3, r5
 800bb40:	1ad2      	subs	r2, r2, r3
 800bb42:	9204      	str	r2, [sp, #16]
 800bb44:	9a05      	ldr	r2, [sp, #20]
 800bb46:	1aed      	subs	r5, r5, r3
 800bb48:	1ad3      	subs	r3, r2, r3
 800bb4a:	9305      	str	r3, [sp, #20]
 800bb4c:	9b07      	ldr	r3, [sp, #28]
 800bb4e:	b31b      	cbz	r3, 800bb98 <_dtoa_r+0x7a0>
 800bb50:	9b08      	ldr	r3, [sp, #32]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 80af 	beq.w	800bcb6 <_dtoa_r+0x8be>
 800bb58:	2e00      	cmp	r6, #0
 800bb5a:	dd13      	ble.n	800bb84 <_dtoa_r+0x78c>
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	4632      	mov	r2, r6
 800bb60:	4620      	mov	r0, r4
 800bb62:	f000 fd41 	bl	800c5e8 <__pow5mult>
 800bb66:	ee18 2a10 	vmov	r2, s16
 800bb6a:	4601      	mov	r1, r0
 800bb6c:	4607      	mov	r7, r0
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 fc90 	bl	800c494 <__multiply>
 800bb74:	ee18 1a10 	vmov	r1, s16
 800bb78:	4680      	mov	r8, r0
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	f000 fbbc 	bl	800c2f8 <_Bfree>
 800bb80:	ee08 8a10 	vmov	s16, r8
 800bb84:	9b07      	ldr	r3, [sp, #28]
 800bb86:	1b9a      	subs	r2, r3, r6
 800bb88:	d006      	beq.n	800bb98 <_dtoa_r+0x7a0>
 800bb8a:	ee18 1a10 	vmov	r1, s16
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f000 fd2a 	bl	800c5e8 <__pow5mult>
 800bb94:	ee08 0a10 	vmov	s16, r0
 800bb98:	2101      	movs	r1, #1
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f000 fc64 	bl	800c468 <__i2b>
 800bba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	4606      	mov	r6, r0
 800bba6:	f340 8088 	ble.w	800bcba <_dtoa_r+0x8c2>
 800bbaa:	461a      	mov	r2, r3
 800bbac:	4601      	mov	r1, r0
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f000 fd1a 	bl	800c5e8 <__pow5mult>
 800bbb4:	9b06      	ldr	r3, [sp, #24]
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	4606      	mov	r6, r0
 800bbba:	f340 8081 	ble.w	800bcc0 <_dtoa_r+0x8c8>
 800bbbe:	f04f 0800 	mov.w	r8, #0
 800bbc2:	6933      	ldr	r3, [r6, #16]
 800bbc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bbc8:	6918      	ldr	r0, [r3, #16]
 800bbca:	f000 fbfd 	bl	800c3c8 <__hi0bits>
 800bbce:	f1c0 0020 	rsb	r0, r0, #32
 800bbd2:	9b05      	ldr	r3, [sp, #20]
 800bbd4:	4418      	add	r0, r3
 800bbd6:	f010 001f 	ands.w	r0, r0, #31
 800bbda:	f000 8092 	beq.w	800bd02 <_dtoa_r+0x90a>
 800bbde:	f1c0 0320 	rsb	r3, r0, #32
 800bbe2:	2b04      	cmp	r3, #4
 800bbe4:	f340 808a 	ble.w	800bcfc <_dtoa_r+0x904>
 800bbe8:	f1c0 001c 	rsb	r0, r0, #28
 800bbec:	9b04      	ldr	r3, [sp, #16]
 800bbee:	4403      	add	r3, r0
 800bbf0:	9304      	str	r3, [sp, #16]
 800bbf2:	9b05      	ldr	r3, [sp, #20]
 800bbf4:	4403      	add	r3, r0
 800bbf6:	4405      	add	r5, r0
 800bbf8:	9305      	str	r3, [sp, #20]
 800bbfa:	9b04      	ldr	r3, [sp, #16]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	dd07      	ble.n	800bc10 <_dtoa_r+0x818>
 800bc00:	ee18 1a10 	vmov	r1, s16
 800bc04:	461a      	mov	r2, r3
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 fd48 	bl	800c69c <__lshift>
 800bc0c:	ee08 0a10 	vmov	s16, r0
 800bc10:	9b05      	ldr	r3, [sp, #20]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	dd05      	ble.n	800bc22 <_dtoa_r+0x82a>
 800bc16:	4631      	mov	r1, r6
 800bc18:	461a      	mov	r2, r3
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f000 fd3e 	bl	800c69c <__lshift>
 800bc20:	4606      	mov	r6, r0
 800bc22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d06e      	beq.n	800bd06 <_dtoa_r+0x90e>
 800bc28:	ee18 0a10 	vmov	r0, s16
 800bc2c:	4631      	mov	r1, r6
 800bc2e:	f000 fda5 	bl	800c77c <__mcmp>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	da67      	bge.n	800bd06 <_dtoa_r+0x90e>
 800bc36:	9b00      	ldr	r3, [sp, #0]
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	ee18 1a10 	vmov	r1, s16
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	220a      	movs	r2, #10
 800bc42:	2300      	movs	r3, #0
 800bc44:	4620      	mov	r0, r4
 800bc46:	f000 fb79 	bl	800c33c <__multadd>
 800bc4a:	9b08      	ldr	r3, [sp, #32]
 800bc4c:	ee08 0a10 	vmov	s16, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 81b1 	beq.w	800bfb8 <_dtoa_r+0xbc0>
 800bc56:	2300      	movs	r3, #0
 800bc58:	4639      	mov	r1, r7
 800bc5a:	220a      	movs	r2, #10
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f000 fb6d 	bl	800c33c <__multadd>
 800bc62:	9b02      	ldr	r3, [sp, #8]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	4607      	mov	r7, r0
 800bc68:	f300 808e 	bgt.w	800bd88 <_dtoa_r+0x990>
 800bc6c:	9b06      	ldr	r3, [sp, #24]
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	dc51      	bgt.n	800bd16 <_dtoa_r+0x91e>
 800bc72:	e089      	b.n	800bd88 <_dtoa_r+0x990>
 800bc74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc7a:	e74b      	b.n	800bb14 <_dtoa_r+0x71c>
 800bc7c:	9b03      	ldr	r3, [sp, #12]
 800bc7e:	1e5e      	subs	r6, r3, #1
 800bc80:	9b07      	ldr	r3, [sp, #28]
 800bc82:	42b3      	cmp	r3, r6
 800bc84:	bfbf      	itttt	lt
 800bc86:	9b07      	ldrlt	r3, [sp, #28]
 800bc88:	9607      	strlt	r6, [sp, #28]
 800bc8a:	1af2      	sublt	r2, r6, r3
 800bc8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bc8e:	bfb6      	itet	lt
 800bc90:	189b      	addlt	r3, r3, r2
 800bc92:	1b9e      	subge	r6, r3, r6
 800bc94:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bc96:	9b03      	ldr	r3, [sp, #12]
 800bc98:	bfb8      	it	lt
 800bc9a:	2600      	movlt	r6, #0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	bfb7      	itett	lt
 800bca0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bca4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bca8:	1a9d      	sublt	r5, r3, r2
 800bcaa:	2300      	movlt	r3, #0
 800bcac:	e734      	b.n	800bb18 <_dtoa_r+0x720>
 800bcae:	9e07      	ldr	r6, [sp, #28]
 800bcb0:	9d04      	ldr	r5, [sp, #16]
 800bcb2:	9f08      	ldr	r7, [sp, #32]
 800bcb4:	e73b      	b.n	800bb2e <_dtoa_r+0x736>
 800bcb6:	9a07      	ldr	r2, [sp, #28]
 800bcb8:	e767      	b.n	800bb8a <_dtoa_r+0x792>
 800bcba:	9b06      	ldr	r3, [sp, #24]
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	dc18      	bgt.n	800bcf2 <_dtoa_r+0x8fa>
 800bcc0:	f1ba 0f00 	cmp.w	sl, #0
 800bcc4:	d115      	bne.n	800bcf2 <_dtoa_r+0x8fa>
 800bcc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcca:	b993      	cbnz	r3, 800bcf2 <_dtoa_r+0x8fa>
 800bccc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bcd0:	0d1b      	lsrs	r3, r3, #20
 800bcd2:	051b      	lsls	r3, r3, #20
 800bcd4:	b183      	cbz	r3, 800bcf8 <_dtoa_r+0x900>
 800bcd6:	9b04      	ldr	r3, [sp, #16]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	9304      	str	r3, [sp, #16]
 800bcdc:	9b05      	ldr	r3, [sp, #20]
 800bcde:	3301      	adds	r3, #1
 800bce0:	9305      	str	r3, [sp, #20]
 800bce2:	f04f 0801 	mov.w	r8, #1
 800bce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f47f af6a 	bne.w	800bbc2 <_dtoa_r+0x7ca>
 800bcee:	2001      	movs	r0, #1
 800bcf0:	e76f      	b.n	800bbd2 <_dtoa_r+0x7da>
 800bcf2:	f04f 0800 	mov.w	r8, #0
 800bcf6:	e7f6      	b.n	800bce6 <_dtoa_r+0x8ee>
 800bcf8:	4698      	mov	r8, r3
 800bcfa:	e7f4      	b.n	800bce6 <_dtoa_r+0x8ee>
 800bcfc:	f43f af7d 	beq.w	800bbfa <_dtoa_r+0x802>
 800bd00:	4618      	mov	r0, r3
 800bd02:	301c      	adds	r0, #28
 800bd04:	e772      	b.n	800bbec <_dtoa_r+0x7f4>
 800bd06:	9b03      	ldr	r3, [sp, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	dc37      	bgt.n	800bd7c <_dtoa_r+0x984>
 800bd0c:	9b06      	ldr	r3, [sp, #24]
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	dd34      	ble.n	800bd7c <_dtoa_r+0x984>
 800bd12:	9b03      	ldr	r3, [sp, #12]
 800bd14:	9302      	str	r3, [sp, #8]
 800bd16:	9b02      	ldr	r3, [sp, #8]
 800bd18:	b96b      	cbnz	r3, 800bd36 <_dtoa_r+0x93e>
 800bd1a:	4631      	mov	r1, r6
 800bd1c:	2205      	movs	r2, #5
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f000 fb0c 	bl	800c33c <__multadd>
 800bd24:	4601      	mov	r1, r0
 800bd26:	4606      	mov	r6, r0
 800bd28:	ee18 0a10 	vmov	r0, s16
 800bd2c:	f000 fd26 	bl	800c77c <__mcmp>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	f73f adbb 	bgt.w	800b8ac <_dtoa_r+0x4b4>
 800bd36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd38:	9d01      	ldr	r5, [sp, #4]
 800bd3a:	43db      	mvns	r3, r3
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	f04f 0800 	mov.w	r8, #0
 800bd42:	4631      	mov	r1, r6
 800bd44:	4620      	mov	r0, r4
 800bd46:	f000 fad7 	bl	800c2f8 <_Bfree>
 800bd4a:	2f00      	cmp	r7, #0
 800bd4c:	f43f aea4 	beq.w	800ba98 <_dtoa_r+0x6a0>
 800bd50:	f1b8 0f00 	cmp.w	r8, #0
 800bd54:	d005      	beq.n	800bd62 <_dtoa_r+0x96a>
 800bd56:	45b8      	cmp	r8, r7
 800bd58:	d003      	beq.n	800bd62 <_dtoa_r+0x96a>
 800bd5a:	4641      	mov	r1, r8
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f000 facb 	bl	800c2f8 <_Bfree>
 800bd62:	4639      	mov	r1, r7
 800bd64:	4620      	mov	r0, r4
 800bd66:	f000 fac7 	bl	800c2f8 <_Bfree>
 800bd6a:	e695      	b.n	800ba98 <_dtoa_r+0x6a0>
 800bd6c:	2600      	movs	r6, #0
 800bd6e:	4637      	mov	r7, r6
 800bd70:	e7e1      	b.n	800bd36 <_dtoa_r+0x93e>
 800bd72:	9700      	str	r7, [sp, #0]
 800bd74:	4637      	mov	r7, r6
 800bd76:	e599      	b.n	800b8ac <_dtoa_r+0x4b4>
 800bd78:	40240000 	.word	0x40240000
 800bd7c:	9b08      	ldr	r3, [sp, #32]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f000 80ca 	beq.w	800bf18 <_dtoa_r+0xb20>
 800bd84:	9b03      	ldr	r3, [sp, #12]
 800bd86:	9302      	str	r3, [sp, #8]
 800bd88:	2d00      	cmp	r5, #0
 800bd8a:	dd05      	ble.n	800bd98 <_dtoa_r+0x9a0>
 800bd8c:	4639      	mov	r1, r7
 800bd8e:	462a      	mov	r2, r5
 800bd90:	4620      	mov	r0, r4
 800bd92:	f000 fc83 	bl	800c69c <__lshift>
 800bd96:	4607      	mov	r7, r0
 800bd98:	f1b8 0f00 	cmp.w	r8, #0
 800bd9c:	d05b      	beq.n	800be56 <_dtoa_r+0xa5e>
 800bd9e:	6879      	ldr	r1, [r7, #4]
 800bda0:	4620      	mov	r0, r4
 800bda2:	f000 fa69 	bl	800c278 <_Balloc>
 800bda6:	4605      	mov	r5, r0
 800bda8:	b928      	cbnz	r0, 800bdb6 <_dtoa_r+0x9be>
 800bdaa:	4b87      	ldr	r3, [pc, #540]	; (800bfc8 <_dtoa_r+0xbd0>)
 800bdac:	4602      	mov	r2, r0
 800bdae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bdb2:	f7ff bb3b 	b.w	800b42c <_dtoa_r+0x34>
 800bdb6:	693a      	ldr	r2, [r7, #16]
 800bdb8:	3202      	adds	r2, #2
 800bdba:	0092      	lsls	r2, r2, #2
 800bdbc:	f107 010c 	add.w	r1, r7, #12
 800bdc0:	300c      	adds	r0, #12
 800bdc2:	f7fe fb48 	bl	800a456 <memcpy>
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	4629      	mov	r1, r5
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f000 fc66 	bl	800c69c <__lshift>
 800bdd0:	9b01      	ldr	r3, [sp, #4]
 800bdd2:	f103 0901 	add.w	r9, r3, #1
 800bdd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bdda:	4413      	add	r3, r2
 800bddc:	9305      	str	r3, [sp, #20]
 800bdde:	f00a 0301 	and.w	r3, sl, #1
 800bde2:	46b8      	mov	r8, r7
 800bde4:	9304      	str	r3, [sp, #16]
 800bde6:	4607      	mov	r7, r0
 800bde8:	4631      	mov	r1, r6
 800bdea:	ee18 0a10 	vmov	r0, s16
 800bdee:	f7ff fa75 	bl	800b2dc <quorem>
 800bdf2:	4641      	mov	r1, r8
 800bdf4:	9002      	str	r0, [sp, #8]
 800bdf6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bdfa:	ee18 0a10 	vmov	r0, s16
 800bdfe:	f000 fcbd 	bl	800c77c <__mcmp>
 800be02:	463a      	mov	r2, r7
 800be04:	9003      	str	r0, [sp, #12]
 800be06:	4631      	mov	r1, r6
 800be08:	4620      	mov	r0, r4
 800be0a:	f000 fcd3 	bl	800c7b4 <__mdiff>
 800be0e:	68c2      	ldr	r2, [r0, #12]
 800be10:	f109 3bff 	add.w	fp, r9, #4294967295
 800be14:	4605      	mov	r5, r0
 800be16:	bb02      	cbnz	r2, 800be5a <_dtoa_r+0xa62>
 800be18:	4601      	mov	r1, r0
 800be1a:	ee18 0a10 	vmov	r0, s16
 800be1e:	f000 fcad 	bl	800c77c <__mcmp>
 800be22:	4602      	mov	r2, r0
 800be24:	4629      	mov	r1, r5
 800be26:	4620      	mov	r0, r4
 800be28:	9207      	str	r2, [sp, #28]
 800be2a:	f000 fa65 	bl	800c2f8 <_Bfree>
 800be2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800be32:	ea43 0102 	orr.w	r1, r3, r2
 800be36:	9b04      	ldr	r3, [sp, #16]
 800be38:	430b      	orrs	r3, r1
 800be3a:	464d      	mov	r5, r9
 800be3c:	d10f      	bne.n	800be5e <_dtoa_r+0xa66>
 800be3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800be42:	d02a      	beq.n	800be9a <_dtoa_r+0xaa2>
 800be44:	9b03      	ldr	r3, [sp, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	dd02      	ble.n	800be50 <_dtoa_r+0xa58>
 800be4a:	9b02      	ldr	r3, [sp, #8]
 800be4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800be50:	f88b a000 	strb.w	sl, [fp]
 800be54:	e775      	b.n	800bd42 <_dtoa_r+0x94a>
 800be56:	4638      	mov	r0, r7
 800be58:	e7ba      	b.n	800bdd0 <_dtoa_r+0x9d8>
 800be5a:	2201      	movs	r2, #1
 800be5c:	e7e2      	b.n	800be24 <_dtoa_r+0xa2c>
 800be5e:	9b03      	ldr	r3, [sp, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	db04      	blt.n	800be6e <_dtoa_r+0xa76>
 800be64:	9906      	ldr	r1, [sp, #24]
 800be66:	430b      	orrs	r3, r1
 800be68:	9904      	ldr	r1, [sp, #16]
 800be6a:	430b      	orrs	r3, r1
 800be6c:	d122      	bne.n	800beb4 <_dtoa_r+0xabc>
 800be6e:	2a00      	cmp	r2, #0
 800be70:	ddee      	ble.n	800be50 <_dtoa_r+0xa58>
 800be72:	ee18 1a10 	vmov	r1, s16
 800be76:	2201      	movs	r2, #1
 800be78:	4620      	mov	r0, r4
 800be7a:	f000 fc0f 	bl	800c69c <__lshift>
 800be7e:	4631      	mov	r1, r6
 800be80:	ee08 0a10 	vmov	s16, r0
 800be84:	f000 fc7a 	bl	800c77c <__mcmp>
 800be88:	2800      	cmp	r0, #0
 800be8a:	dc03      	bgt.n	800be94 <_dtoa_r+0xa9c>
 800be8c:	d1e0      	bne.n	800be50 <_dtoa_r+0xa58>
 800be8e:	f01a 0f01 	tst.w	sl, #1
 800be92:	d0dd      	beq.n	800be50 <_dtoa_r+0xa58>
 800be94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800be98:	d1d7      	bne.n	800be4a <_dtoa_r+0xa52>
 800be9a:	2339      	movs	r3, #57	; 0x39
 800be9c:	f88b 3000 	strb.w	r3, [fp]
 800bea0:	462b      	mov	r3, r5
 800bea2:	461d      	mov	r5, r3
 800bea4:	3b01      	subs	r3, #1
 800bea6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800beaa:	2a39      	cmp	r2, #57	; 0x39
 800beac:	d071      	beq.n	800bf92 <_dtoa_r+0xb9a>
 800beae:	3201      	adds	r2, #1
 800beb0:	701a      	strb	r2, [r3, #0]
 800beb2:	e746      	b.n	800bd42 <_dtoa_r+0x94a>
 800beb4:	2a00      	cmp	r2, #0
 800beb6:	dd07      	ble.n	800bec8 <_dtoa_r+0xad0>
 800beb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bebc:	d0ed      	beq.n	800be9a <_dtoa_r+0xaa2>
 800bebe:	f10a 0301 	add.w	r3, sl, #1
 800bec2:	f88b 3000 	strb.w	r3, [fp]
 800bec6:	e73c      	b.n	800bd42 <_dtoa_r+0x94a>
 800bec8:	9b05      	ldr	r3, [sp, #20]
 800beca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bece:	4599      	cmp	r9, r3
 800bed0:	d047      	beq.n	800bf62 <_dtoa_r+0xb6a>
 800bed2:	ee18 1a10 	vmov	r1, s16
 800bed6:	2300      	movs	r3, #0
 800bed8:	220a      	movs	r2, #10
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 fa2e 	bl	800c33c <__multadd>
 800bee0:	45b8      	cmp	r8, r7
 800bee2:	ee08 0a10 	vmov	s16, r0
 800bee6:	f04f 0300 	mov.w	r3, #0
 800beea:	f04f 020a 	mov.w	r2, #10
 800beee:	4641      	mov	r1, r8
 800bef0:	4620      	mov	r0, r4
 800bef2:	d106      	bne.n	800bf02 <_dtoa_r+0xb0a>
 800bef4:	f000 fa22 	bl	800c33c <__multadd>
 800bef8:	4680      	mov	r8, r0
 800befa:	4607      	mov	r7, r0
 800befc:	f109 0901 	add.w	r9, r9, #1
 800bf00:	e772      	b.n	800bde8 <_dtoa_r+0x9f0>
 800bf02:	f000 fa1b 	bl	800c33c <__multadd>
 800bf06:	4639      	mov	r1, r7
 800bf08:	4680      	mov	r8, r0
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	220a      	movs	r2, #10
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f000 fa14 	bl	800c33c <__multadd>
 800bf14:	4607      	mov	r7, r0
 800bf16:	e7f1      	b.n	800befc <_dtoa_r+0xb04>
 800bf18:	9b03      	ldr	r3, [sp, #12]
 800bf1a:	9302      	str	r3, [sp, #8]
 800bf1c:	9d01      	ldr	r5, [sp, #4]
 800bf1e:	ee18 0a10 	vmov	r0, s16
 800bf22:	4631      	mov	r1, r6
 800bf24:	f7ff f9da 	bl	800b2dc <quorem>
 800bf28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bf2c:	9b01      	ldr	r3, [sp, #4]
 800bf2e:	f805 ab01 	strb.w	sl, [r5], #1
 800bf32:	1aea      	subs	r2, r5, r3
 800bf34:	9b02      	ldr	r3, [sp, #8]
 800bf36:	4293      	cmp	r3, r2
 800bf38:	dd09      	ble.n	800bf4e <_dtoa_r+0xb56>
 800bf3a:	ee18 1a10 	vmov	r1, s16
 800bf3e:	2300      	movs	r3, #0
 800bf40:	220a      	movs	r2, #10
 800bf42:	4620      	mov	r0, r4
 800bf44:	f000 f9fa 	bl	800c33c <__multadd>
 800bf48:	ee08 0a10 	vmov	s16, r0
 800bf4c:	e7e7      	b.n	800bf1e <_dtoa_r+0xb26>
 800bf4e:	9b02      	ldr	r3, [sp, #8]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	bfc8      	it	gt
 800bf54:	461d      	movgt	r5, r3
 800bf56:	9b01      	ldr	r3, [sp, #4]
 800bf58:	bfd8      	it	le
 800bf5a:	2501      	movle	r5, #1
 800bf5c:	441d      	add	r5, r3
 800bf5e:	f04f 0800 	mov.w	r8, #0
 800bf62:	ee18 1a10 	vmov	r1, s16
 800bf66:	2201      	movs	r2, #1
 800bf68:	4620      	mov	r0, r4
 800bf6a:	f000 fb97 	bl	800c69c <__lshift>
 800bf6e:	4631      	mov	r1, r6
 800bf70:	ee08 0a10 	vmov	s16, r0
 800bf74:	f000 fc02 	bl	800c77c <__mcmp>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	dc91      	bgt.n	800bea0 <_dtoa_r+0xaa8>
 800bf7c:	d102      	bne.n	800bf84 <_dtoa_r+0xb8c>
 800bf7e:	f01a 0f01 	tst.w	sl, #1
 800bf82:	d18d      	bne.n	800bea0 <_dtoa_r+0xaa8>
 800bf84:	462b      	mov	r3, r5
 800bf86:	461d      	mov	r5, r3
 800bf88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf8c:	2a30      	cmp	r2, #48	; 0x30
 800bf8e:	d0fa      	beq.n	800bf86 <_dtoa_r+0xb8e>
 800bf90:	e6d7      	b.n	800bd42 <_dtoa_r+0x94a>
 800bf92:	9a01      	ldr	r2, [sp, #4]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d184      	bne.n	800bea2 <_dtoa_r+0xaaa>
 800bf98:	9b00      	ldr	r3, [sp, #0]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	2331      	movs	r3, #49	; 0x31
 800bfa0:	7013      	strb	r3, [r2, #0]
 800bfa2:	e6ce      	b.n	800bd42 <_dtoa_r+0x94a>
 800bfa4:	4b09      	ldr	r3, [pc, #36]	; (800bfcc <_dtoa_r+0xbd4>)
 800bfa6:	f7ff ba95 	b.w	800b4d4 <_dtoa_r+0xdc>
 800bfaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f47f aa6e 	bne.w	800b48e <_dtoa_r+0x96>
 800bfb2:	4b07      	ldr	r3, [pc, #28]	; (800bfd0 <_dtoa_r+0xbd8>)
 800bfb4:	f7ff ba8e 	b.w	800b4d4 <_dtoa_r+0xdc>
 800bfb8:	9b02      	ldr	r3, [sp, #8]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	dcae      	bgt.n	800bf1c <_dtoa_r+0xb24>
 800bfbe:	9b06      	ldr	r3, [sp, #24]
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	f73f aea8 	bgt.w	800bd16 <_dtoa_r+0x91e>
 800bfc6:	e7a9      	b.n	800bf1c <_dtoa_r+0xb24>
 800bfc8:	08021ef7 	.word	0x08021ef7
 800bfcc:	08021e54 	.word	0x08021e54
 800bfd0:	08021e78 	.word	0x08021e78

0800bfd4 <__sflush_r>:
 800bfd4:	898a      	ldrh	r2, [r1, #12]
 800bfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfda:	4605      	mov	r5, r0
 800bfdc:	0710      	lsls	r0, r2, #28
 800bfde:	460c      	mov	r4, r1
 800bfe0:	d458      	bmi.n	800c094 <__sflush_r+0xc0>
 800bfe2:	684b      	ldr	r3, [r1, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	dc05      	bgt.n	800bff4 <__sflush_r+0x20>
 800bfe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	dc02      	bgt.n	800bff4 <__sflush_r+0x20>
 800bfee:	2000      	movs	r0, #0
 800bff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bff6:	2e00      	cmp	r6, #0
 800bff8:	d0f9      	beq.n	800bfee <__sflush_r+0x1a>
 800bffa:	2300      	movs	r3, #0
 800bffc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c000:	682f      	ldr	r7, [r5, #0]
 800c002:	602b      	str	r3, [r5, #0]
 800c004:	d032      	beq.n	800c06c <__sflush_r+0x98>
 800c006:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c008:	89a3      	ldrh	r3, [r4, #12]
 800c00a:	075a      	lsls	r2, r3, #29
 800c00c:	d505      	bpl.n	800c01a <__sflush_r+0x46>
 800c00e:	6863      	ldr	r3, [r4, #4]
 800c010:	1ac0      	subs	r0, r0, r3
 800c012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c014:	b10b      	cbz	r3, 800c01a <__sflush_r+0x46>
 800c016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c018:	1ac0      	subs	r0, r0, r3
 800c01a:	2300      	movs	r3, #0
 800c01c:	4602      	mov	r2, r0
 800c01e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c020:	6a21      	ldr	r1, [r4, #32]
 800c022:	4628      	mov	r0, r5
 800c024:	47b0      	blx	r6
 800c026:	1c43      	adds	r3, r0, #1
 800c028:	89a3      	ldrh	r3, [r4, #12]
 800c02a:	d106      	bne.n	800c03a <__sflush_r+0x66>
 800c02c:	6829      	ldr	r1, [r5, #0]
 800c02e:	291d      	cmp	r1, #29
 800c030:	d82c      	bhi.n	800c08c <__sflush_r+0xb8>
 800c032:	4a2a      	ldr	r2, [pc, #168]	; (800c0dc <__sflush_r+0x108>)
 800c034:	40ca      	lsrs	r2, r1
 800c036:	07d6      	lsls	r6, r2, #31
 800c038:	d528      	bpl.n	800c08c <__sflush_r+0xb8>
 800c03a:	2200      	movs	r2, #0
 800c03c:	6062      	str	r2, [r4, #4]
 800c03e:	04d9      	lsls	r1, r3, #19
 800c040:	6922      	ldr	r2, [r4, #16]
 800c042:	6022      	str	r2, [r4, #0]
 800c044:	d504      	bpl.n	800c050 <__sflush_r+0x7c>
 800c046:	1c42      	adds	r2, r0, #1
 800c048:	d101      	bne.n	800c04e <__sflush_r+0x7a>
 800c04a:	682b      	ldr	r3, [r5, #0]
 800c04c:	b903      	cbnz	r3, 800c050 <__sflush_r+0x7c>
 800c04e:	6560      	str	r0, [r4, #84]	; 0x54
 800c050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c052:	602f      	str	r7, [r5, #0]
 800c054:	2900      	cmp	r1, #0
 800c056:	d0ca      	beq.n	800bfee <__sflush_r+0x1a>
 800c058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c05c:	4299      	cmp	r1, r3
 800c05e:	d002      	beq.n	800c066 <__sflush_r+0x92>
 800c060:	4628      	mov	r0, r5
 800c062:	f000 fca3 	bl	800c9ac <_free_r>
 800c066:	2000      	movs	r0, #0
 800c068:	6360      	str	r0, [r4, #52]	; 0x34
 800c06a:	e7c1      	b.n	800bff0 <__sflush_r+0x1c>
 800c06c:	6a21      	ldr	r1, [r4, #32]
 800c06e:	2301      	movs	r3, #1
 800c070:	4628      	mov	r0, r5
 800c072:	47b0      	blx	r6
 800c074:	1c41      	adds	r1, r0, #1
 800c076:	d1c7      	bne.n	800c008 <__sflush_r+0x34>
 800c078:	682b      	ldr	r3, [r5, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d0c4      	beq.n	800c008 <__sflush_r+0x34>
 800c07e:	2b1d      	cmp	r3, #29
 800c080:	d001      	beq.n	800c086 <__sflush_r+0xb2>
 800c082:	2b16      	cmp	r3, #22
 800c084:	d101      	bne.n	800c08a <__sflush_r+0xb6>
 800c086:	602f      	str	r7, [r5, #0]
 800c088:	e7b1      	b.n	800bfee <__sflush_r+0x1a>
 800c08a:	89a3      	ldrh	r3, [r4, #12]
 800c08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c090:	81a3      	strh	r3, [r4, #12]
 800c092:	e7ad      	b.n	800bff0 <__sflush_r+0x1c>
 800c094:	690f      	ldr	r7, [r1, #16]
 800c096:	2f00      	cmp	r7, #0
 800c098:	d0a9      	beq.n	800bfee <__sflush_r+0x1a>
 800c09a:	0793      	lsls	r3, r2, #30
 800c09c:	680e      	ldr	r6, [r1, #0]
 800c09e:	bf08      	it	eq
 800c0a0:	694b      	ldreq	r3, [r1, #20]
 800c0a2:	600f      	str	r7, [r1, #0]
 800c0a4:	bf18      	it	ne
 800c0a6:	2300      	movne	r3, #0
 800c0a8:	eba6 0807 	sub.w	r8, r6, r7
 800c0ac:	608b      	str	r3, [r1, #8]
 800c0ae:	f1b8 0f00 	cmp.w	r8, #0
 800c0b2:	dd9c      	ble.n	800bfee <__sflush_r+0x1a>
 800c0b4:	6a21      	ldr	r1, [r4, #32]
 800c0b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c0b8:	4643      	mov	r3, r8
 800c0ba:	463a      	mov	r2, r7
 800c0bc:	4628      	mov	r0, r5
 800c0be:	47b0      	blx	r6
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	dc06      	bgt.n	800c0d2 <__sflush_r+0xfe>
 800c0c4:	89a3      	ldrh	r3, [r4, #12]
 800c0c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0ca:	81a3      	strh	r3, [r4, #12]
 800c0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d0:	e78e      	b.n	800bff0 <__sflush_r+0x1c>
 800c0d2:	4407      	add	r7, r0
 800c0d4:	eba8 0800 	sub.w	r8, r8, r0
 800c0d8:	e7e9      	b.n	800c0ae <__sflush_r+0xda>
 800c0da:	bf00      	nop
 800c0dc:	20400001 	.word	0x20400001

0800c0e0 <_fflush_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	690b      	ldr	r3, [r1, #16]
 800c0e4:	4605      	mov	r5, r0
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	b913      	cbnz	r3, 800c0f0 <_fflush_r+0x10>
 800c0ea:	2500      	movs	r5, #0
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	bd38      	pop	{r3, r4, r5, pc}
 800c0f0:	b118      	cbz	r0, 800c0fa <_fflush_r+0x1a>
 800c0f2:	6983      	ldr	r3, [r0, #24]
 800c0f4:	b90b      	cbnz	r3, 800c0fa <_fflush_r+0x1a>
 800c0f6:	f7fe f8e9 	bl	800a2cc <__sinit>
 800c0fa:	4b14      	ldr	r3, [pc, #80]	; (800c14c <_fflush_r+0x6c>)
 800c0fc:	429c      	cmp	r4, r3
 800c0fe:	d11b      	bne.n	800c138 <_fflush_r+0x58>
 800c100:	686c      	ldr	r4, [r5, #4]
 800c102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d0ef      	beq.n	800c0ea <_fflush_r+0xa>
 800c10a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c10c:	07d0      	lsls	r0, r2, #31
 800c10e:	d404      	bmi.n	800c11a <_fflush_r+0x3a>
 800c110:	0599      	lsls	r1, r3, #22
 800c112:	d402      	bmi.n	800c11a <_fflush_r+0x3a>
 800c114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c116:	f7fe f99c 	bl	800a452 <__retarget_lock_acquire_recursive>
 800c11a:	4628      	mov	r0, r5
 800c11c:	4621      	mov	r1, r4
 800c11e:	f7ff ff59 	bl	800bfd4 <__sflush_r>
 800c122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c124:	07da      	lsls	r2, r3, #31
 800c126:	4605      	mov	r5, r0
 800c128:	d4e0      	bmi.n	800c0ec <_fflush_r+0xc>
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	059b      	lsls	r3, r3, #22
 800c12e:	d4dd      	bmi.n	800c0ec <_fflush_r+0xc>
 800c130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c132:	f7fe f98f 	bl	800a454 <__retarget_lock_release_recursive>
 800c136:	e7d9      	b.n	800c0ec <_fflush_r+0xc>
 800c138:	4b05      	ldr	r3, [pc, #20]	; (800c150 <_fflush_r+0x70>)
 800c13a:	429c      	cmp	r4, r3
 800c13c:	d101      	bne.n	800c142 <_fflush_r+0x62>
 800c13e:	68ac      	ldr	r4, [r5, #8]
 800c140:	e7df      	b.n	800c102 <_fflush_r+0x22>
 800c142:	4b04      	ldr	r3, [pc, #16]	; (800c154 <_fflush_r+0x74>)
 800c144:	429c      	cmp	r4, r3
 800c146:	bf08      	it	eq
 800c148:	68ec      	ldreq	r4, [r5, #12]
 800c14a:	e7da      	b.n	800c102 <_fflush_r+0x22>
 800c14c:	08021e00 	.word	0x08021e00
 800c150:	08021e20 	.word	0x08021e20
 800c154:	08021de0 	.word	0x08021de0

0800c158 <_localeconv_r>:
 800c158:	4800      	ldr	r0, [pc, #0]	; (800c15c <_localeconv_r+0x4>)
 800c15a:	4770      	bx	lr
 800c15c:	20000168 	.word	0x20000168

0800c160 <_lseek_r>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	4d07      	ldr	r5, [pc, #28]	; (800c180 <_lseek_r+0x20>)
 800c164:	4604      	mov	r4, r0
 800c166:	4608      	mov	r0, r1
 800c168:	4611      	mov	r1, r2
 800c16a:	2200      	movs	r2, #0
 800c16c:	602a      	str	r2, [r5, #0]
 800c16e:	461a      	mov	r2, r3
 800c170:	f7f6 f9d2 	bl	8002518 <_lseek>
 800c174:	1c43      	adds	r3, r0, #1
 800c176:	d102      	bne.n	800c17e <_lseek_r+0x1e>
 800c178:	682b      	ldr	r3, [r5, #0]
 800c17a:	b103      	cbz	r3, 800c17e <_lseek_r+0x1e>
 800c17c:	6023      	str	r3, [r4, #0]
 800c17e:	bd38      	pop	{r3, r4, r5, pc}
 800c180:	20010bf0 	.word	0x20010bf0

0800c184 <__swhatbuf_r>:
 800c184:	b570      	push	{r4, r5, r6, lr}
 800c186:	460e      	mov	r6, r1
 800c188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c18c:	2900      	cmp	r1, #0
 800c18e:	b096      	sub	sp, #88	; 0x58
 800c190:	4614      	mov	r4, r2
 800c192:	461d      	mov	r5, r3
 800c194:	da08      	bge.n	800c1a8 <__swhatbuf_r+0x24>
 800c196:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	602a      	str	r2, [r5, #0]
 800c19e:	061a      	lsls	r2, r3, #24
 800c1a0:	d410      	bmi.n	800c1c4 <__swhatbuf_r+0x40>
 800c1a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1a6:	e00e      	b.n	800c1c6 <__swhatbuf_r+0x42>
 800c1a8:	466a      	mov	r2, sp
 800c1aa:	f000 fde7 	bl	800cd7c <_fstat_r>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	dbf1      	blt.n	800c196 <__swhatbuf_r+0x12>
 800c1b2:	9a01      	ldr	r2, [sp, #4]
 800c1b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c1b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c1bc:	425a      	negs	r2, r3
 800c1be:	415a      	adcs	r2, r3
 800c1c0:	602a      	str	r2, [r5, #0]
 800c1c2:	e7ee      	b.n	800c1a2 <__swhatbuf_r+0x1e>
 800c1c4:	2340      	movs	r3, #64	; 0x40
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	b016      	add	sp, #88	; 0x58
 800c1cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c1d0 <__smakebuf_r>:
 800c1d0:	898b      	ldrh	r3, [r1, #12]
 800c1d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1d4:	079d      	lsls	r5, r3, #30
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	460c      	mov	r4, r1
 800c1da:	d507      	bpl.n	800c1ec <__smakebuf_r+0x1c>
 800c1dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	6123      	str	r3, [r4, #16]
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	6163      	str	r3, [r4, #20]
 800c1e8:	b002      	add	sp, #8
 800c1ea:	bd70      	pop	{r4, r5, r6, pc}
 800c1ec:	ab01      	add	r3, sp, #4
 800c1ee:	466a      	mov	r2, sp
 800c1f0:	f7ff ffc8 	bl	800c184 <__swhatbuf_r>
 800c1f4:	9900      	ldr	r1, [sp, #0]
 800c1f6:	4605      	mov	r5, r0
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	f7fe f963 	bl	800a4c4 <_malloc_r>
 800c1fe:	b948      	cbnz	r0, 800c214 <__smakebuf_r+0x44>
 800c200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c204:	059a      	lsls	r2, r3, #22
 800c206:	d4ef      	bmi.n	800c1e8 <__smakebuf_r+0x18>
 800c208:	f023 0303 	bic.w	r3, r3, #3
 800c20c:	f043 0302 	orr.w	r3, r3, #2
 800c210:	81a3      	strh	r3, [r4, #12]
 800c212:	e7e3      	b.n	800c1dc <__smakebuf_r+0xc>
 800c214:	4b0d      	ldr	r3, [pc, #52]	; (800c24c <__smakebuf_r+0x7c>)
 800c216:	62b3      	str	r3, [r6, #40]	; 0x28
 800c218:	89a3      	ldrh	r3, [r4, #12]
 800c21a:	6020      	str	r0, [r4, #0]
 800c21c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c220:	81a3      	strh	r3, [r4, #12]
 800c222:	9b00      	ldr	r3, [sp, #0]
 800c224:	6163      	str	r3, [r4, #20]
 800c226:	9b01      	ldr	r3, [sp, #4]
 800c228:	6120      	str	r0, [r4, #16]
 800c22a:	b15b      	cbz	r3, 800c244 <__smakebuf_r+0x74>
 800c22c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c230:	4630      	mov	r0, r6
 800c232:	f000 fdb5 	bl	800cda0 <_isatty_r>
 800c236:	b128      	cbz	r0, 800c244 <__smakebuf_r+0x74>
 800c238:	89a3      	ldrh	r3, [r4, #12]
 800c23a:	f023 0303 	bic.w	r3, r3, #3
 800c23e:	f043 0301 	orr.w	r3, r3, #1
 800c242:	81a3      	strh	r3, [r4, #12]
 800c244:	89a0      	ldrh	r0, [r4, #12]
 800c246:	4305      	orrs	r5, r0
 800c248:	81a5      	strh	r5, [r4, #12]
 800c24a:	e7cd      	b.n	800c1e8 <__smakebuf_r+0x18>
 800c24c:	0800a265 	.word	0x0800a265

0800c250 <malloc>:
 800c250:	4b02      	ldr	r3, [pc, #8]	; (800c25c <malloc+0xc>)
 800c252:	4601      	mov	r1, r0
 800c254:	6818      	ldr	r0, [r3, #0]
 800c256:	f7fe b935 	b.w	800a4c4 <_malloc_r>
 800c25a:	bf00      	nop
 800c25c:	20000014 	.word	0x20000014

0800c260 <__malloc_lock>:
 800c260:	4801      	ldr	r0, [pc, #4]	; (800c268 <__malloc_lock+0x8>)
 800c262:	f7fe b8f6 	b.w	800a452 <__retarget_lock_acquire_recursive>
 800c266:	bf00      	nop
 800c268:	20010be4 	.word	0x20010be4

0800c26c <__malloc_unlock>:
 800c26c:	4801      	ldr	r0, [pc, #4]	; (800c274 <__malloc_unlock+0x8>)
 800c26e:	f7fe b8f1 	b.w	800a454 <__retarget_lock_release_recursive>
 800c272:	bf00      	nop
 800c274:	20010be4 	.word	0x20010be4

0800c278 <_Balloc>:
 800c278:	b570      	push	{r4, r5, r6, lr}
 800c27a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c27c:	4604      	mov	r4, r0
 800c27e:	460d      	mov	r5, r1
 800c280:	b976      	cbnz	r6, 800c2a0 <_Balloc+0x28>
 800c282:	2010      	movs	r0, #16
 800c284:	f7ff ffe4 	bl	800c250 <malloc>
 800c288:	4602      	mov	r2, r0
 800c28a:	6260      	str	r0, [r4, #36]	; 0x24
 800c28c:	b920      	cbnz	r0, 800c298 <_Balloc+0x20>
 800c28e:	4b18      	ldr	r3, [pc, #96]	; (800c2f0 <_Balloc+0x78>)
 800c290:	4818      	ldr	r0, [pc, #96]	; (800c2f4 <_Balloc+0x7c>)
 800c292:	2166      	movs	r1, #102	; 0x66
 800c294:	f000 fd42 	bl	800cd1c <__assert_func>
 800c298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c29c:	6006      	str	r6, [r0, #0]
 800c29e:	60c6      	str	r6, [r0, #12]
 800c2a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c2a2:	68f3      	ldr	r3, [r6, #12]
 800c2a4:	b183      	cbz	r3, 800c2c8 <_Balloc+0x50>
 800c2a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2ae:	b9b8      	cbnz	r0, 800c2e0 <_Balloc+0x68>
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	fa01 f605 	lsl.w	r6, r1, r5
 800c2b6:	1d72      	adds	r2, r6, #5
 800c2b8:	0092      	lsls	r2, r2, #2
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	f000 fb60 	bl	800c980 <_calloc_r>
 800c2c0:	b160      	cbz	r0, 800c2dc <_Balloc+0x64>
 800c2c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2c6:	e00e      	b.n	800c2e6 <_Balloc+0x6e>
 800c2c8:	2221      	movs	r2, #33	; 0x21
 800c2ca:	2104      	movs	r1, #4
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f000 fb57 	bl	800c980 <_calloc_r>
 800c2d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2d4:	60f0      	str	r0, [r6, #12]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1e4      	bne.n	800c2a6 <_Balloc+0x2e>
 800c2dc:	2000      	movs	r0, #0
 800c2de:	bd70      	pop	{r4, r5, r6, pc}
 800c2e0:	6802      	ldr	r2, [r0, #0]
 800c2e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2ec:	e7f7      	b.n	800c2de <_Balloc+0x66>
 800c2ee:	bf00      	nop
 800c2f0:	08021e85 	.word	0x08021e85
 800c2f4:	08021f08 	.word	0x08021f08

0800c2f8 <_Bfree>:
 800c2f8:	b570      	push	{r4, r5, r6, lr}
 800c2fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2fc:	4605      	mov	r5, r0
 800c2fe:	460c      	mov	r4, r1
 800c300:	b976      	cbnz	r6, 800c320 <_Bfree+0x28>
 800c302:	2010      	movs	r0, #16
 800c304:	f7ff ffa4 	bl	800c250 <malloc>
 800c308:	4602      	mov	r2, r0
 800c30a:	6268      	str	r0, [r5, #36]	; 0x24
 800c30c:	b920      	cbnz	r0, 800c318 <_Bfree+0x20>
 800c30e:	4b09      	ldr	r3, [pc, #36]	; (800c334 <_Bfree+0x3c>)
 800c310:	4809      	ldr	r0, [pc, #36]	; (800c338 <_Bfree+0x40>)
 800c312:	218a      	movs	r1, #138	; 0x8a
 800c314:	f000 fd02 	bl	800cd1c <__assert_func>
 800c318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c31c:	6006      	str	r6, [r0, #0]
 800c31e:	60c6      	str	r6, [r0, #12]
 800c320:	b13c      	cbz	r4, 800c332 <_Bfree+0x3a>
 800c322:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c324:	6862      	ldr	r2, [r4, #4]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c32c:	6021      	str	r1, [r4, #0]
 800c32e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c332:	bd70      	pop	{r4, r5, r6, pc}
 800c334:	08021e85 	.word	0x08021e85
 800c338:	08021f08 	.word	0x08021f08

0800c33c <__multadd>:
 800c33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c340:	690d      	ldr	r5, [r1, #16]
 800c342:	4607      	mov	r7, r0
 800c344:	460c      	mov	r4, r1
 800c346:	461e      	mov	r6, r3
 800c348:	f101 0c14 	add.w	ip, r1, #20
 800c34c:	2000      	movs	r0, #0
 800c34e:	f8dc 3000 	ldr.w	r3, [ip]
 800c352:	b299      	uxth	r1, r3
 800c354:	fb02 6101 	mla	r1, r2, r1, r6
 800c358:	0c1e      	lsrs	r6, r3, #16
 800c35a:	0c0b      	lsrs	r3, r1, #16
 800c35c:	fb02 3306 	mla	r3, r2, r6, r3
 800c360:	b289      	uxth	r1, r1
 800c362:	3001      	adds	r0, #1
 800c364:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c368:	4285      	cmp	r5, r0
 800c36a:	f84c 1b04 	str.w	r1, [ip], #4
 800c36e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c372:	dcec      	bgt.n	800c34e <__multadd+0x12>
 800c374:	b30e      	cbz	r6, 800c3ba <__multadd+0x7e>
 800c376:	68a3      	ldr	r3, [r4, #8]
 800c378:	42ab      	cmp	r3, r5
 800c37a:	dc19      	bgt.n	800c3b0 <__multadd+0x74>
 800c37c:	6861      	ldr	r1, [r4, #4]
 800c37e:	4638      	mov	r0, r7
 800c380:	3101      	adds	r1, #1
 800c382:	f7ff ff79 	bl	800c278 <_Balloc>
 800c386:	4680      	mov	r8, r0
 800c388:	b928      	cbnz	r0, 800c396 <__multadd+0x5a>
 800c38a:	4602      	mov	r2, r0
 800c38c:	4b0c      	ldr	r3, [pc, #48]	; (800c3c0 <__multadd+0x84>)
 800c38e:	480d      	ldr	r0, [pc, #52]	; (800c3c4 <__multadd+0x88>)
 800c390:	21b5      	movs	r1, #181	; 0xb5
 800c392:	f000 fcc3 	bl	800cd1c <__assert_func>
 800c396:	6922      	ldr	r2, [r4, #16]
 800c398:	3202      	adds	r2, #2
 800c39a:	f104 010c 	add.w	r1, r4, #12
 800c39e:	0092      	lsls	r2, r2, #2
 800c3a0:	300c      	adds	r0, #12
 800c3a2:	f7fe f858 	bl	800a456 <memcpy>
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	4638      	mov	r0, r7
 800c3aa:	f7ff ffa5 	bl	800c2f8 <_Bfree>
 800c3ae:	4644      	mov	r4, r8
 800c3b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3b4:	3501      	adds	r5, #1
 800c3b6:	615e      	str	r6, [r3, #20]
 800c3b8:	6125      	str	r5, [r4, #16]
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c0:	08021ef7 	.word	0x08021ef7
 800c3c4:	08021f08 	.word	0x08021f08

0800c3c8 <__hi0bits>:
 800c3c8:	0c03      	lsrs	r3, r0, #16
 800c3ca:	041b      	lsls	r3, r3, #16
 800c3cc:	b9d3      	cbnz	r3, 800c404 <__hi0bits+0x3c>
 800c3ce:	0400      	lsls	r0, r0, #16
 800c3d0:	2310      	movs	r3, #16
 800c3d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c3d6:	bf04      	itt	eq
 800c3d8:	0200      	lsleq	r0, r0, #8
 800c3da:	3308      	addeq	r3, #8
 800c3dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c3e0:	bf04      	itt	eq
 800c3e2:	0100      	lsleq	r0, r0, #4
 800c3e4:	3304      	addeq	r3, #4
 800c3e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c3ea:	bf04      	itt	eq
 800c3ec:	0080      	lsleq	r0, r0, #2
 800c3ee:	3302      	addeq	r3, #2
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	db05      	blt.n	800c400 <__hi0bits+0x38>
 800c3f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c3f8:	f103 0301 	add.w	r3, r3, #1
 800c3fc:	bf08      	it	eq
 800c3fe:	2320      	moveq	r3, #32
 800c400:	4618      	mov	r0, r3
 800c402:	4770      	bx	lr
 800c404:	2300      	movs	r3, #0
 800c406:	e7e4      	b.n	800c3d2 <__hi0bits+0xa>

0800c408 <__lo0bits>:
 800c408:	6803      	ldr	r3, [r0, #0]
 800c40a:	f013 0207 	ands.w	r2, r3, #7
 800c40e:	4601      	mov	r1, r0
 800c410:	d00b      	beq.n	800c42a <__lo0bits+0x22>
 800c412:	07da      	lsls	r2, r3, #31
 800c414:	d423      	bmi.n	800c45e <__lo0bits+0x56>
 800c416:	0798      	lsls	r0, r3, #30
 800c418:	bf49      	itett	mi
 800c41a:	085b      	lsrmi	r3, r3, #1
 800c41c:	089b      	lsrpl	r3, r3, #2
 800c41e:	2001      	movmi	r0, #1
 800c420:	600b      	strmi	r3, [r1, #0]
 800c422:	bf5c      	itt	pl
 800c424:	600b      	strpl	r3, [r1, #0]
 800c426:	2002      	movpl	r0, #2
 800c428:	4770      	bx	lr
 800c42a:	b298      	uxth	r0, r3
 800c42c:	b9a8      	cbnz	r0, 800c45a <__lo0bits+0x52>
 800c42e:	0c1b      	lsrs	r3, r3, #16
 800c430:	2010      	movs	r0, #16
 800c432:	b2da      	uxtb	r2, r3
 800c434:	b90a      	cbnz	r2, 800c43a <__lo0bits+0x32>
 800c436:	3008      	adds	r0, #8
 800c438:	0a1b      	lsrs	r3, r3, #8
 800c43a:	071a      	lsls	r2, r3, #28
 800c43c:	bf04      	itt	eq
 800c43e:	091b      	lsreq	r3, r3, #4
 800c440:	3004      	addeq	r0, #4
 800c442:	079a      	lsls	r2, r3, #30
 800c444:	bf04      	itt	eq
 800c446:	089b      	lsreq	r3, r3, #2
 800c448:	3002      	addeq	r0, #2
 800c44a:	07da      	lsls	r2, r3, #31
 800c44c:	d403      	bmi.n	800c456 <__lo0bits+0x4e>
 800c44e:	085b      	lsrs	r3, r3, #1
 800c450:	f100 0001 	add.w	r0, r0, #1
 800c454:	d005      	beq.n	800c462 <__lo0bits+0x5a>
 800c456:	600b      	str	r3, [r1, #0]
 800c458:	4770      	bx	lr
 800c45a:	4610      	mov	r0, r2
 800c45c:	e7e9      	b.n	800c432 <__lo0bits+0x2a>
 800c45e:	2000      	movs	r0, #0
 800c460:	4770      	bx	lr
 800c462:	2020      	movs	r0, #32
 800c464:	4770      	bx	lr
	...

0800c468 <__i2b>:
 800c468:	b510      	push	{r4, lr}
 800c46a:	460c      	mov	r4, r1
 800c46c:	2101      	movs	r1, #1
 800c46e:	f7ff ff03 	bl	800c278 <_Balloc>
 800c472:	4602      	mov	r2, r0
 800c474:	b928      	cbnz	r0, 800c482 <__i2b+0x1a>
 800c476:	4b05      	ldr	r3, [pc, #20]	; (800c48c <__i2b+0x24>)
 800c478:	4805      	ldr	r0, [pc, #20]	; (800c490 <__i2b+0x28>)
 800c47a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c47e:	f000 fc4d 	bl	800cd1c <__assert_func>
 800c482:	2301      	movs	r3, #1
 800c484:	6144      	str	r4, [r0, #20]
 800c486:	6103      	str	r3, [r0, #16]
 800c488:	bd10      	pop	{r4, pc}
 800c48a:	bf00      	nop
 800c48c:	08021ef7 	.word	0x08021ef7
 800c490:	08021f08 	.word	0x08021f08

0800c494 <__multiply>:
 800c494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c498:	4691      	mov	r9, r2
 800c49a:	690a      	ldr	r2, [r1, #16]
 800c49c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	bfb8      	it	lt
 800c4a4:	460b      	movlt	r3, r1
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	bfbc      	itt	lt
 800c4aa:	464c      	movlt	r4, r9
 800c4ac:	4699      	movlt	r9, r3
 800c4ae:	6927      	ldr	r7, [r4, #16]
 800c4b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4b4:	68a3      	ldr	r3, [r4, #8]
 800c4b6:	6861      	ldr	r1, [r4, #4]
 800c4b8:	eb07 060a 	add.w	r6, r7, sl
 800c4bc:	42b3      	cmp	r3, r6
 800c4be:	b085      	sub	sp, #20
 800c4c0:	bfb8      	it	lt
 800c4c2:	3101      	addlt	r1, #1
 800c4c4:	f7ff fed8 	bl	800c278 <_Balloc>
 800c4c8:	b930      	cbnz	r0, 800c4d8 <__multiply+0x44>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	4b44      	ldr	r3, [pc, #272]	; (800c5e0 <__multiply+0x14c>)
 800c4ce:	4845      	ldr	r0, [pc, #276]	; (800c5e4 <__multiply+0x150>)
 800c4d0:	f240 115d 	movw	r1, #349	; 0x15d
 800c4d4:	f000 fc22 	bl	800cd1c <__assert_func>
 800c4d8:	f100 0514 	add.w	r5, r0, #20
 800c4dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4e0:	462b      	mov	r3, r5
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	4543      	cmp	r3, r8
 800c4e6:	d321      	bcc.n	800c52c <__multiply+0x98>
 800c4e8:	f104 0314 	add.w	r3, r4, #20
 800c4ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c4f0:	f109 0314 	add.w	r3, r9, #20
 800c4f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c4f8:	9202      	str	r2, [sp, #8]
 800c4fa:	1b3a      	subs	r2, r7, r4
 800c4fc:	3a15      	subs	r2, #21
 800c4fe:	f022 0203 	bic.w	r2, r2, #3
 800c502:	3204      	adds	r2, #4
 800c504:	f104 0115 	add.w	r1, r4, #21
 800c508:	428f      	cmp	r7, r1
 800c50a:	bf38      	it	cc
 800c50c:	2204      	movcc	r2, #4
 800c50e:	9201      	str	r2, [sp, #4]
 800c510:	9a02      	ldr	r2, [sp, #8]
 800c512:	9303      	str	r3, [sp, #12]
 800c514:	429a      	cmp	r2, r3
 800c516:	d80c      	bhi.n	800c532 <__multiply+0x9e>
 800c518:	2e00      	cmp	r6, #0
 800c51a:	dd03      	ble.n	800c524 <__multiply+0x90>
 800c51c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c520:	2b00      	cmp	r3, #0
 800c522:	d05a      	beq.n	800c5da <__multiply+0x146>
 800c524:	6106      	str	r6, [r0, #16]
 800c526:	b005      	add	sp, #20
 800c528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c52c:	f843 2b04 	str.w	r2, [r3], #4
 800c530:	e7d8      	b.n	800c4e4 <__multiply+0x50>
 800c532:	f8b3 a000 	ldrh.w	sl, [r3]
 800c536:	f1ba 0f00 	cmp.w	sl, #0
 800c53a:	d024      	beq.n	800c586 <__multiply+0xf2>
 800c53c:	f104 0e14 	add.w	lr, r4, #20
 800c540:	46a9      	mov	r9, r5
 800c542:	f04f 0c00 	mov.w	ip, #0
 800c546:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c54a:	f8d9 1000 	ldr.w	r1, [r9]
 800c54e:	fa1f fb82 	uxth.w	fp, r2
 800c552:	b289      	uxth	r1, r1
 800c554:	fb0a 110b 	mla	r1, sl, fp, r1
 800c558:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c55c:	f8d9 2000 	ldr.w	r2, [r9]
 800c560:	4461      	add	r1, ip
 800c562:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c566:	fb0a c20b 	mla	r2, sl, fp, ip
 800c56a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c56e:	b289      	uxth	r1, r1
 800c570:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c574:	4577      	cmp	r7, lr
 800c576:	f849 1b04 	str.w	r1, [r9], #4
 800c57a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c57e:	d8e2      	bhi.n	800c546 <__multiply+0xb2>
 800c580:	9a01      	ldr	r2, [sp, #4]
 800c582:	f845 c002 	str.w	ip, [r5, r2]
 800c586:	9a03      	ldr	r2, [sp, #12]
 800c588:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c58c:	3304      	adds	r3, #4
 800c58e:	f1b9 0f00 	cmp.w	r9, #0
 800c592:	d020      	beq.n	800c5d6 <__multiply+0x142>
 800c594:	6829      	ldr	r1, [r5, #0]
 800c596:	f104 0c14 	add.w	ip, r4, #20
 800c59a:	46ae      	mov	lr, r5
 800c59c:	f04f 0a00 	mov.w	sl, #0
 800c5a0:	f8bc b000 	ldrh.w	fp, [ip]
 800c5a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c5a8:	fb09 220b 	mla	r2, r9, fp, r2
 800c5ac:	4492      	add	sl, r2
 800c5ae:	b289      	uxth	r1, r1
 800c5b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c5b4:	f84e 1b04 	str.w	r1, [lr], #4
 800c5b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c5bc:	f8be 1000 	ldrh.w	r1, [lr]
 800c5c0:	0c12      	lsrs	r2, r2, #16
 800c5c2:	fb09 1102 	mla	r1, r9, r2, r1
 800c5c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c5ca:	4567      	cmp	r7, ip
 800c5cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5d0:	d8e6      	bhi.n	800c5a0 <__multiply+0x10c>
 800c5d2:	9a01      	ldr	r2, [sp, #4]
 800c5d4:	50a9      	str	r1, [r5, r2]
 800c5d6:	3504      	adds	r5, #4
 800c5d8:	e79a      	b.n	800c510 <__multiply+0x7c>
 800c5da:	3e01      	subs	r6, #1
 800c5dc:	e79c      	b.n	800c518 <__multiply+0x84>
 800c5de:	bf00      	nop
 800c5e0:	08021ef7 	.word	0x08021ef7
 800c5e4:	08021f08 	.word	0x08021f08

0800c5e8 <__pow5mult>:
 800c5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5ec:	4615      	mov	r5, r2
 800c5ee:	f012 0203 	ands.w	r2, r2, #3
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	460f      	mov	r7, r1
 800c5f6:	d007      	beq.n	800c608 <__pow5mult+0x20>
 800c5f8:	4c25      	ldr	r4, [pc, #148]	; (800c690 <__pow5mult+0xa8>)
 800c5fa:	3a01      	subs	r2, #1
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c602:	f7ff fe9b 	bl	800c33c <__multadd>
 800c606:	4607      	mov	r7, r0
 800c608:	10ad      	asrs	r5, r5, #2
 800c60a:	d03d      	beq.n	800c688 <__pow5mult+0xa0>
 800c60c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c60e:	b97c      	cbnz	r4, 800c630 <__pow5mult+0x48>
 800c610:	2010      	movs	r0, #16
 800c612:	f7ff fe1d 	bl	800c250 <malloc>
 800c616:	4602      	mov	r2, r0
 800c618:	6270      	str	r0, [r6, #36]	; 0x24
 800c61a:	b928      	cbnz	r0, 800c628 <__pow5mult+0x40>
 800c61c:	4b1d      	ldr	r3, [pc, #116]	; (800c694 <__pow5mult+0xac>)
 800c61e:	481e      	ldr	r0, [pc, #120]	; (800c698 <__pow5mult+0xb0>)
 800c620:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c624:	f000 fb7a 	bl	800cd1c <__assert_func>
 800c628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c62c:	6004      	str	r4, [r0, #0]
 800c62e:	60c4      	str	r4, [r0, #12]
 800c630:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c638:	b94c      	cbnz	r4, 800c64e <__pow5mult+0x66>
 800c63a:	f240 2171 	movw	r1, #625	; 0x271
 800c63e:	4630      	mov	r0, r6
 800c640:	f7ff ff12 	bl	800c468 <__i2b>
 800c644:	2300      	movs	r3, #0
 800c646:	f8c8 0008 	str.w	r0, [r8, #8]
 800c64a:	4604      	mov	r4, r0
 800c64c:	6003      	str	r3, [r0, #0]
 800c64e:	f04f 0900 	mov.w	r9, #0
 800c652:	07eb      	lsls	r3, r5, #31
 800c654:	d50a      	bpl.n	800c66c <__pow5mult+0x84>
 800c656:	4639      	mov	r1, r7
 800c658:	4622      	mov	r2, r4
 800c65a:	4630      	mov	r0, r6
 800c65c:	f7ff ff1a 	bl	800c494 <__multiply>
 800c660:	4639      	mov	r1, r7
 800c662:	4680      	mov	r8, r0
 800c664:	4630      	mov	r0, r6
 800c666:	f7ff fe47 	bl	800c2f8 <_Bfree>
 800c66a:	4647      	mov	r7, r8
 800c66c:	106d      	asrs	r5, r5, #1
 800c66e:	d00b      	beq.n	800c688 <__pow5mult+0xa0>
 800c670:	6820      	ldr	r0, [r4, #0]
 800c672:	b938      	cbnz	r0, 800c684 <__pow5mult+0x9c>
 800c674:	4622      	mov	r2, r4
 800c676:	4621      	mov	r1, r4
 800c678:	4630      	mov	r0, r6
 800c67a:	f7ff ff0b 	bl	800c494 <__multiply>
 800c67e:	6020      	str	r0, [r4, #0]
 800c680:	f8c0 9000 	str.w	r9, [r0]
 800c684:	4604      	mov	r4, r0
 800c686:	e7e4      	b.n	800c652 <__pow5mult+0x6a>
 800c688:	4638      	mov	r0, r7
 800c68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c68e:	bf00      	nop
 800c690:	08022058 	.word	0x08022058
 800c694:	08021e85 	.word	0x08021e85
 800c698:	08021f08 	.word	0x08021f08

0800c69c <__lshift>:
 800c69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6a0:	460c      	mov	r4, r1
 800c6a2:	6849      	ldr	r1, [r1, #4]
 800c6a4:	6923      	ldr	r3, [r4, #16]
 800c6a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6aa:	68a3      	ldr	r3, [r4, #8]
 800c6ac:	4607      	mov	r7, r0
 800c6ae:	4691      	mov	r9, r2
 800c6b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6b4:	f108 0601 	add.w	r6, r8, #1
 800c6b8:	42b3      	cmp	r3, r6
 800c6ba:	db0b      	blt.n	800c6d4 <__lshift+0x38>
 800c6bc:	4638      	mov	r0, r7
 800c6be:	f7ff fddb 	bl	800c278 <_Balloc>
 800c6c2:	4605      	mov	r5, r0
 800c6c4:	b948      	cbnz	r0, 800c6da <__lshift+0x3e>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	4b2a      	ldr	r3, [pc, #168]	; (800c774 <__lshift+0xd8>)
 800c6ca:	482b      	ldr	r0, [pc, #172]	; (800c778 <__lshift+0xdc>)
 800c6cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c6d0:	f000 fb24 	bl	800cd1c <__assert_func>
 800c6d4:	3101      	adds	r1, #1
 800c6d6:	005b      	lsls	r3, r3, #1
 800c6d8:	e7ee      	b.n	800c6b8 <__lshift+0x1c>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	f100 0114 	add.w	r1, r0, #20
 800c6e0:	f100 0210 	add.w	r2, r0, #16
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	4553      	cmp	r3, sl
 800c6e8:	db37      	blt.n	800c75a <__lshift+0xbe>
 800c6ea:	6920      	ldr	r0, [r4, #16]
 800c6ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6f0:	f104 0314 	add.w	r3, r4, #20
 800c6f4:	f019 091f 	ands.w	r9, r9, #31
 800c6f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c700:	d02f      	beq.n	800c762 <__lshift+0xc6>
 800c702:	f1c9 0e20 	rsb	lr, r9, #32
 800c706:	468a      	mov	sl, r1
 800c708:	f04f 0c00 	mov.w	ip, #0
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	fa02 f209 	lsl.w	r2, r2, r9
 800c712:	ea42 020c 	orr.w	r2, r2, ip
 800c716:	f84a 2b04 	str.w	r2, [sl], #4
 800c71a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c71e:	4298      	cmp	r0, r3
 800c720:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c724:	d8f2      	bhi.n	800c70c <__lshift+0x70>
 800c726:	1b03      	subs	r3, r0, r4
 800c728:	3b15      	subs	r3, #21
 800c72a:	f023 0303 	bic.w	r3, r3, #3
 800c72e:	3304      	adds	r3, #4
 800c730:	f104 0215 	add.w	r2, r4, #21
 800c734:	4290      	cmp	r0, r2
 800c736:	bf38      	it	cc
 800c738:	2304      	movcc	r3, #4
 800c73a:	f841 c003 	str.w	ip, [r1, r3]
 800c73e:	f1bc 0f00 	cmp.w	ip, #0
 800c742:	d001      	beq.n	800c748 <__lshift+0xac>
 800c744:	f108 0602 	add.w	r6, r8, #2
 800c748:	3e01      	subs	r6, #1
 800c74a:	4638      	mov	r0, r7
 800c74c:	612e      	str	r6, [r5, #16]
 800c74e:	4621      	mov	r1, r4
 800c750:	f7ff fdd2 	bl	800c2f8 <_Bfree>
 800c754:	4628      	mov	r0, r5
 800c756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c75a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c75e:	3301      	adds	r3, #1
 800c760:	e7c1      	b.n	800c6e6 <__lshift+0x4a>
 800c762:	3904      	subs	r1, #4
 800c764:	f853 2b04 	ldr.w	r2, [r3], #4
 800c768:	f841 2f04 	str.w	r2, [r1, #4]!
 800c76c:	4298      	cmp	r0, r3
 800c76e:	d8f9      	bhi.n	800c764 <__lshift+0xc8>
 800c770:	e7ea      	b.n	800c748 <__lshift+0xac>
 800c772:	bf00      	nop
 800c774:	08021ef7 	.word	0x08021ef7
 800c778:	08021f08 	.word	0x08021f08

0800c77c <__mcmp>:
 800c77c:	b530      	push	{r4, r5, lr}
 800c77e:	6902      	ldr	r2, [r0, #16]
 800c780:	690c      	ldr	r4, [r1, #16]
 800c782:	1b12      	subs	r2, r2, r4
 800c784:	d10e      	bne.n	800c7a4 <__mcmp+0x28>
 800c786:	f100 0314 	add.w	r3, r0, #20
 800c78a:	3114      	adds	r1, #20
 800c78c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c790:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c794:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c798:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c79c:	42a5      	cmp	r5, r4
 800c79e:	d003      	beq.n	800c7a8 <__mcmp+0x2c>
 800c7a0:	d305      	bcc.n	800c7ae <__mcmp+0x32>
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	bd30      	pop	{r4, r5, pc}
 800c7a8:	4283      	cmp	r3, r0
 800c7aa:	d3f3      	bcc.n	800c794 <__mcmp+0x18>
 800c7ac:	e7fa      	b.n	800c7a4 <__mcmp+0x28>
 800c7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b2:	e7f7      	b.n	800c7a4 <__mcmp+0x28>

0800c7b4 <__mdiff>:
 800c7b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b8:	460c      	mov	r4, r1
 800c7ba:	4606      	mov	r6, r0
 800c7bc:	4611      	mov	r1, r2
 800c7be:	4620      	mov	r0, r4
 800c7c0:	4690      	mov	r8, r2
 800c7c2:	f7ff ffdb 	bl	800c77c <__mcmp>
 800c7c6:	1e05      	subs	r5, r0, #0
 800c7c8:	d110      	bne.n	800c7ec <__mdiff+0x38>
 800c7ca:	4629      	mov	r1, r5
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	f7ff fd53 	bl	800c278 <_Balloc>
 800c7d2:	b930      	cbnz	r0, 800c7e2 <__mdiff+0x2e>
 800c7d4:	4b3a      	ldr	r3, [pc, #232]	; (800c8c0 <__mdiff+0x10c>)
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	f240 2132 	movw	r1, #562	; 0x232
 800c7dc:	4839      	ldr	r0, [pc, #228]	; (800c8c4 <__mdiff+0x110>)
 800c7de:	f000 fa9d 	bl	800cd1c <__assert_func>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ec:	bfa4      	itt	ge
 800c7ee:	4643      	movge	r3, r8
 800c7f0:	46a0      	movge	r8, r4
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c7f8:	bfa6      	itte	ge
 800c7fa:	461c      	movge	r4, r3
 800c7fc:	2500      	movge	r5, #0
 800c7fe:	2501      	movlt	r5, #1
 800c800:	f7ff fd3a 	bl	800c278 <_Balloc>
 800c804:	b920      	cbnz	r0, 800c810 <__mdiff+0x5c>
 800c806:	4b2e      	ldr	r3, [pc, #184]	; (800c8c0 <__mdiff+0x10c>)
 800c808:	4602      	mov	r2, r0
 800c80a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c80e:	e7e5      	b.n	800c7dc <__mdiff+0x28>
 800c810:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c814:	6926      	ldr	r6, [r4, #16]
 800c816:	60c5      	str	r5, [r0, #12]
 800c818:	f104 0914 	add.w	r9, r4, #20
 800c81c:	f108 0514 	add.w	r5, r8, #20
 800c820:	f100 0e14 	add.w	lr, r0, #20
 800c824:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c828:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c82c:	f108 0210 	add.w	r2, r8, #16
 800c830:	46f2      	mov	sl, lr
 800c832:	2100      	movs	r1, #0
 800c834:	f859 3b04 	ldr.w	r3, [r9], #4
 800c838:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c83c:	fa1f f883 	uxth.w	r8, r3
 800c840:	fa11 f18b 	uxtah	r1, r1, fp
 800c844:	0c1b      	lsrs	r3, r3, #16
 800c846:	eba1 0808 	sub.w	r8, r1, r8
 800c84a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c84e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c852:	fa1f f888 	uxth.w	r8, r8
 800c856:	1419      	asrs	r1, r3, #16
 800c858:	454e      	cmp	r6, r9
 800c85a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c85e:	f84a 3b04 	str.w	r3, [sl], #4
 800c862:	d8e7      	bhi.n	800c834 <__mdiff+0x80>
 800c864:	1b33      	subs	r3, r6, r4
 800c866:	3b15      	subs	r3, #21
 800c868:	f023 0303 	bic.w	r3, r3, #3
 800c86c:	3304      	adds	r3, #4
 800c86e:	3415      	adds	r4, #21
 800c870:	42a6      	cmp	r6, r4
 800c872:	bf38      	it	cc
 800c874:	2304      	movcc	r3, #4
 800c876:	441d      	add	r5, r3
 800c878:	4473      	add	r3, lr
 800c87a:	469e      	mov	lr, r3
 800c87c:	462e      	mov	r6, r5
 800c87e:	4566      	cmp	r6, ip
 800c880:	d30e      	bcc.n	800c8a0 <__mdiff+0xec>
 800c882:	f10c 0203 	add.w	r2, ip, #3
 800c886:	1b52      	subs	r2, r2, r5
 800c888:	f022 0203 	bic.w	r2, r2, #3
 800c88c:	3d03      	subs	r5, #3
 800c88e:	45ac      	cmp	ip, r5
 800c890:	bf38      	it	cc
 800c892:	2200      	movcc	r2, #0
 800c894:	441a      	add	r2, r3
 800c896:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c89a:	b17b      	cbz	r3, 800c8bc <__mdiff+0x108>
 800c89c:	6107      	str	r7, [r0, #16]
 800c89e:	e7a3      	b.n	800c7e8 <__mdiff+0x34>
 800c8a0:	f856 8b04 	ldr.w	r8, [r6], #4
 800c8a4:	fa11 f288 	uxtah	r2, r1, r8
 800c8a8:	1414      	asrs	r4, r2, #16
 800c8aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c8ae:	b292      	uxth	r2, r2
 800c8b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c8b4:	f84e 2b04 	str.w	r2, [lr], #4
 800c8b8:	1421      	asrs	r1, r4, #16
 800c8ba:	e7e0      	b.n	800c87e <__mdiff+0xca>
 800c8bc:	3f01      	subs	r7, #1
 800c8be:	e7ea      	b.n	800c896 <__mdiff+0xe2>
 800c8c0:	08021ef7 	.word	0x08021ef7
 800c8c4:	08021f08 	.word	0x08021f08

0800c8c8 <__d2b>:
 800c8c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8cc:	4689      	mov	r9, r1
 800c8ce:	2101      	movs	r1, #1
 800c8d0:	ec57 6b10 	vmov	r6, r7, d0
 800c8d4:	4690      	mov	r8, r2
 800c8d6:	f7ff fccf 	bl	800c278 <_Balloc>
 800c8da:	4604      	mov	r4, r0
 800c8dc:	b930      	cbnz	r0, 800c8ec <__d2b+0x24>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	4b25      	ldr	r3, [pc, #148]	; (800c978 <__d2b+0xb0>)
 800c8e2:	4826      	ldr	r0, [pc, #152]	; (800c97c <__d2b+0xb4>)
 800c8e4:	f240 310a 	movw	r1, #778	; 0x30a
 800c8e8:	f000 fa18 	bl	800cd1c <__assert_func>
 800c8ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c8f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c8f4:	bb35      	cbnz	r5, 800c944 <__d2b+0x7c>
 800c8f6:	2e00      	cmp	r6, #0
 800c8f8:	9301      	str	r3, [sp, #4]
 800c8fa:	d028      	beq.n	800c94e <__d2b+0x86>
 800c8fc:	4668      	mov	r0, sp
 800c8fe:	9600      	str	r6, [sp, #0]
 800c900:	f7ff fd82 	bl	800c408 <__lo0bits>
 800c904:	9900      	ldr	r1, [sp, #0]
 800c906:	b300      	cbz	r0, 800c94a <__d2b+0x82>
 800c908:	9a01      	ldr	r2, [sp, #4]
 800c90a:	f1c0 0320 	rsb	r3, r0, #32
 800c90e:	fa02 f303 	lsl.w	r3, r2, r3
 800c912:	430b      	orrs	r3, r1
 800c914:	40c2      	lsrs	r2, r0
 800c916:	6163      	str	r3, [r4, #20]
 800c918:	9201      	str	r2, [sp, #4]
 800c91a:	9b01      	ldr	r3, [sp, #4]
 800c91c:	61a3      	str	r3, [r4, #24]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	bf14      	ite	ne
 800c922:	2202      	movne	r2, #2
 800c924:	2201      	moveq	r2, #1
 800c926:	6122      	str	r2, [r4, #16]
 800c928:	b1d5      	cbz	r5, 800c960 <__d2b+0x98>
 800c92a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c92e:	4405      	add	r5, r0
 800c930:	f8c9 5000 	str.w	r5, [r9]
 800c934:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c938:	f8c8 0000 	str.w	r0, [r8]
 800c93c:	4620      	mov	r0, r4
 800c93e:	b003      	add	sp, #12
 800c940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c948:	e7d5      	b.n	800c8f6 <__d2b+0x2e>
 800c94a:	6161      	str	r1, [r4, #20]
 800c94c:	e7e5      	b.n	800c91a <__d2b+0x52>
 800c94e:	a801      	add	r0, sp, #4
 800c950:	f7ff fd5a 	bl	800c408 <__lo0bits>
 800c954:	9b01      	ldr	r3, [sp, #4]
 800c956:	6163      	str	r3, [r4, #20]
 800c958:	2201      	movs	r2, #1
 800c95a:	6122      	str	r2, [r4, #16]
 800c95c:	3020      	adds	r0, #32
 800c95e:	e7e3      	b.n	800c928 <__d2b+0x60>
 800c960:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c964:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c968:	f8c9 0000 	str.w	r0, [r9]
 800c96c:	6918      	ldr	r0, [r3, #16]
 800c96e:	f7ff fd2b 	bl	800c3c8 <__hi0bits>
 800c972:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c976:	e7df      	b.n	800c938 <__d2b+0x70>
 800c978:	08021ef7 	.word	0x08021ef7
 800c97c:	08021f08 	.word	0x08021f08

0800c980 <_calloc_r>:
 800c980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c982:	fba1 2402 	umull	r2, r4, r1, r2
 800c986:	b94c      	cbnz	r4, 800c99c <_calloc_r+0x1c>
 800c988:	4611      	mov	r1, r2
 800c98a:	9201      	str	r2, [sp, #4]
 800c98c:	f7fd fd9a 	bl	800a4c4 <_malloc_r>
 800c990:	9a01      	ldr	r2, [sp, #4]
 800c992:	4605      	mov	r5, r0
 800c994:	b930      	cbnz	r0, 800c9a4 <_calloc_r+0x24>
 800c996:	4628      	mov	r0, r5
 800c998:	b003      	add	sp, #12
 800c99a:	bd30      	pop	{r4, r5, pc}
 800c99c:	220c      	movs	r2, #12
 800c99e:	6002      	str	r2, [r0, #0]
 800c9a0:	2500      	movs	r5, #0
 800c9a2:	e7f8      	b.n	800c996 <_calloc_r+0x16>
 800c9a4:	4621      	mov	r1, r4
 800c9a6:	f7fd fd64 	bl	800a472 <memset>
 800c9aa:	e7f4      	b.n	800c996 <_calloc_r+0x16>

0800c9ac <_free_r>:
 800c9ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9ae:	2900      	cmp	r1, #0
 800c9b0:	d044      	beq.n	800ca3c <_free_r+0x90>
 800c9b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9b6:	9001      	str	r0, [sp, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f1a1 0404 	sub.w	r4, r1, #4
 800c9be:	bfb8      	it	lt
 800c9c0:	18e4      	addlt	r4, r4, r3
 800c9c2:	f7ff fc4d 	bl	800c260 <__malloc_lock>
 800c9c6:	4a1e      	ldr	r2, [pc, #120]	; (800ca40 <_free_r+0x94>)
 800c9c8:	9801      	ldr	r0, [sp, #4]
 800c9ca:	6813      	ldr	r3, [r2, #0]
 800c9cc:	b933      	cbnz	r3, 800c9dc <_free_r+0x30>
 800c9ce:	6063      	str	r3, [r4, #4]
 800c9d0:	6014      	str	r4, [r2, #0]
 800c9d2:	b003      	add	sp, #12
 800c9d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9d8:	f7ff bc48 	b.w	800c26c <__malloc_unlock>
 800c9dc:	42a3      	cmp	r3, r4
 800c9de:	d908      	bls.n	800c9f2 <_free_r+0x46>
 800c9e0:	6825      	ldr	r5, [r4, #0]
 800c9e2:	1961      	adds	r1, r4, r5
 800c9e4:	428b      	cmp	r3, r1
 800c9e6:	bf01      	itttt	eq
 800c9e8:	6819      	ldreq	r1, [r3, #0]
 800c9ea:	685b      	ldreq	r3, [r3, #4]
 800c9ec:	1949      	addeq	r1, r1, r5
 800c9ee:	6021      	streq	r1, [r4, #0]
 800c9f0:	e7ed      	b.n	800c9ce <_free_r+0x22>
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	b10b      	cbz	r3, 800c9fc <_free_r+0x50>
 800c9f8:	42a3      	cmp	r3, r4
 800c9fa:	d9fa      	bls.n	800c9f2 <_free_r+0x46>
 800c9fc:	6811      	ldr	r1, [r2, #0]
 800c9fe:	1855      	adds	r5, r2, r1
 800ca00:	42a5      	cmp	r5, r4
 800ca02:	d10b      	bne.n	800ca1c <_free_r+0x70>
 800ca04:	6824      	ldr	r4, [r4, #0]
 800ca06:	4421      	add	r1, r4
 800ca08:	1854      	adds	r4, r2, r1
 800ca0a:	42a3      	cmp	r3, r4
 800ca0c:	6011      	str	r1, [r2, #0]
 800ca0e:	d1e0      	bne.n	800c9d2 <_free_r+0x26>
 800ca10:	681c      	ldr	r4, [r3, #0]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	6053      	str	r3, [r2, #4]
 800ca16:	4421      	add	r1, r4
 800ca18:	6011      	str	r1, [r2, #0]
 800ca1a:	e7da      	b.n	800c9d2 <_free_r+0x26>
 800ca1c:	d902      	bls.n	800ca24 <_free_r+0x78>
 800ca1e:	230c      	movs	r3, #12
 800ca20:	6003      	str	r3, [r0, #0]
 800ca22:	e7d6      	b.n	800c9d2 <_free_r+0x26>
 800ca24:	6825      	ldr	r5, [r4, #0]
 800ca26:	1961      	adds	r1, r4, r5
 800ca28:	428b      	cmp	r3, r1
 800ca2a:	bf04      	itt	eq
 800ca2c:	6819      	ldreq	r1, [r3, #0]
 800ca2e:	685b      	ldreq	r3, [r3, #4]
 800ca30:	6063      	str	r3, [r4, #4]
 800ca32:	bf04      	itt	eq
 800ca34:	1949      	addeq	r1, r1, r5
 800ca36:	6021      	streq	r1, [r4, #0]
 800ca38:	6054      	str	r4, [r2, #4]
 800ca3a:	e7ca      	b.n	800c9d2 <_free_r+0x26>
 800ca3c:	b003      	add	sp, #12
 800ca3e:	bd30      	pop	{r4, r5, pc}
 800ca40:	20010be8 	.word	0x20010be8

0800ca44 <__sfputc_r>:
 800ca44:	6893      	ldr	r3, [r2, #8]
 800ca46:	3b01      	subs	r3, #1
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	b410      	push	{r4}
 800ca4c:	6093      	str	r3, [r2, #8]
 800ca4e:	da08      	bge.n	800ca62 <__sfputc_r+0x1e>
 800ca50:	6994      	ldr	r4, [r2, #24]
 800ca52:	42a3      	cmp	r3, r4
 800ca54:	db01      	blt.n	800ca5a <__sfputc_r+0x16>
 800ca56:	290a      	cmp	r1, #10
 800ca58:	d103      	bne.n	800ca62 <__sfputc_r+0x1e>
 800ca5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca5e:	f7fe bb5b 	b.w	800b118 <__swbuf_r>
 800ca62:	6813      	ldr	r3, [r2, #0]
 800ca64:	1c58      	adds	r0, r3, #1
 800ca66:	6010      	str	r0, [r2, #0]
 800ca68:	7019      	strb	r1, [r3, #0]
 800ca6a:	4608      	mov	r0, r1
 800ca6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca70:	4770      	bx	lr

0800ca72 <__sfputs_r>:
 800ca72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca74:	4606      	mov	r6, r0
 800ca76:	460f      	mov	r7, r1
 800ca78:	4614      	mov	r4, r2
 800ca7a:	18d5      	adds	r5, r2, r3
 800ca7c:	42ac      	cmp	r4, r5
 800ca7e:	d101      	bne.n	800ca84 <__sfputs_r+0x12>
 800ca80:	2000      	movs	r0, #0
 800ca82:	e007      	b.n	800ca94 <__sfputs_r+0x22>
 800ca84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca88:	463a      	mov	r2, r7
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f7ff ffda 	bl	800ca44 <__sfputc_r>
 800ca90:	1c43      	adds	r3, r0, #1
 800ca92:	d1f3      	bne.n	800ca7c <__sfputs_r+0xa>
 800ca94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca98 <_vfiprintf_r>:
 800ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	460d      	mov	r5, r1
 800ca9e:	b09d      	sub	sp, #116	; 0x74
 800caa0:	4614      	mov	r4, r2
 800caa2:	4698      	mov	r8, r3
 800caa4:	4606      	mov	r6, r0
 800caa6:	b118      	cbz	r0, 800cab0 <_vfiprintf_r+0x18>
 800caa8:	6983      	ldr	r3, [r0, #24]
 800caaa:	b90b      	cbnz	r3, 800cab0 <_vfiprintf_r+0x18>
 800caac:	f7fd fc0e 	bl	800a2cc <__sinit>
 800cab0:	4b89      	ldr	r3, [pc, #548]	; (800ccd8 <_vfiprintf_r+0x240>)
 800cab2:	429d      	cmp	r5, r3
 800cab4:	d11b      	bne.n	800caee <_vfiprintf_r+0x56>
 800cab6:	6875      	ldr	r5, [r6, #4]
 800cab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caba:	07d9      	lsls	r1, r3, #31
 800cabc:	d405      	bmi.n	800caca <_vfiprintf_r+0x32>
 800cabe:	89ab      	ldrh	r3, [r5, #12]
 800cac0:	059a      	lsls	r2, r3, #22
 800cac2:	d402      	bmi.n	800caca <_vfiprintf_r+0x32>
 800cac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cac6:	f7fd fcc4 	bl	800a452 <__retarget_lock_acquire_recursive>
 800caca:	89ab      	ldrh	r3, [r5, #12]
 800cacc:	071b      	lsls	r3, r3, #28
 800cace:	d501      	bpl.n	800cad4 <_vfiprintf_r+0x3c>
 800cad0:	692b      	ldr	r3, [r5, #16]
 800cad2:	b9eb      	cbnz	r3, 800cb10 <_vfiprintf_r+0x78>
 800cad4:	4629      	mov	r1, r5
 800cad6:	4630      	mov	r0, r6
 800cad8:	f7fe fb82 	bl	800b1e0 <__swsetup_r>
 800cadc:	b1c0      	cbz	r0, 800cb10 <_vfiprintf_r+0x78>
 800cade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cae0:	07dc      	lsls	r4, r3, #31
 800cae2:	d50e      	bpl.n	800cb02 <_vfiprintf_r+0x6a>
 800cae4:	f04f 30ff 	mov.w	r0, #4294967295
 800cae8:	b01d      	add	sp, #116	; 0x74
 800caea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caee:	4b7b      	ldr	r3, [pc, #492]	; (800ccdc <_vfiprintf_r+0x244>)
 800caf0:	429d      	cmp	r5, r3
 800caf2:	d101      	bne.n	800caf8 <_vfiprintf_r+0x60>
 800caf4:	68b5      	ldr	r5, [r6, #8]
 800caf6:	e7df      	b.n	800cab8 <_vfiprintf_r+0x20>
 800caf8:	4b79      	ldr	r3, [pc, #484]	; (800cce0 <_vfiprintf_r+0x248>)
 800cafa:	429d      	cmp	r5, r3
 800cafc:	bf08      	it	eq
 800cafe:	68f5      	ldreq	r5, [r6, #12]
 800cb00:	e7da      	b.n	800cab8 <_vfiprintf_r+0x20>
 800cb02:	89ab      	ldrh	r3, [r5, #12]
 800cb04:	0598      	lsls	r0, r3, #22
 800cb06:	d4ed      	bmi.n	800cae4 <_vfiprintf_r+0x4c>
 800cb08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb0a:	f7fd fca3 	bl	800a454 <__retarget_lock_release_recursive>
 800cb0e:	e7e9      	b.n	800cae4 <_vfiprintf_r+0x4c>
 800cb10:	2300      	movs	r3, #0
 800cb12:	9309      	str	r3, [sp, #36]	; 0x24
 800cb14:	2320      	movs	r3, #32
 800cb16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb1e:	2330      	movs	r3, #48	; 0x30
 800cb20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cce4 <_vfiprintf_r+0x24c>
 800cb24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb28:	f04f 0901 	mov.w	r9, #1
 800cb2c:	4623      	mov	r3, r4
 800cb2e:	469a      	mov	sl, r3
 800cb30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb34:	b10a      	cbz	r2, 800cb3a <_vfiprintf_r+0xa2>
 800cb36:	2a25      	cmp	r2, #37	; 0x25
 800cb38:	d1f9      	bne.n	800cb2e <_vfiprintf_r+0x96>
 800cb3a:	ebba 0b04 	subs.w	fp, sl, r4
 800cb3e:	d00b      	beq.n	800cb58 <_vfiprintf_r+0xc0>
 800cb40:	465b      	mov	r3, fp
 800cb42:	4622      	mov	r2, r4
 800cb44:	4629      	mov	r1, r5
 800cb46:	4630      	mov	r0, r6
 800cb48:	f7ff ff93 	bl	800ca72 <__sfputs_r>
 800cb4c:	3001      	adds	r0, #1
 800cb4e:	f000 80aa 	beq.w	800cca6 <_vfiprintf_r+0x20e>
 800cb52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb54:	445a      	add	r2, fp
 800cb56:	9209      	str	r2, [sp, #36]	; 0x24
 800cb58:	f89a 3000 	ldrb.w	r3, [sl]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	f000 80a2 	beq.w	800cca6 <_vfiprintf_r+0x20e>
 800cb62:	2300      	movs	r3, #0
 800cb64:	f04f 32ff 	mov.w	r2, #4294967295
 800cb68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb6c:	f10a 0a01 	add.w	sl, sl, #1
 800cb70:	9304      	str	r3, [sp, #16]
 800cb72:	9307      	str	r3, [sp, #28]
 800cb74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb78:	931a      	str	r3, [sp, #104]	; 0x68
 800cb7a:	4654      	mov	r4, sl
 800cb7c:	2205      	movs	r2, #5
 800cb7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb82:	4858      	ldr	r0, [pc, #352]	; (800cce4 <_vfiprintf_r+0x24c>)
 800cb84:	f7f3 fb2c 	bl	80001e0 <memchr>
 800cb88:	9a04      	ldr	r2, [sp, #16]
 800cb8a:	b9d8      	cbnz	r0, 800cbc4 <_vfiprintf_r+0x12c>
 800cb8c:	06d1      	lsls	r1, r2, #27
 800cb8e:	bf44      	itt	mi
 800cb90:	2320      	movmi	r3, #32
 800cb92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb96:	0713      	lsls	r3, r2, #28
 800cb98:	bf44      	itt	mi
 800cb9a:	232b      	movmi	r3, #43	; 0x2b
 800cb9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cba0:	f89a 3000 	ldrb.w	r3, [sl]
 800cba4:	2b2a      	cmp	r3, #42	; 0x2a
 800cba6:	d015      	beq.n	800cbd4 <_vfiprintf_r+0x13c>
 800cba8:	9a07      	ldr	r2, [sp, #28]
 800cbaa:	4654      	mov	r4, sl
 800cbac:	2000      	movs	r0, #0
 800cbae:	f04f 0c0a 	mov.w	ip, #10
 800cbb2:	4621      	mov	r1, r4
 800cbb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbb8:	3b30      	subs	r3, #48	; 0x30
 800cbba:	2b09      	cmp	r3, #9
 800cbbc:	d94e      	bls.n	800cc5c <_vfiprintf_r+0x1c4>
 800cbbe:	b1b0      	cbz	r0, 800cbee <_vfiprintf_r+0x156>
 800cbc0:	9207      	str	r2, [sp, #28]
 800cbc2:	e014      	b.n	800cbee <_vfiprintf_r+0x156>
 800cbc4:	eba0 0308 	sub.w	r3, r0, r8
 800cbc8:	fa09 f303 	lsl.w	r3, r9, r3
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	9304      	str	r3, [sp, #16]
 800cbd0:	46a2      	mov	sl, r4
 800cbd2:	e7d2      	b.n	800cb7a <_vfiprintf_r+0xe2>
 800cbd4:	9b03      	ldr	r3, [sp, #12]
 800cbd6:	1d19      	adds	r1, r3, #4
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	9103      	str	r1, [sp, #12]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	bfbb      	ittet	lt
 800cbe0:	425b      	neglt	r3, r3
 800cbe2:	f042 0202 	orrlt.w	r2, r2, #2
 800cbe6:	9307      	strge	r3, [sp, #28]
 800cbe8:	9307      	strlt	r3, [sp, #28]
 800cbea:	bfb8      	it	lt
 800cbec:	9204      	strlt	r2, [sp, #16]
 800cbee:	7823      	ldrb	r3, [r4, #0]
 800cbf0:	2b2e      	cmp	r3, #46	; 0x2e
 800cbf2:	d10c      	bne.n	800cc0e <_vfiprintf_r+0x176>
 800cbf4:	7863      	ldrb	r3, [r4, #1]
 800cbf6:	2b2a      	cmp	r3, #42	; 0x2a
 800cbf8:	d135      	bne.n	800cc66 <_vfiprintf_r+0x1ce>
 800cbfa:	9b03      	ldr	r3, [sp, #12]
 800cbfc:	1d1a      	adds	r2, r3, #4
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	9203      	str	r2, [sp, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	bfb8      	it	lt
 800cc06:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc0a:	3402      	adds	r4, #2
 800cc0c:	9305      	str	r3, [sp, #20]
 800cc0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ccf4 <_vfiprintf_r+0x25c>
 800cc12:	7821      	ldrb	r1, [r4, #0]
 800cc14:	2203      	movs	r2, #3
 800cc16:	4650      	mov	r0, sl
 800cc18:	f7f3 fae2 	bl	80001e0 <memchr>
 800cc1c:	b140      	cbz	r0, 800cc30 <_vfiprintf_r+0x198>
 800cc1e:	2340      	movs	r3, #64	; 0x40
 800cc20:	eba0 000a 	sub.w	r0, r0, sl
 800cc24:	fa03 f000 	lsl.w	r0, r3, r0
 800cc28:	9b04      	ldr	r3, [sp, #16]
 800cc2a:	4303      	orrs	r3, r0
 800cc2c:	3401      	adds	r4, #1
 800cc2e:	9304      	str	r3, [sp, #16]
 800cc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc34:	482c      	ldr	r0, [pc, #176]	; (800cce8 <_vfiprintf_r+0x250>)
 800cc36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc3a:	2206      	movs	r2, #6
 800cc3c:	f7f3 fad0 	bl	80001e0 <memchr>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	d03f      	beq.n	800ccc4 <_vfiprintf_r+0x22c>
 800cc44:	4b29      	ldr	r3, [pc, #164]	; (800ccec <_vfiprintf_r+0x254>)
 800cc46:	bb1b      	cbnz	r3, 800cc90 <_vfiprintf_r+0x1f8>
 800cc48:	9b03      	ldr	r3, [sp, #12]
 800cc4a:	3307      	adds	r3, #7
 800cc4c:	f023 0307 	bic.w	r3, r3, #7
 800cc50:	3308      	adds	r3, #8
 800cc52:	9303      	str	r3, [sp, #12]
 800cc54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc56:	443b      	add	r3, r7
 800cc58:	9309      	str	r3, [sp, #36]	; 0x24
 800cc5a:	e767      	b.n	800cb2c <_vfiprintf_r+0x94>
 800cc5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc60:	460c      	mov	r4, r1
 800cc62:	2001      	movs	r0, #1
 800cc64:	e7a5      	b.n	800cbb2 <_vfiprintf_r+0x11a>
 800cc66:	2300      	movs	r3, #0
 800cc68:	3401      	adds	r4, #1
 800cc6a:	9305      	str	r3, [sp, #20]
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	f04f 0c0a 	mov.w	ip, #10
 800cc72:	4620      	mov	r0, r4
 800cc74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc78:	3a30      	subs	r2, #48	; 0x30
 800cc7a:	2a09      	cmp	r2, #9
 800cc7c:	d903      	bls.n	800cc86 <_vfiprintf_r+0x1ee>
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d0c5      	beq.n	800cc0e <_vfiprintf_r+0x176>
 800cc82:	9105      	str	r1, [sp, #20]
 800cc84:	e7c3      	b.n	800cc0e <_vfiprintf_r+0x176>
 800cc86:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e7f0      	b.n	800cc72 <_vfiprintf_r+0x1da>
 800cc90:	ab03      	add	r3, sp, #12
 800cc92:	9300      	str	r3, [sp, #0]
 800cc94:	462a      	mov	r2, r5
 800cc96:	4b16      	ldr	r3, [pc, #88]	; (800ccf0 <_vfiprintf_r+0x258>)
 800cc98:	a904      	add	r1, sp, #16
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f7fd fd26 	bl	800a6ec <_printf_float>
 800cca0:	4607      	mov	r7, r0
 800cca2:	1c78      	adds	r0, r7, #1
 800cca4:	d1d6      	bne.n	800cc54 <_vfiprintf_r+0x1bc>
 800cca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cca8:	07d9      	lsls	r1, r3, #31
 800ccaa:	d405      	bmi.n	800ccb8 <_vfiprintf_r+0x220>
 800ccac:	89ab      	ldrh	r3, [r5, #12]
 800ccae:	059a      	lsls	r2, r3, #22
 800ccb0:	d402      	bmi.n	800ccb8 <_vfiprintf_r+0x220>
 800ccb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccb4:	f7fd fbce 	bl	800a454 <__retarget_lock_release_recursive>
 800ccb8:	89ab      	ldrh	r3, [r5, #12]
 800ccba:	065b      	lsls	r3, r3, #25
 800ccbc:	f53f af12 	bmi.w	800cae4 <_vfiprintf_r+0x4c>
 800ccc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccc2:	e711      	b.n	800cae8 <_vfiprintf_r+0x50>
 800ccc4:	ab03      	add	r3, sp, #12
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	462a      	mov	r2, r5
 800ccca:	4b09      	ldr	r3, [pc, #36]	; (800ccf0 <_vfiprintf_r+0x258>)
 800cccc:	a904      	add	r1, sp, #16
 800ccce:	4630      	mov	r0, r6
 800ccd0:	f7fd ffb0 	bl	800ac34 <_printf_i>
 800ccd4:	e7e4      	b.n	800cca0 <_vfiprintf_r+0x208>
 800ccd6:	bf00      	nop
 800ccd8:	08021e00 	.word	0x08021e00
 800ccdc:	08021e20 	.word	0x08021e20
 800cce0:	08021de0 	.word	0x08021de0
 800cce4:	08022064 	.word	0x08022064
 800cce8:	0802206e 	.word	0x0802206e
 800ccec:	0800a6ed 	.word	0x0800a6ed
 800ccf0:	0800ca73 	.word	0x0800ca73
 800ccf4:	0802206a 	.word	0x0802206a

0800ccf8 <_read_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4d07      	ldr	r5, [pc, #28]	; (800cd18 <_read_r+0x20>)
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	4608      	mov	r0, r1
 800cd00:	4611      	mov	r1, r2
 800cd02:	2200      	movs	r2, #0
 800cd04:	602a      	str	r2, [r5, #0]
 800cd06:	461a      	mov	r2, r3
 800cd08:	f7f5 fbc2 	bl	8002490 <_read>
 800cd0c:	1c43      	adds	r3, r0, #1
 800cd0e:	d102      	bne.n	800cd16 <_read_r+0x1e>
 800cd10:	682b      	ldr	r3, [r5, #0]
 800cd12:	b103      	cbz	r3, 800cd16 <_read_r+0x1e>
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	bd38      	pop	{r3, r4, r5, pc}
 800cd18:	20010bf0 	.word	0x20010bf0

0800cd1c <__assert_func>:
 800cd1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd1e:	4614      	mov	r4, r2
 800cd20:	461a      	mov	r2, r3
 800cd22:	4b09      	ldr	r3, [pc, #36]	; (800cd48 <__assert_func+0x2c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4605      	mov	r5, r0
 800cd28:	68d8      	ldr	r0, [r3, #12]
 800cd2a:	b14c      	cbz	r4, 800cd40 <__assert_func+0x24>
 800cd2c:	4b07      	ldr	r3, [pc, #28]	; (800cd4c <__assert_func+0x30>)
 800cd2e:	9100      	str	r1, [sp, #0]
 800cd30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd34:	4906      	ldr	r1, [pc, #24]	; (800cd50 <__assert_func+0x34>)
 800cd36:	462b      	mov	r3, r5
 800cd38:	f000 f80e 	bl	800cd58 <fiprintf>
 800cd3c:	f000 f85f 	bl	800cdfe <abort>
 800cd40:	4b04      	ldr	r3, [pc, #16]	; (800cd54 <__assert_func+0x38>)
 800cd42:	461c      	mov	r4, r3
 800cd44:	e7f3      	b.n	800cd2e <__assert_func+0x12>
 800cd46:	bf00      	nop
 800cd48:	20000014 	.word	0x20000014
 800cd4c:	08022075 	.word	0x08022075
 800cd50:	08022082 	.word	0x08022082
 800cd54:	080220b0 	.word	0x080220b0

0800cd58 <fiprintf>:
 800cd58:	b40e      	push	{r1, r2, r3}
 800cd5a:	b503      	push	{r0, r1, lr}
 800cd5c:	4601      	mov	r1, r0
 800cd5e:	ab03      	add	r3, sp, #12
 800cd60:	4805      	ldr	r0, [pc, #20]	; (800cd78 <fiprintf+0x20>)
 800cd62:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd66:	6800      	ldr	r0, [r0, #0]
 800cd68:	9301      	str	r3, [sp, #4]
 800cd6a:	f7ff fe95 	bl	800ca98 <_vfiprintf_r>
 800cd6e:	b002      	add	sp, #8
 800cd70:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd74:	b003      	add	sp, #12
 800cd76:	4770      	bx	lr
 800cd78:	20000014 	.word	0x20000014

0800cd7c <_fstat_r>:
 800cd7c:	b538      	push	{r3, r4, r5, lr}
 800cd7e:	4d07      	ldr	r5, [pc, #28]	; (800cd9c <_fstat_r+0x20>)
 800cd80:	2300      	movs	r3, #0
 800cd82:	4604      	mov	r4, r0
 800cd84:	4608      	mov	r0, r1
 800cd86:	4611      	mov	r1, r2
 800cd88:	602b      	str	r3, [r5, #0]
 800cd8a:	f7f5 fbaa 	bl	80024e2 <_fstat>
 800cd8e:	1c43      	adds	r3, r0, #1
 800cd90:	d102      	bne.n	800cd98 <_fstat_r+0x1c>
 800cd92:	682b      	ldr	r3, [r5, #0]
 800cd94:	b103      	cbz	r3, 800cd98 <_fstat_r+0x1c>
 800cd96:	6023      	str	r3, [r4, #0]
 800cd98:	bd38      	pop	{r3, r4, r5, pc}
 800cd9a:	bf00      	nop
 800cd9c:	20010bf0 	.word	0x20010bf0

0800cda0 <_isatty_r>:
 800cda0:	b538      	push	{r3, r4, r5, lr}
 800cda2:	4d06      	ldr	r5, [pc, #24]	; (800cdbc <_isatty_r+0x1c>)
 800cda4:	2300      	movs	r3, #0
 800cda6:	4604      	mov	r4, r0
 800cda8:	4608      	mov	r0, r1
 800cdaa:	602b      	str	r3, [r5, #0]
 800cdac:	f7f5 fba9 	bl	8002502 <_isatty>
 800cdb0:	1c43      	adds	r3, r0, #1
 800cdb2:	d102      	bne.n	800cdba <_isatty_r+0x1a>
 800cdb4:	682b      	ldr	r3, [r5, #0]
 800cdb6:	b103      	cbz	r3, 800cdba <_isatty_r+0x1a>
 800cdb8:	6023      	str	r3, [r4, #0]
 800cdba:	bd38      	pop	{r3, r4, r5, pc}
 800cdbc:	20010bf0 	.word	0x20010bf0

0800cdc0 <__ascii_mbtowc>:
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	b901      	cbnz	r1, 800cdc6 <__ascii_mbtowc+0x6>
 800cdc4:	a901      	add	r1, sp, #4
 800cdc6:	b142      	cbz	r2, 800cdda <__ascii_mbtowc+0x1a>
 800cdc8:	b14b      	cbz	r3, 800cdde <__ascii_mbtowc+0x1e>
 800cdca:	7813      	ldrb	r3, [r2, #0]
 800cdcc:	600b      	str	r3, [r1, #0]
 800cdce:	7812      	ldrb	r2, [r2, #0]
 800cdd0:	1e10      	subs	r0, r2, #0
 800cdd2:	bf18      	it	ne
 800cdd4:	2001      	movne	r0, #1
 800cdd6:	b002      	add	sp, #8
 800cdd8:	4770      	bx	lr
 800cdda:	4610      	mov	r0, r2
 800cddc:	e7fb      	b.n	800cdd6 <__ascii_mbtowc+0x16>
 800cdde:	f06f 0001 	mvn.w	r0, #1
 800cde2:	e7f8      	b.n	800cdd6 <__ascii_mbtowc+0x16>

0800cde4 <__ascii_wctomb>:
 800cde4:	b149      	cbz	r1, 800cdfa <__ascii_wctomb+0x16>
 800cde6:	2aff      	cmp	r2, #255	; 0xff
 800cde8:	bf85      	ittet	hi
 800cdea:	238a      	movhi	r3, #138	; 0x8a
 800cdec:	6003      	strhi	r3, [r0, #0]
 800cdee:	700a      	strbls	r2, [r1, #0]
 800cdf0:	f04f 30ff 	movhi.w	r0, #4294967295
 800cdf4:	bf98      	it	ls
 800cdf6:	2001      	movls	r0, #1
 800cdf8:	4770      	bx	lr
 800cdfa:	4608      	mov	r0, r1
 800cdfc:	4770      	bx	lr

0800cdfe <abort>:
 800cdfe:	b508      	push	{r3, lr}
 800ce00:	2006      	movs	r0, #6
 800ce02:	f000 f82b 	bl	800ce5c <raise>
 800ce06:	2001      	movs	r0, #1
 800ce08:	f7f5 fb38 	bl	800247c <_exit>

0800ce0c <_raise_r>:
 800ce0c:	291f      	cmp	r1, #31
 800ce0e:	b538      	push	{r3, r4, r5, lr}
 800ce10:	4604      	mov	r4, r0
 800ce12:	460d      	mov	r5, r1
 800ce14:	d904      	bls.n	800ce20 <_raise_r+0x14>
 800ce16:	2316      	movs	r3, #22
 800ce18:	6003      	str	r3, [r0, #0]
 800ce1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce1e:	bd38      	pop	{r3, r4, r5, pc}
 800ce20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce22:	b112      	cbz	r2, 800ce2a <_raise_r+0x1e>
 800ce24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce28:	b94b      	cbnz	r3, 800ce3e <_raise_r+0x32>
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f000 f830 	bl	800ce90 <_getpid_r>
 800ce30:	462a      	mov	r2, r5
 800ce32:	4601      	mov	r1, r0
 800ce34:	4620      	mov	r0, r4
 800ce36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce3a:	f000 b817 	b.w	800ce6c <_kill_r>
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d00a      	beq.n	800ce58 <_raise_r+0x4c>
 800ce42:	1c59      	adds	r1, r3, #1
 800ce44:	d103      	bne.n	800ce4e <_raise_r+0x42>
 800ce46:	2316      	movs	r3, #22
 800ce48:	6003      	str	r3, [r0, #0]
 800ce4a:	2001      	movs	r0, #1
 800ce4c:	e7e7      	b.n	800ce1e <_raise_r+0x12>
 800ce4e:	2400      	movs	r4, #0
 800ce50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce54:	4628      	mov	r0, r5
 800ce56:	4798      	blx	r3
 800ce58:	2000      	movs	r0, #0
 800ce5a:	e7e0      	b.n	800ce1e <_raise_r+0x12>

0800ce5c <raise>:
 800ce5c:	4b02      	ldr	r3, [pc, #8]	; (800ce68 <raise+0xc>)
 800ce5e:	4601      	mov	r1, r0
 800ce60:	6818      	ldr	r0, [r3, #0]
 800ce62:	f7ff bfd3 	b.w	800ce0c <_raise_r>
 800ce66:	bf00      	nop
 800ce68:	20000014 	.word	0x20000014

0800ce6c <_kill_r>:
 800ce6c:	b538      	push	{r3, r4, r5, lr}
 800ce6e:	4d07      	ldr	r5, [pc, #28]	; (800ce8c <_kill_r+0x20>)
 800ce70:	2300      	movs	r3, #0
 800ce72:	4604      	mov	r4, r0
 800ce74:	4608      	mov	r0, r1
 800ce76:	4611      	mov	r1, r2
 800ce78:	602b      	str	r3, [r5, #0]
 800ce7a:	f7f5 faef 	bl	800245c <_kill>
 800ce7e:	1c43      	adds	r3, r0, #1
 800ce80:	d102      	bne.n	800ce88 <_kill_r+0x1c>
 800ce82:	682b      	ldr	r3, [r5, #0]
 800ce84:	b103      	cbz	r3, 800ce88 <_kill_r+0x1c>
 800ce86:	6023      	str	r3, [r4, #0]
 800ce88:	bd38      	pop	{r3, r4, r5, pc}
 800ce8a:	bf00      	nop
 800ce8c:	20010bf0 	.word	0x20010bf0

0800ce90 <_getpid_r>:
 800ce90:	f7f5 badc 	b.w	800244c <_getpid>
 800ce94:	0000      	movs	r0, r0
	...

0800ce98 <sin>:
 800ce98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce9a:	ec53 2b10 	vmov	r2, r3, d0
 800ce9e:	4828      	ldr	r0, [pc, #160]	; (800cf40 <sin+0xa8>)
 800cea0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cea4:	4281      	cmp	r1, r0
 800cea6:	dc07      	bgt.n	800ceb8 <sin+0x20>
 800cea8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800cf38 <sin+0xa0>
 800ceac:	2000      	movs	r0, #0
 800ceae:	b005      	add	sp, #20
 800ceb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ceb4:	f000 bf14 	b.w	800dce0 <__kernel_sin>
 800ceb8:	4822      	ldr	r0, [pc, #136]	; (800cf44 <sin+0xac>)
 800ceba:	4281      	cmp	r1, r0
 800cebc:	dd09      	ble.n	800ced2 <sin+0x3a>
 800cebe:	ee10 0a10 	vmov	r0, s0
 800cec2:	4619      	mov	r1, r3
 800cec4:	f7f3 f9e0 	bl	8000288 <__aeabi_dsub>
 800cec8:	ec41 0b10 	vmov	d0, r0, r1
 800cecc:	b005      	add	sp, #20
 800cece:	f85d fb04 	ldr.w	pc, [sp], #4
 800ced2:	4668      	mov	r0, sp
 800ced4:	f000 f884 	bl	800cfe0 <__ieee754_rem_pio2>
 800ced8:	f000 0003 	and.w	r0, r0, #3
 800cedc:	2801      	cmp	r0, #1
 800cede:	d00c      	beq.n	800cefa <sin+0x62>
 800cee0:	2802      	cmp	r0, #2
 800cee2:	d011      	beq.n	800cf08 <sin+0x70>
 800cee4:	b9f0      	cbnz	r0, 800cf24 <sin+0x8c>
 800cee6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ceea:	ed9d 0b00 	vldr	d0, [sp]
 800ceee:	2001      	movs	r0, #1
 800cef0:	f000 fef6 	bl	800dce0 <__kernel_sin>
 800cef4:	ec51 0b10 	vmov	r0, r1, d0
 800cef8:	e7e6      	b.n	800cec8 <sin+0x30>
 800cefa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cefe:	ed9d 0b00 	vldr	d0, [sp]
 800cf02:	f000 fad5 	bl	800d4b0 <__kernel_cos>
 800cf06:	e7f5      	b.n	800cef4 <sin+0x5c>
 800cf08:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf0c:	ed9d 0b00 	vldr	d0, [sp]
 800cf10:	2001      	movs	r0, #1
 800cf12:	f000 fee5 	bl	800dce0 <__kernel_sin>
 800cf16:	ec53 2b10 	vmov	r2, r3, d0
 800cf1a:	ee10 0a10 	vmov	r0, s0
 800cf1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cf22:	e7d1      	b.n	800cec8 <sin+0x30>
 800cf24:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cf28:	ed9d 0b00 	vldr	d0, [sp]
 800cf2c:	f000 fac0 	bl	800d4b0 <__kernel_cos>
 800cf30:	e7f1      	b.n	800cf16 <sin+0x7e>
 800cf32:	bf00      	nop
 800cf34:	f3af 8000 	nop.w
	...
 800cf40:	3fe921fb 	.word	0x3fe921fb
 800cf44:	7fefffff 	.word	0x7fefffff

0800cf48 <log10f>:
 800cf48:	b508      	push	{r3, lr}
 800cf4a:	ed2d 8b02 	vpush	{d8}
 800cf4e:	eeb0 8a40 	vmov.f32	s16, s0
 800cf52:	f000 fa51 	bl	800d3f8 <__ieee754_log10f>
 800cf56:	eeb4 8a48 	vcmp.f32	s16, s16
 800cf5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf5e:	d60f      	bvs.n	800cf80 <log10f+0x38>
 800cf60:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cf64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf68:	d80a      	bhi.n	800cf80 <log10f+0x38>
 800cf6a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cf6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf72:	d108      	bne.n	800cf86 <log10f+0x3e>
 800cf74:	f7fd f94c 	bl	800a210 <__errno>
 800cf78:	2322      	movs	r3, #34	; 0x22
 800cf7a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800cf9c <log10f+0x54>
 800cf7e:	6003      	str	r3, [r0, #0]
 800cf80:	ecbd 8b02 	vpop	{d8}
 800cf84:	bd08      	pop	{r3, pc}
 800cf86:	f7fd f943 	bl	800a210 <__errno>
 800cf8a:	ecbd 8b02 	vpop	{d8}
 800cf8e:	2321      	movs	r3, #33	; 0x21
 800cf90:	6003      	str	r3, [r0, #0]
 800cf92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cf96:	4802      	ldr	r0, [pc, #8]	; (800cfa0 <log10f+0x58>)
 800cf98:	f001 b870 	b.w	800e07c <nanf>
 800cf9c:	ff800000 	.word	0xff800000
 800cfa0:	080220b0 	.word	0x080220b0

0800cfa4 <sqrtf>:
 800cfa4:	b508      	push	{r3, lr}
 800cfa6:	ed2d 8b02 	vpush	{d8}
 800cfaa:	eeb0 8a40 	vmov.f32	s16, s0
 800cfae:	f000 fa7b 	bl	800d4a8 <__ieee754_sqrtf>
 800cfb2:	eeb4 8a48 	vcmp.f32	s16, s16
 800cfb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfba:	d60c      	bvs.n	800cfd6 <sqrtf+0x32>
 800cfbc:	eddf 8a07 	vldr	s17, [pc, #28]	; 800cfdc <sqrtf+0x38>
 800cfc0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cfc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc8:	d505      	bpl.n	800cfd6 <sqrtf+0x32>
 800cfca:	f7fd f921 	bl	800a210 <__errno>
 800cfce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cfd2:	2321      	movs	r3, #33	; 0x21
 800cfd4:	6003      	str	r3, [r0, #0]
 800cfd6:	ecbd 8b02 	vpop	{d8}
 800cfda:	bd08      	pop	{r3, pc}
 800cfdc:	00000000 	.word	0x00000000

0800cfe0 <__ieee754_rem_pio2>:
 800cfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe4:	ed2d 8b02 	vpush	{d8}
 800cfe8:	ec55 4b10 	vmov	r4, r5, d0
 800cfec:	4bca      	ldr	r3, [pc, #808]	; (800d318 <__ieee754_rem_pio2+0x338>)
 800cfee:	b08b      	sub	sp, #44	; 0x2c
 800cff0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cff4:	4598      	cmp	r8, r3
 800cff6:	4682      	mov	sl, r0
 800cff8:	9502      	str	r5, [sp, #8]
 800cffa:	dc08      	bgt.n	800d00e <__ieee754_rem_pio2+0x2e>
 800cffc:	2200      	movs	r2, #0
 800cffe:	2300      	movs	r3, #0
 800d000:	ed80 0b00 	vstr	d0, [r0]
 800d004:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d008:	f04f 0b00 	mov.w	fp, #0
 800d00c:	e028      	b.n	800d060 <__ieee754_rem_pio2+0x80>
 800d00e:	4bc3      	ldr	r3, [pc, #780]	; (800d31c <__ieee754_rem_pio2+0x33c>)
 800d010:	4598      	cmp	r8, r3
 800d012:	dc78      	bgt.n	800d106 <__ieee754_rem_pio2+0x126>
 800d014:	9b02      	ldr	r3, [sp, #8]
 800d016:	4ec2      	ldr	r6, [pc, #776]	; (800d320 <__ieee754_rem_pio2+0x340>)
 800d018:	2b00      	cmp	r3, #0
 800d01a:	ee10 0a10 	vmov	r0, s0
 800d01e:	a3b0      	add	r3, pc, #704	; (adr r3, 800d2e0 <__ieee754_rem_pio2+0x300>)
 800d020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d024:	4629      	mov	r1, r5
 800d026:	dd39      	ble.n	800d09c <__ieee754_rem_pio2+0xbc>
 800d028:	f7f3 f92e 	bl	8000288 <__aeabi_dsub>
 800d02c:	45b0      	cmp	r8, r6
 800d02e:	4604      	mov	r4, r0
 800d030:	460d      	mov	r5, r1
 800d032:	d01b      	beq.n	800d06c <__ieee754_rem_pio2+0x8c>
 800d034:	a3ac      	add	r3, pc, #688	; (adr r3, 800d2e8 <__ieee754_rem_pio2+0x308>)
 800d036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03a:	f7f3 f925 	bl	8000288 <__aeabi_dsub>
 800d03e:	4602      	mov	r2, r0
 800d040:	460b      	mov	r3, r1
 800d042:	e9ca 2300 	strd	r2, r3, [sl]
 800d046:	4620      	mov	r0, r4
 800d048:	4629      	mov	r1, r5
 800d04a:	f7f3 f91d 	bl	8000288 <__aeabi_dsub>
 800d04e:	a3a6      	add	r3, pc, #664	; (adr r3, 800d2e8 <__ieee754_rem_pio2+0x308>)
 800d050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d054:	f7f3 f918 	bl	8000288 <__aeabi_dsub>
 800d058:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d05c:	f04f 0b01 	mov.w	fp, #1
 800d060:	4658      	mov	r0, fp
 800d062:	b00b      	add	sp, #44	; 0x2c
 800d064:	ecbd 8b02 	vpop	{d8}
 800d068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d06c:	a3a0      	add	r3, pc, #640	; (adr r3, 800d2f0 <__ieee754_rem_pio2+0x310>)
 800d06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d072:	f7f3 f909 	bl	8000288 <__aeabi_dsub>
 800d076:	a3a0      	add	r3, pc, #640	; (adr r3, 800d2f8 <__ieee754_rem_pio2+0x318>)
 800d078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07c:	4604      	mov	r4, r0
 800d07e:	460d      	mov	r5, r1
 800d080:	f7f3 f902 	bl	8000288 <__aeabi_dsub>
 800d084:	4602      	mov	r2, r0
 800d086:	460b      	mov	r3, r1
 800d088:	e9ca 2300 	strd	r2, r3, [sl]
 800d08c:	4620      	mov	r0, r4
 800d08e:	4629      	mov	r1, r5
 800d090:	f7f3 f8fa 	bl	8000288 <__aeabi_dsub>
 800d094:	a398      	add	r3, pc, #608	; (adr r3, 800d2f8 <__ieee754_rem_pio2+0x318>)
 800d096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09a:	e7db      	b.n	800d054 <__ieee754_rem_pio2+0x74>
 800d09c:	f7f3 f8f6 	bl	800028c <__adddf3>
 800d0a0:	45b0      	cmp	r8, r6
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	460d      	mov	r5, r1
 800d0a6:	d016      	beq.n	800d0d6 <__ieee754_rem_pio2+0xf6>
 800d0a8:	a38f      	add	r3, pc, #572	; (adr r3, 800d2e8 <__ieee754_rem_pio2+0x308>)
 800d0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ae:	f7f3 f8ed 	bl	800028c <__adddf3>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	e9ca 2300 	strd	r2, r3, [sl]
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	4629      	mov	r1, r5
 800d0be:	f7f3 f8e3 	bl	8000288 <__aeabi_dsub>
 800d0c2:	a389      	add	r3, pc, #548	; (adr r3, 800d2e8 <__ieee754_rem_pio2+0x308>)
 800d0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c8:	f7f3 f8e0 	bl	800028c <__adddf3>
 800d0cc:	f04f 3bff 	mov.w	fp, #4294967295
 800d0d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d0d4:	e7c4      	b.n	800d060 <__ieee754_rem_pio2+0x80>
 800d0d6:	a386      	add	r3, pc, #536	; (adr r3, 800d2f0 <__ieee754_rem_pio2+0x310>)
 800d0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0dc:	f7f3 f8d6 	bl	800028c <__adddf3>
 800d0e0:	a385      	add	r3, pc, #532	; (adr r3, 800d2f8 <__ieee754_rem_pio2+0x318>)
 800d0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	460d      	mov	r5, r1
 800d0ea:	f7f3 f8cf 	bl	800028c <__adddf3>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	e9ca 2300 	strd	r2, r3, [sl]
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	f7f3 f8c5 	bl	8000288 <__aeabi_dsub>
 800d0fe:	a37e      	add	r3, pc, #504	; (adr r3, 800d2f8 <__ieee754_rem_pio2+0x318>)
 800d100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d104:	e7e0      	b.n	800d0c8 <__ieee754_rem_pio2+0xe8>
 800d106:	4b87      	ldr	r3, [pc, #540]	; (800d324 <__ieee754_rem_pio2+0x344>)
 800d108:	4598      	cmp	r8, r3
 800d10a:	f300 80d9 	bgt.w	800d2c0 <__ieee754_rem_pio2+0x2e0>
 800d10e:	f000 fea5 	bl	800de5c <fabs>
 800d112:	ec55 4b10 	vmov	r4, r5, d0
 800d116:	ee10 0a10 	vmov	r0, s0
 800d11a:	a379      	add	r3, pc, #484	; (adr r3, 800d300 <__ieee754_rem_pio2+0x320>)
 800d11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d120:	4629      	mov	r1, r5
 800d122:	f7f3 fa69 	bl	80005f8 <__aeabi_dmul>
 800d126:	4b80      	ldr	r3, [pc, #512]	; (800d328 <__ieee754_rem_pio2+0x348>)
 800d128:	2200      	movs	r2, #0
 800d12a:	f7f3 f8af 	bl	800028c <__adddf3>
 800d12e:	f7f3 fd13 	bl	8000b58 <__aeabi_d2iz>
 800d132:	4683      	mov	fp, r0
 800d134:	f7f3 f9f6 	bl	8000524 <__aeabi_i2d>
 800d138:	4602      	mov	r2, r0
 800d13a:	460b      	mov	r3, r1
 800d13c:	ec43 2b18 	vmov	d8, r2, r3
 800d140:	a367      	add	r3, pc, #412	; (adr r3, 800d2e0 <__ieee754_rem_pio2+0x300>)
 800d142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d146:	f7f3 fa57 	bl	80005f8 <__aeabi_dmul>
 800d14a:	4602      	mov	r2, r0
 800d14c:	460b      	mov	r3, r1
 800d14e:	4620      	mov	r0, r4
 800d150:	4629      	mov	r1, r5
 800d152:	f7f3 f899 	bl	8000288 <__aeabi_dsub>
 800d156:	a364      	add	r3, pc, #400	; (adr r3, 800d2e8 <__ieee754_rem_pio2+0x308>)
 800d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15c:	4606      	mov	r6, r0
 800d15e:	460f      	mov	r7, r1
 800d160:	ec51 0b18 	vmov	r0, r1, d8
 800d164:	f7f3 fa48 	bl	80005f8 <__aeabi_dmul>
 800d168:	f1bb 0f1f 	cmp.w	fp, #31
 800d16c:	4604      	mov	r4, r0
 800d16e:	460d      	mov	r5, r1
 800d170:	dc0d      	bgt.n	800d18e <__ieee754_rem_pio2+0x1ae>
 800d172:	4b6e      	ldr	r3, [pc, #440]	; (800d32c <__ieee754_rem_pio2+0x34c>)
 800d174:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d17c:	4543      	cmp	r3, r8
 800d17e:	d006      	beq.n	800d18e <__ieee754_rem_pio2+0x1ae>
 800d180:	4622      	mov	r2, r4
 800d182:	462b      	mov	r3, r5
 800d184:	4630      	mov	r0, r6
 800d186:	4639      	mov	r1, r7
 800d188:	f7f3 f87e 	bl	8000288 <__aeabi_dsub>
 800d18c:	e00f      	b.n	800d1ae <__ieee754_rem_pio2+0x1ce>
 800d18e:	462b      	mov	r3, r5
 800d190:	4622      	mov	r2, r4
 800d192:	4630      	mov	r0, r6
 800d194:	4639      	mov	r1, r7
 800d196:	f7f3 f877 	bl	8000288 <__aeabi_dsub>
 800d19a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d19e:	9303      	str	r3, [sp, #12]
 800d1a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d1a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d1a8:	f1b8 0f10 	cmp.w	r8, #16
 800d1ac:	dc02      	bgt.n	800d1b4 <__ieee754_rem_pio2+0x1d4>
 800d1ae:	e9ca 0100 	strd	r0, r1, [sl]
 800d1b2:	e039      	b.n	800d228 <__ieee754_rem_pio2+0x248>
 800d1b4:	a34e      	add	r3, pc, #312	; (adr r3, 800d2f0 <__ieee754_rem_pio2+0x310>)
 800d1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ba:	ec51 0b18 	vmov	r0, r1, d8
 800d1be:	f7f3 fa1b 	bl	80005f8 <__aeabi_dmul>
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	460d      	mov	r5, r1
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	4630      	mov	r0, r6
 800d1cc:	4639      	mov	r1, r7
 800d1ce:	f7f3 f85b 	bl	8000288 <__aeabi_dsub>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	4680      	mov	r8, r0
 800d1d8:	4689      	mov	r9, r1
 800d1da:	4630      	mov	r0, r6
 800d1dc:	4639      	mov	r1, r7
 800d1de:	f7f3 f853 	bl	8000288 <__aeabi_dsub>
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	462b      	mov	r3, r5
 800d1e6:	f7f3 f84f 	bl	8000288 <__aeabi_dsub>
 800d1ea:	a343      	add	r3, pc, #268	; (adr r3, 800d2f8 <__ieee754_rem_pio2+0x318>)
 800d1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	460d      	mov	r5, r1
 800d1f4:	ec51 0b18 	vmov	r0, r1, d8
 800d1f8:	f7f3 f9fe 	bl	80005f8 <__aeabi_dmul>
 800d1fc:	4622      	mov	r2, r4
 800d1fe:	462b      	mov	r3, r5
 800d200:	f7f3 f842 	bl	8000288 <__aeabi_dsub>
 800d204:	4602      	mov	r2, r0
 800d206:	460b      	mov	r3, r1
 800d208:	4604      	mov	r4, r0
 800d20a:	460d      	mov	r5, r1
 800d20c:	4640      	mov	r0, r8
 800d20e:	4649      	mov	r1, r9
 800d210:	f7f3 f83a 	bl	8000288 <__aeabi_dsub>
 800d214:	9a03      	ldr	r2, [sp, #12]
 800d216:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d21a:	1ad3      	subs	r3, r2, r3
 800d21c:	2b31      	cmp	r3, #49	; 0x31
 800d21e:	dc24      	bgt.n	800d26a <__ieee754_rem_pio2+0x28a>
 800d220:	e9ca 0100 	strd	r0, r1, [sl]
 800d224:	4646      	mov	r6, r8
 800d226:	464f      	mov	r7, r9
 800d228:	e9da 8900 	ldrd	r8, r9, [sl]
 800d22c:	4630      	mov	r0, r6
 800d22e:	4642      	mov	r2, r8
 800d230:	464b      	mov	r3, r9
 800d232:	4639      	mov	r1, r7
 800d234:	f7f3 f828 	bl	8000288 <__aeabi_dsub>
 800d238:	462b      	mov	r3, r5
 800d23a:	4622      	mov	r2, r4
 800d23c:	f7f3 f824 	bl	8000288 <__aeabi_dsub>
 800d240:	9b02      	ldr	r3, [sp, #8]
 800d242:	2b00      	cmp	r3, #0
 800d244:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d248:	f6bf af0a 	bge.w	800d060 <__ieee754_rem_pio2+0x80>
 800d24c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d250:	f8ca 3004 	str.w	r3, [sl, #4]
 800d254:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d258:	f8ca 8000 	str.w	r8, [sl]
 800d25c:	f8ca 0008 	str.w	r0, [sl, #8]
 800d260:	f8ca 300c 	str.w	r3, [sl, #12]
 800d264:	f1cb 0b00 	rsb	fp, fp, #0
 800d268:	e6fa      	b.n	800d060 <__ieee754_rem_pio2+0x80>
 800d26a:	a327      	add	r3, pc, #156	; (adr r3, 800d308 <__ieee754_rem_pio2+0x328>)
 800d26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d270:	ec51 0b18 	vmov	r0, r1, d8
 800d274:	f7f3 f9c0 	bl	80005f8 <__aeabi_dmul>
 800d278:	4604      	mov	r4, r0
 800d27a:	460d      	mov	r5, r1
 800d27c:	4602      	mov	r2, r0
 800d27e:	460b      	mov	r3, r1
 800d280:	4640      	mov	r0, r8
 800d282:	4649      	mov	r1, r9
 800d284:	f7f3 f800 	bl	8000288 <__aeabi_dsub>
 800d288:	4602      	mov	r2, r0
 800d28a:	460b      	mov	r3, r1
 800d28c:	4606      	mov	r6, r0
 800d28e:	460f      	mov	r7, r1
 800d290:	4640      	mov	r0, r8
 800d292:	4649      	mov	r1, r9
 800d294:	f7f2 fff8 	bl	8000288 <__aeabi_dsub>
 800d298:	4622      	mov	r2, r4
 800d29a:	462b      	mov	r3, r5
 800d29c:	f7f2 fff4 	bl	8000288 <__aeabi_dsub>
 800d2a0:	a31b      	add	r3, pc, #108	; (adr r3, 800d310 <__ieee754_rem_pio2+0x330>)
 800d2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	460d      	mov	r5, r1
 800d2aa:	ec51 0b18 	vmov	r0, r1, d8
 800d2ae:	f7f3 f9a3 	bl	80005f8 <__aeabi_dmul>
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	462b      	mov	r3, r5
 800d2b6:	f7f2 ffe7 	bl	8000288 <__aeabi_dsub>
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	460d      	mov	r5, r1
 800d2be:	e75f      	b.n	800d180 <__ieee754_rem_pio2+0x1a0>
 800d2c0:	4b1b      	ldr	r3, [pc, #108]	; (800d330 <__ieee754_rem_pio2+0x350>)
 800d2c2:	4598      	cmp	r8, r3
 800d2c4:	dd36      	ble.n	800d334 <__ieee754_rem_pio2+0x354>
 800d2c6:	ee10 2a10 	vmov	r2, s0
 800d2ca:	462b      	mov	r3, r5
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	4629      	mov	r1, r5
 800d2d0:	f7f2 ffda 	bl	8000288 <__aeabi_dsub>
 800d2d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d2d8:	e9ca 0100 	strd	r0, r1, [sl]
 800d2dc:	e694      	b.n	800d008 <__ieee754_rem_pio2+0x28>
 800d2de:	bf00      	nop
 800d2e0:	54400000 	.word	0x54400000
 800d2e4:	3ff921fb 	.word	0x3ff921fb
 800d2e8:	1a626331 	.word	0x1a626331
 800d2ec:	3dd0b461 	.word	0x3dd0b461
 800d2f0:	1a600000 	.word	0x1a600000
 800d2f4:	3dd0b461 	.word	0x3dd0b461
 800d2f8:	2e037073 	.word	0x2e037073
 800d2fc:	3ba3198a 	.word	0x3ba3198a
 800d300:	6dc9c883 	.word	0x6dc9c883
 800d304:	3fe45f30 	.word	0x3fe45f30
 800d308:	2e000000 	.word	0x2e000000
 800d30c:	3ba3198a 	.word	0x3ba3198a
 800d310:	252049c1 	.word	0x252049c1
 800d314:	397b839a 	.word	0x397b839a
 800d318:	3fe921fb 	.word	0x3fe921fb
 800d31c:	4002d97b 	.word	0x4002d97b
 800d320:	3ff921fb 	.word	0x3ff921fb
 800d324:	413921fb 	.word	0x413921fb
 800d328:	3fe00000 	.word	0x3fe00000
 800d32c:	080221bc 	.word	0x080221bc
 800d330:	7fefffff 	.word	0x7fefffff
 800d334:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d338:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d33c:	ee10 0a10 	vmov	r0, s0
 800d340:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d344:	ee10 6a10 	vmov	r6, s0
 800d348:	460f      	mov	r7, r1
 800d34a:	f7f3 fc05 	bl	8000b58 <__aeabi_d2iz>
 800d34e:	f7f3 f8e9 	bl	8000524 <__aeabi_i2d>
 800d352:	4602      	mov	r2, r0
 800d354:	460b      	mov	r3, r1
 800d356:	4630      	mov	r0, r6
 800d358:	4639      	mov	r1, r7
 800d35a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d35e:	f7f2 ff93 	bl	8000288 <__aeabi_dsub>
 800d362:	4b23      	ldr	r3, [pc, #140]	; (800d3f0 <__ieee754_rem_pio2+0x410>)
 800d364:	2200      	movs	r2, #0
 800d366:	f7f3 f947 	bl	80005f8 <__aeabi_dmul>
 800d36a:	460f      	mov	r7, r1
 800d36c:	4606      	mov	r6, r0
 800d36e:	f7f3 fbf3 	bl	8000b58 <__aeabi_d2iz>
 800d372:	f7f3 f8d7 	bl	8000524 <__aeabi_i2d>
 800d376:	4602      	mov	r2, r0
 800d378:	460b      	mov	r3, r1
 800d37a:	4630      	mov	r0, r6
 800d37c:	4639      	mov	r1, r7
 800d37e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d382:	f7f2 ff81 	bl	8000288 <__aeabi_dsub>
 800d386:	4b1a      	ldr	r3, [pc, #104]	; (800d3f0 <__ieee754_rem_pio2+0x410>)
 800d388:	2200      	movs	r2, #0
 800d38a:	f7f3 f935 	bl	80005f8 <__aeabi_dmul>
 800d38e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d392:	ad04      	add	r5, sp, #16
 800d394:	f04f 0803 	mov.w	r8, #3
 800d398:	46a9      	mov	r9, r5
 800d39a:	2600      	movs	r6, #0
 800d39c:	2700      	movs	r7, #0
 800d39e:	4632      	mov	r2, r6
 800d3a0:	463b      	mov	r3, r7
 800d3a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d3a6:	46c3      	mov	fp, r8
 800d3a8:	3d08      	subs	r5, #8
 800d3aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800d3ae:	f7f3 fb8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	d1f3      	bne.n	800d39e <__ieee754_rem_pio2+0x3be>
 800d3b6:	4b0f      	ldr	r3, [pc, #60]	; (800d3f4 <__ieee754_rem_pio2+0x414>)
 800d3b8:	9301      	str	r3, [sp, #4]
 800d3ba:	2302      	movs	r3, #2
 800d3bc:	9300      	str	r3, [sp, #0]
 800d3be:	4622      	mov	r2, r4
 800d3c0:	465b      	mov	r3, fp
 800d3c2:	4651      	mov	r1, sl
 800d3c4:	4648      	mov	r0, r9
 800d3c6:	f000 f93b 	bl	800d640 <__kernel_rem_pio2>
 800d3ca:	9b02      	ldr	r3, [sp, #8]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	4683      	mov	fp, r0
 800d3d0:	f6bf ae46 	bge.w	800d060 <__ieee754_rem_pio2+0x80>
 800d3d4:	e9da 2100 	ldrd	r2, r1, [sl]
 800d3d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3dc:	e9ca 2300 	strd	r2, r3, [sl]
 800d3e0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d3e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3e8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d3ec:	e73a      	b.n	800d264 <__ieee754_rem_pio2+0x284>
 800d3ee:	bf00      	nop
 800d3f0:	41700000 	.word	0x41700000
 800d3f4:	0802223c 	.word	0x0802223c

0800d3f8 <__ieee754_log10f>:
 800d3f8:	b508      	push	{r3, lr}
 800d3fa:	ee10 2a10 	vmov	r2, s0
 800d3fe:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800d402:	ed2d 8b02 	vpush	{d8}
 800d406:	d108      	bne.n	800d41a <__ieee754_log10f+0x22>
 800d408:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800d490 <__ieee754_log10f+0x98>
 800d40c:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d494 <__ieee754_log10f+0x9c>
 800d410:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d414:	ecbd 8b02 	vpop	{d8}
 800d418:	bd08      	pop	{r3, pc}
 800d41a:	2a00      	cmp	r2, #0
 800d41c:	da02      	bge.n	800d424 <__ieee754_log10f+0x2c>
 800d41e:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d422:	e7f3      	b.n	800d40c <__ieee754_log10f+0x14>
 800d424:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d428:	db02      	blt.n	800d430 <__ieee754_log10f+0x38>
 800d42a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d42e:	e7f1      	b.n	800d414 <__ieee754_log10f+0x1c>
 800d430:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800d434:	bfbf      	itttt	lt
 800d436:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800d498 <__ieee754_log10f+0xa0>
 800d43a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d43e:	f06f 0118 	mvnlt.w	r1, #24
 800d442:	ee17 2a90 	vmovlt	r2, s15
 800d446:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800d44a:	bfa8      	it	ge
 800d44c:	2100      	movge	r1, #0
 800d44e:	3b7f      	subs	r3, #127	; 0x7f
 800d450:	440b      	add	r3, r1
 800d452:	0fd9      	lsrs	r1, r3, #31
 800d454:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800d458:	ee07 3a90 	vmov	s15, r3
 800d45c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800d460:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800d464:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d468:	ee00 3a10 	vmov	s0, r3
 800d46c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800d470:	f000 fe0a 	bl	800e088 <__ieee754_logf>
 800d474:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d49c <__ieee754_log10f+0xa4>
 800d478:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d47c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d4a0 <__ieee754_log10f+0xa8>
 800d480:	eea8 0a27 	vfma.f32	s0, s16, s15
 800d484:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d4a4 <__ieee754_log10f+0xac>
 800d488:	eea8 0a27 	vfma.f32	s0, s16, s15
 800d48c:	e7c2      	b.n	800d414 <__ieee754_log10f+0x1c>
 800d48e:	bf00      	nop
 800d490:	cc000000 	.word	0xcc000000
 800d494:	00000000 	.word	0x00000000
 800d498:	4c000000 	.word	0x4c000000
 800d49c:	3ede5bd9 	.word	0x3ede5bd9
 800d4a0:	355427db 	.word	0x355427db
 800d4a4:	3e9a2080 	.word	0x3e9a2080

0800d4a8 <__ieee754_sqrtf>:
 800d4a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d4ac:	4770      	bx	lr
	...

0800d4b0 <__kernel_cos>:
 800d4b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b4:	ec57 6b10 	vmov	r6, r7, d0
 800d4b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d4bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d4c0:	ed8d 1b00 	vstr	d1, [sp]
 800d4c4:	da07      	bge.n	800d4d6 <__kernel_cos+0x26>
 800d4c6:	ee10 0a10 	vmov	r0, s0
 800d4ca:	4639      	mov	r1, r7
 800d4cc:	f7f3 fb44 	bl	8000b58 <__aeabi_d2iz>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	f000 8088 	beq.w	800d5e6 <__kernel_cos+0x136>
 800d4d6:	4632      	mov	r2, r6
 800d4d8:	463b      	mov	r3, r7
 800d4da:	4630      	mov	r0, r6
 800d4dc:	4639      	mov	r1, r7
 800d4de:	f7f3 f88b 	bl	80005f8 <__aeabi_dmul>
 800d4e2:	4b51      	ldr	r3, [pc, #324]	; (800d628 <__kernel_cos+0x178>)
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	460d      	mov	r5, r1
 800d4ea:	f7f3 f885 	bl	80005f8 <__aeabi_dmul>
 800d4ee:	a340      	add	r3, pc, #256	; (adr r3, 800d5f0 <__kernel_cos+0x140>)
 800d4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f4:	4682      	mov	sl, r0
 800d4f6:	468b      	mov	fp, r1
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	4629      	mov	r1, r5
 800d4fc:	f7f3 f87c 	bl	80005f8 <__aeabi_dmul>
 800d500:	a33d      	add	r3, pc, #244	; (adr r3, 800d5f8 <__kernel_cos+0x148>)
 800d502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d506:	f7f2 fec1 	bl	800028c <__adddf3>
 800d50a:	4622      	mov	r2, r4
 800d50c:	462b      	mov	r3, r5
 800d50e:	f7f3 f873 	bl	80005f8 <__aeabi_dmul>
 800d512:	a33b      	add	r3, pc, #236	; (adr r3, 800d600 <__kernel_cos+0x150>)
 800d514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d518:	f7f2 feb6 	bl	8000288 <__aeabi_dsub>
 800d51c:	4622      	mov	r2, r4
 800d51e:	462b      	mov	r3, r5
 800d520:	f7f3 f86a 	bl	80005f8 <__aeabi_dmul>
 800d524:	a338      	add	r3, pc, #224	; (adr r3, 800d608 <__kernel_cos+0x158>)
 800d526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52a:	f7f2 feaf 	bl	800028c <__adddf3>
 800d52e:	4622      	mov	r2, r4
 800d530:	462b      	mov	r3, r5
 800d532:	f7f3 f861 	bl	80005f8 <__aeabi_dmul>
 800d536:	a336      	add	r3, pc, #216	; (adr r3, 800d610 <__kernel_cos+0x160>)
 800d538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53c:	f7f2 fea4 	bl	8000288 <__aeabi_dsub>
 800d540:	4622      	mov	r2, r4
 800d542:	462b      	mov	r3, r5
 800d544:	f7f3 f858 	bl	80005f8 <__aeabi_dmul>
 800d548:	a333      	add	r3, pc, #204	; (adr r3, 800d618 <__kernel_cos+0x168>)
 800d54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54e:	f7f2 fe9d 	bl	800028c <__adddf3>
 800d552:	4622      	mov	r2, r4
 800d554:	462b      	mov	r3, r5
 800d556:	f7f3 f84f 	bl	80005f8 <__aeabi_dmul>
 800d55a:	4622      	mov	r2, r4
 800d55c:	462b      	mov	r3, r5
 800d55e:	f7f3 f84b 	bl	80005f8 <__aeabi_dmul>
 800d562:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d566:	4604      	mov	r4, r0
 800d568:	460d      	mov	r5, r1
 800d56a:	4630      	mov	r0, r6
 800d56c:	4639      	mov	r1, r7
 800d56e:	f7f3 f843 	bl	80005f8 <__aeabi_dmul>
 800d572:	460b      	mov	r3, r1
 800d574:	4602      	mov	r2, r0
 800d576:	4629      	mov	r1, r5
 800d578:	4620      	mov	r0, r4
 800d57a:	f7f2 fe85 	bl	8000288 <__aeabi_dsub>
 800d57e:	4b2b      	ldr	r3, [pc, #172]	; (800d62c <__kernel_cos+0x17c>)
 800d580:	4598      	cmp	r8, r3
 800d582:	4606      	mov	r6, r0
 800d584:	460f      	mov	r7, r1
 800d586:	dc10      	bgt.n	800d5aa <__kernel_cos+0xfa>
 800d588:	4602      	mov	r2, r0
 800d58a:	460b      	mov	r3, r1
 800d58c:	4650      	mov	r0, sl
 800d58e:	4659      	mov	r1, fp
 800d590:	f7f2 fe7a 	bl	8000288 <__aeabi_dsub>
 800d594:	460b      	mov	r3, r1
 800d596:	4926      	ldr	r1, [pc, #152]	; (800d630 <__kernel_cos+0x180>)
 800d598:	4602      	mov	r2, r0
 800d59a:	2000      	movs	r0, #0
 800d59c:	f7f2 fe74 	bl	8000288 <__aeabi_dsub>
 800d5a0:	ec41 0b10 	vmov	d0, r0, r1
 800d5a4:	b003      	add	sp, #12
 800d5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5aa:	4b22      	ldr	r3, [pc, #136]	; (800d634 <__kernel_cos+0x184>)
 800d5ac:	4920      	ldr	r1, [pc, #128]	; (800d630 <__kernel_cos+0x180>)
 800d5ae:	4598      	cmp	r8, r3
 800d5b0:	bfcc      	ite	gt
 800d5b2:	4d21      	ldrgt	r5, [pc, #132]	; (800d638 <__kernel_cos+0x188>)
 800d5b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d5b8:	2400      	movs	r4, #0
 800d5ba:	4622      	mov	r2, r4
 800d5bc:	462b      	mov	r3, r5
 800d5be:	2000      	movs	r0, #0
 800d5c0:	f7f2 fe62 	bl	8000288 <__aeabi_dsub>
 800d5c4:	4622      	mov	r2, r4
 800d5c6:	4680      	mov	r8, r0
 800d5c8:	4689      	mov	r9, r1
 800d5ca:	462b      	mov	r3, r5
 800d5cc:	4650      	mov	r0, sl
 800d5ce:	4659      	mov	r1, fp
 800d5d0:	f7f2 fe5a 	bl	8000288 <__aeabi_dsub>
 800d5d4:	4632      	mov	r2, r6
 800d5d6:	463b      	mov	r3, r7
 800d5d8:	f7f2 fe56 	bl	8000288 <__aeabi_dsub>
 800d5dc:	4602      	mov	r2, r0
 800d5de:	460b      	mov	r3, r1
 800d5e0:	4640      	mov	r0, r8
 800d5e2:	4649      	mov	r1, r9
 800d5e4:	e7da      	b.n	800d59c <__kernel_cos+0xec>
 800d5e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d620 <__kernel_cos+0x170>
 800d5ea:	e7db      	b.n	800d5a4 <__kernel_cos+0xf4>
 800d5ec:	f3af 8000 	nop.w
 800d5f0:	be8838d4 	.word	0xbe8838d4
 800d5f4:	bda8fae9 	.word	0xbda8fae9
 800d5f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800d5fc:	3e21ee9e 	.word	0x3e21ee9e
 800d600:	809c52ad 	.word	0x809c52ad
 800d604:	3e927e4f 	.word	0x3e927e4f
 800d608:	19cb1590 	.word	0x19cb1590
 800d60c:	3efa01a0 	.word	0x3efa01a0
 800d610:	16c15177 	.word	0x16c15177
 800d614:	3f56c16c 	.word	0x3f56c16c
 800d618:	5555554c 	.word	0x5555554c
 800d61c:	3fa55555 	.word	0x3fa55555
 800d620:	00000000 	.word	0x00000000
 800d624:	3ff00000 	.word	0x3ff00000
 800d628:	3fe00000 	.word	0x3fe00000
 800d62c:	3fd33332 	.word	0x3fd33332
 800d630:	3ff00000 	.word	0x3ff00000
 800d634:	3fe90000 	.word	0x3fe90000
 800d638:	3fd20000 	.word	0x3fd20000
 800d63c:	00000000 	.word	0x00000000

0800d640 <__kernel_rem_pio2>:
 800d640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d644:	ed2d 8b02 	vpush	{d8}
 800d648:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d64c:	f112 0f14 	cmn.w	r2, #20
 800d650:	9308      	str	r3, [sp, #32]
 800d652:	9101      	str	r1, [sp, #4]
 800d654:	4bc4      	ldr	r3, [pc, #784]	; (800d968 <__kernel_rem_pio2+0x328>)
 800d656:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d658:	900b      	str	r0, [sp, #44]	; 0x2c
 800d65a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d65e:	9302      	str	r3, [sp, #8]
 800d660:	9b08      	ldr	r3, [sp, #32]
 800d662:	f103 33ff 	add.w	r3, r3, #4294967295
 800d666:	bfa8      	it	ge
 800d668:	1ed4      	subge	r4, r2, #3
 800d66a:	9306      	str	r3, [sp, #24]
 800d66c:	bfb2      	itee	lt
 800d66e:	2400      	movlt	r4, #0
 800d670:	2318      	movge	r3, #24
 800d672:	fb94 f4f3 	sdivge	r4, r4, r3
 800d676:	f06f 0317 	mvn.w	r3, #23
 800d67a:	fb04 3303 	mla	r3, r4, r3, r3
 800d67e:	eb03 0a02 	add.w	sl, r3, r2
 800d682:	9b02      	ldr	r3, [sp, #8]
 800d684:	9a06      	ldr	r2, [sp, #24]
 800d686:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d958 <__kernel_rem_pio2+0x318>
 800d68a:	eb03 0802 	add.w	r8, r3, r2
 800d68e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d690:	1aa7      	subs	r7, r4, r2
 800d692:	ae22      	add	r6, sp, #136	; 0x88
 800d694:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d698:	2500      	movs	r5, #0
 800d69a:	4545      	cmp	r5, r8
 800d69c:	dd13      	ble.n	800d6c6 <__kernel_rem_pio2+0x86>
 800d69e:	9b08      	ldr	r3, [sp, #32]
 800d6a0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800d958 <__kernel_rem_pio2+0x318>
 800d6a4:	aa22      	add	r2, sp, #136	; 0x88
 800d6a6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d6aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d6ae:	f04f 0800 	mov.w	r8, #0
 800d6b2:	9b02      	ldr	r3, [sp, #8]
 800d6b4:	4598      	cmp	r8, r3
 800d6b6:	dc2f      	bgt.n	800d718 <__kernel_rem_pio2+0xd8>
 800d6b8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d6bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d6c0:	462f      	mov	r7, r5
 800d6c2:	2600      	movs	r6, #0
 800d6c4:	e01b      	b.n	800d6fe <__kernel_rem_pio2+0xbe>
 800d6c6:	42ef      	cmn	r7, r5
 800d6c8:	d407      	bmi.n	800d6da <__kernel_rem_pio2+0x9a>
 800d6ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d6ce:	f7f2 ff29 	bl	8000524 <__aeabi_i2d>
 800d6d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d6d6:	3501      	adds	r5, #1
 800d6d8:	e7df      	b.n	800d69a <__kernel_rem_pio2+0x5a>
 800d6da:	ec51 0b18 	vmov	r0, r1, d8
 800d6de:	e7f8      	b.n	800d6d2 <__kernel_rem_pio2+0x92>
 800d6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d6e8:	f7f2 ff86 	bl	80005f8 <__aeabi_dmul>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6f4:	f7f2 fdca 	bl	800028c <__adddf3>
 800d6f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6fc:	3601      	adds	r6, #1
 800d6fe:	9b06      	ldr	r3, [sp, #24]
 800d700:	429e      	cmp	r6, r3
 800d702:	f1a7 0708 	sub.w	r7, r7, #8
 800d706:	ddeb      	ble.n	800d6e0 <__kernel_rem_pio2+0xa0>
 800d708:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d70c:	f108 0801 	add.w	r8, r8, #1
 800d710:	ecab 7b02 	vstmia	fp!, {d7}
 800d714:	3508      	adds	r5, #8
 800d716:	e7cc      	b.n	800d6b2 <__kernel_rem_pio2+0x72>
 800d718:	9b02      	ldr	r3, [sp, #8]
 800d71a:	aa0e      	add	r2, sp, #56	; 0x38
 800d71c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d720:	930d      	str	r3, [sp, #52]	; 0x34
 800d722:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d724:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d728:	9c02      	ldr	r4, [sp, #8]
 800d72a:	930c      	str	r3, [sp, #48]	; 0x30
 800d72c:	00e3      	lsls	r3, r4, #3
 800d72e:	930a      	str	r3, [sp, #40]	; 0x28
 800d730:	ab9a      	add	r3, sp, #616	; 0x268
 800d732:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d736:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d73a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d73e:	ab72      	add	r3, sp, #456	; 0x1c8
 800d740:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d744:	46c3      	mov	fp, r8
 800d746:	46a1      	mov	r9, r4
 800d748:	f1b9 0f00 	cmp.w	r9, #0
 800d74c:	f1a5 0508 	sub.w	r5, r5, #8
 800d750:	dc77      	bgt.n	800d842 <__kernel_rem_pio2+0x202>
 800d752:	ec47 6b10 	vmov	d0, r6, r7
 800d756:	4650      	mov	r0, sl
 800d758:	f000 fc0a 	bl	800df70 <scalbn>
 800d75c:	ec57 6b10 	vmov	r6, r7, d0
 800d760:	2200      	movs	r2, #0
 800d762:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d766:	ee10 0a10 	vmov	r0, s0
 800d76a:	4639      	mov	r1, r7
 800d76c:	f7f2 ff44 	bl	80005f8 <__aeabi_dmul>
 800d770:	ec41 0b10 	vmov	d0, r0, r1
 800d774:	f000 fb7c 	bl	800de70 <floor>
 800d778:	4b7c      	ldr	r3, [pc, #496]	; (800d96c <__kernel_rem_pio2+0x32c>)
 800d77a:	ec51 0b10 	vmov	r0, r1, d0
 800d77e:	2200      	movs	r2, #0
 800d780:	f7f2 ff3a 	bl	80005f8 <__aeabi_dmul>
 800d784:	4602      	mov	r2, r0
 800d786:	460b      	mov	r3, r1
 800d788:	4630      	mov	r0, r6
 800d78a:	4639      	mov	r1, r7
 800d78c:	f7f2 fd7c 	bl	8000288 <__aeabi_dsub>
 800d790:	460f      	mov	r7, r1
 800d792:	4606      	mov	r6, r0
 800d794:	f7f3 f9e0 	bl	8000b58 <__aeabi_d2iz>
 800d798:	9004      	str	r0, [sp, #16]
 800d79a:	f7f2 fec3 	bl	8000524 <__aeabi_i2d>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	4639      	mov	r1, r7
 800d7a6:	f7f2 fd6f 	bl	8000288 <__aeabi_dsub>
 800d7aa:	f1ba 0f00 	cmp.w	sl, #0
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	460f      	mov	r7, r1
 800d7b2:	dd6d      	ble.n	800d890 <__kernel_rem_pio2+0x250>
 800d7b4:	1e62      	subs	r2, r4, #1
 800d7b6:	ab0e      	add	r3, sp, #56	; 0x38
 800d7b8:	9d04      	ldr	r5, [sp, #16]
 800d7ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d7be:	f1ca 0118 	rsb	r1, sl, #24
 800d7c2:	fa40 f301 	asr.w	r3, r0, r1
 800d7c6:	441d      	add	r5, r3
 800d7c8:	408b      	lsls	r3, r1
 800d7ca:	1ac0      	subs	r0, r0, r3
 800d7cc:	ab0e      	add	r3, sp, #56	; 0x38
 800d7ce:	9504      	str	r5, [sp, #16]
 800d7d0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d7d4:	f1ca 0317 	rsb	r3, sl, #23
 800d7d8:	fa40 fb03 	asr.w	fp, r0, r3
 800d7dc:	f1bb 0f00 	cmp.w	fp, #0
 800d7e0:	dd65      	ble.n	800d8ae <__kernel_rem_pio2+0x26e>
 800d7e2:	9b04      	ldr	r3, [sp, #16]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	9304      	str	r3, [sp, #16]
 800d7ea:	4615      	mov	r5, r2
 800d7ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d7f0:	4294      	cmp	r4, r2
 800d7f2:	f300 809c 	bgt.w	800d92e <__kernel_rem_pio2+0x2ee>
 800d7f6:	f1ba 0f00 	cmp.w	sl, #0
 800d7fa:	dd07      	ble.n	800d80c <__kernel_rem_pio2+0x1cc>
 800d7fc:	f1ba 0f01 	cmp.w	sl, #1
 800d800:	f000 80c0 	beq.w	800d984 <__kernel_rem_pio2+0x344>
 800d804:	f1ba 0f02 	cmp.w	sl, #2
 800d808:	f000 80c6 	beq.w	800d998 <__kernel_rem_pio2+0x358>
 800d80c:	f1bb 0f02 	cmp.w	fp, #2
 800d810:	d14d      	bne.n	800d8ae <__kernel_rem_pio2+0x26e>
 800d812:	4632      	mov	r2, r6
 800d814:	463b      	mov	r3, r7
 800d816:	4956      	ldr	r1, [pc, #344]	; (800d970 <__kernel_rem_pio2+0x330>)
 800d818:	2000      	movs	r0, #0
 800d81a:	f7f2 fd35 	bl	8000288 <__aeabi_dsub>
 800d81e:	4606      	mov	r6, r0
 800d820:	460f      	mov	r7, r1
 800d822:	2d00      	cmp	r5, #0
 800d824:	d043      	beq.n	800d8ae <__kernel_rem_pio2+0x26e>
 800d826:	4650      	mov	r0, sl
 800d828:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d960 <__kernel_rem_pio2+0x320>
 800d82c:	f000 fba0 	bl	800df70 <scalbn>
 800d830:	4630      	mov	r0, r6
 800d832:	4639      	mov	r1, r7
 800d834:	ec53 2b10 	vmov	r2, r3, d0
 800d838:	f7f2 fd26 	bl	8000288 <__aeabi_dsub>
 800d83c:	4606      	mov	r6, r0
 800d83e:	460f      	mov	r7, r1
 800d840:	e035      	b.n	800d8ae <__kernel_rem_pio2+0x26e>
 800d842:	4b4c      	ldr	r3, [pc, #304]	; (800d974 <__kernel_rem_pio2+0x334>)
 800d844:	2200      	movs	r2, #0
 800d846:	4630      	mov	r0, r6
 800d848:	4639      	mov	r1, r7
 800d84a:	f7f2 fed5 	bl	80005f8 <__aeabi_dmul>
 800d84e:	f7f3 f983 	bl	8000b58 <__aeabi_d2iz>
 800d852:	f7f2 fe67 	bl	8000524 <__aeabi_i2d>
 800d856:	4602      	mov	r2, r0
 800d858:	460b      	mov	r3, r1
 800d85a:	ec43 2b18 	vmov	d8, r2, r3
 800d85e:	4b46      	ldr	r3, [pc, #280]	; (800d978 <__kernel_rem_pio2+0x338>)
 800d860:	2200      	movs	r2, #0
 800d862:	f7f2 fec9 	bl	80005f8 <__aeabi_dmul>
 800d866:	4602      	mov	r2, r0
 800d868:	460b      	mov	r3, r1
 800d86a:	4630      	mov	r0, r6
 800d86c:	4639      	mov	r1, r7
 800d86e:	f7f2 fd0b 	bl	8000288 <__aeabi_dsub>
 800d872:	f7f3 f971 	bl	8000b58 <__aeabi_d2iz>
 800d876:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d87a:	f84b 0b04 	str.w	r0, [fp], #4
 800d87e:	ec51 0b18 	vmov	r0, r1, d8
 800d882:	f7f2 fd03 	bl	800028c <__adddf3>
 800d886:	f109 39ff 	add.w	r9, r9, #4294967295
 800d88a:	4606      	mov	r6, r0
 800d88c:	460f      	mov	r7, r1
 800d88e:	e75b      	b.n	800d748 <__kernel_rem_pio2+0x108>
 800d890:	d106      	bne.n	800d8a0 <__kernel_rem_pio2+0x260>
 800d892:	1e63      	subs	r3, r4, #1
 800d894:	aa0e      	add	r2, sp, #56	; 0x38
 800d896:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d89a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d89e:	e79d      	b.n	800d7dc <__kernel_rem_pio2+0x19c>
 800d8a0:	4b36      	ldr	r3, [pc, #216]	; (800d97c <__kernel_rem_pio2+0x33c>)
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f7f3 f92e 	bl	8000b04 <__aeabi_dcmpge>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	d13d      	bne.n	800d928 <__kernel_rem_pio2+0x2e8>
 800d8ac:	4683      	mov	fp, r0
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	4639      	mov	r1, r7
 800d8b6:	f7f3 f907 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	f000 80c0 	beq.w	800da40 <__kernel_rem_pio2+0x400>
 800d8c0:	1e65      	subs	r5, r4, #1
 800d8c2:	462b      	mov	r3, r5
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	9902      	ldr	r1, [sp, #8]
 800d8c8:	428b      	cmp	r3, r1
 800d8ca:	da6c      	bge.n	800d9a6 <__kernel_rem_pio2+0x366>
 800d8cc:	2a00      	cmp	r2, #0
 800d8ce:	f000 8089 	beq.w	800d9e4 <__kernel_rem_pio2+0x3a4>
 800d8d2:	ab0e      	add	r3, sp, #56	; 0x38
 800d8d4:	f1aa 0a18 	sub.w	sl, sl, #24
 800d8d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f000 80ad 	beq.w	800da3c <__kernel_rem_pio2+0x3fc>
 800d8e2:	4650      	mov	r0, sl
 800d8e4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800d960 <__kernel_rem_pio2+0x320>
 800d8e8:	f000 fb42 	bl	800df70 <scalbn>
 800d8ec:	ab9a      	add	r3, sp, #616	; 0x268
 800d8ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d8f2:	ec57 6b10 	vmov	r6, r7, d0
 800d8f6:	00ec      	lsls	r4, r5, #3
 800d8f8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800d8fc:	46aa      	mov	sl, r5
 800d8fe:	f1ba 0f00 	cmp.w	sl, #0
 800d902:	f280 80d6 	bge.w	800dab2 <__kernel_rem_pio2+0x472>
 800d906:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800d958 <__kernel_rem_pio2+0x318>
 800d90a:	462e      	mov	r6, r5
 800d90c:	2e00      	cmp	r6, #0
 800d90e:	f2c0 8104 	blt.w	800db1a <__kernel_rem_pio2+0x4da>
 800d912:	ab72      	add	r3, sp, #456	; 0x1c8
 800d914:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d918:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d980 <__kernel_rem_pio2+0x340>
 800d91c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800d920:	f04f 0800 	mov.w	r8, #0
 800d924:	1baf      	subs	r7, r5, r6
 800d926:	e0ea      	b.n	800dafe <__kernel_rem_pio2+0x4be>
 800d928:	f04f 0b02 	mov.w	fp, #2
 800d92c:	e759      	b.n	800d7e2 <__kernel_rem_pio2+0x1a2>
 800d92e:	f8d8 3000 	ldr.w	r3, [r8]
 800d932:	b955      	cbnz	r5, 800d94a <__kernel_rem_pio2+0x30a>
 800d934:	b123      	cbz	r3, 800d940 <__kernel_rem_pio2+0x300>
 800d936:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d93a:	f8c8 3000 	str.w	r3, [r8]
 800d93e:	2301      	movs	r3, #1
 800d940:	3201      	adds	r2, #1
 800d942:	f108 0804 	add.w	r8, r8, #4
 800d946:	461d      	mov	r5, r3
 800d948:	e752      	b.n	800d7f0 <__kernel_rem_pio2+0x1b0>
 800d94a:	1acb      	subs	r3, r1, r3
 800d94c:	f8c8 3000 	str.w	r3, [r8]
 800d950:	462b      	mov	r3, r5
 800d952:	e7f5      	b.n	800d940 <__kernel_rem_pio2+0x300>
 800d954:	f3af 8000 	nop.w
	...
 800d964:	3ff00000 	.word	0x3ff00000
 800d968:	08022388 	.word	0x08022388
 800d96c:	40200000 	.word	0x40200000
 800d970:	3ff00000 	.word	0x3ff00000
 800d974:	3e700000 	.word	0x3e700000
 800d978:	41700000 	.word	0x41700000
 800d97c:	3fe00000 	.word	0x3fe00000
 800d980:	08022348 	.word	0x08022348
 800d984:	1e62      	subs	r2, r4, #1
 800d986:	ab0e      	add	r3, sp, #56	; 0x38
 800d988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d98c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d990:	a90e      	add	r1, sp, #56	; 0x38
 800d992:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d996:	e739      	b.n	800d80c <__kernel_rem_pio2+0x1cc>
 800d998:	1e62      	subs	r2, r4, #1
 800d99a:	ab0e      	add	r3, sp, #56	; 0x38
 800d99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d9a4:	e7f4      	b.n	800d990 <__kernel_rem_pio2+0x350>
 800d9a6:	a90e      	add	r1, sp, #56	; 0x38
 800d9a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	430a      	orrs	r2, r1
 800d9b0:	e789      	b.n	800d8c6 <__kernel_rem_pio2+0x286>
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d9b8:	2900      	cmp	r1, #0
 800d9ba:	d0fa      	beq.n	800d9b2 <__kernel_rem_pio2+0x372>
 800d9bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9be:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800d9c2:	446a      	add	r2, sp
 800d9c4:	3a98      	subs	r2, #152	; 0x98
 800d9c6:	920a      	str	r2, [sp, #40]	; 0x28
 800d9c8:	9a08      	ldr	r2, [sp, #32]
 800d9ca:	18e3      	adds	r3, r4, r3
 800d9cc:	18a5      	adds	r5, r4, r2
 800d9ce:	aa22      	add	r2, sp, #136	; 0x88
 800d9d0:	f104 0801 	add.w	r8, r4, #1
 800d9d4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d9d8:	9304      	str	r3, [sp, #16]
 800d9da:	9b04      	ldr	r3, [sp, #16]
 800d9dc:	4543      	cmp	r3, r8
 800d9de:	da04      	bge.n	800d9ea <__kernel_rem_pio2+0x3aa>
 800d9e0:	461c      	mov	r4, r3
 800d9e2:	e6a3      	b.n	800d72c <__kernel_rem_pio2+0xec>
 800d9e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	e7e4      	b.n	800d9b4 <__kernel_rem_pio2+0x374>
 800d9ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d9f0:	f7f2 fd98 	bl	8000524 <__aeabi_i2d>
 800d9f4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9fa:	46ab      	mov	fp, r5
 800d9fc:	461c      	mov	r4, r3
 800d9fe:	f04f 0900 	mov.w	r9, #0
 800da02:	2600      	movs	r6, #0
 800da04:	2700      	movs	r7, #0
 800da06:	9b06      	ldr	r3, [sp, #24]
 800da08:	4599      	cmp	r9, r3
 800da0a:	dd06      	ble.n	800da1a <__kernel_rem_pio2+0x3da>
 800da0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da0e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800da12:	f108 0801 	add.w	r8, r8, #1
 800da16:	930a      	str	r3, [sp, #40]	; 0x28
 800da18:	e7df      	b.n	800d9da <__kernel_rem_pio2+0x39a>
 800da1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800da1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800da22:	f7f2 fde9 	bl	80005f8 <__aeabi_dmul>
 800da26:	4602      	mov	r2, r0
 800da28:	460b      	mov	r3, r1
 800da2a:	4630      	mov	r0, r6
 800da2c:	4639      	mov	r1, r7
 800da2e:	f7f2 fc2d 	bl	800028c <__adddf3>
 800da32:	f109 0901 	add.w	r9, r9, #1
 800da36:	4606      	mov	r6, r0
 800da38:	460f      	mov	r7, r1
 800da3a:	e7e4      	b.n	800da06 <__kernel_rem_pio2+0x3c6>
 800da3c:	3d01      	subs	r5, #1
 800da3e:	e748      	b.n	800d8d2 <__kernel_rem_pio2+0x292>
 800da40:	ec47 6b10 	vmov	d0, r6, r7
 800da44:	f1ca 0000 	rsb	r0, sl, #0
 800da48:	f000 fa92 	bl	800df70 <scalbn>
 800da4c:	ec57 6b10 	vmov	r6, r7, d0
 800da50:	4ba0      	ldr	r3, [pc, #640]	; (800dcd4 <__kernel_rem_pio2+0x694>)
 800da52:	ee10 0a10 	vmov	r0, s0
 800da56:	2200      	movs	r2, #0
 800da58:	4639      	mov	r1, r7
 800da5a:	f7f3 f853 	bl	8000b04 <__aeabi_dcmpge>
 800da5e:	b1f8      	cbz	r0, 800daa0 <__kernel_rem_pio2+0x460>
 800da60:	4b9d      	ldr	r3, [pc, #628]	; (800dcd8 <__kernel_rem_pio2+0x698>)
 800da62:	2200      	movs	r2, #0
 800da64:	4630      	mov	r0, r6
 800da66:	4639      	mov	r1, r7
 800da68:	f7f2 fdc6 	bl	80005f8 <__aeabi_dmul>
 800da6c:	f7f3 f874 	bl	8000b58 <__aeabi_d2iz>
 800da70:	4680      	mov	r8, r0
 800da72:	f7f2 fd57 	bl	8000524 <__aeabi_i2d>
 800da76:	4b97      	ldr	r3, [pc, #604]	; (800dcd4 <__kernel_rem_pio2+0x694>)
 800da78:	2200      	movs	r2, #0
 800da7a:	f7f2 fdbd 	bl	80005f8 <__aeabi_dmul>
 800da7e:	460b      	mov	r3, r1
 800da80:	4602      	mov	r2, r0
 800da82:	4639      	mov	r1, r7
 800da84:	4630      	mov	r0, r6
 800da86:	f7f2 fbff 	bl	8000288 <__aeabi_dsub>
 800da8a:	f7f3 f865 	bl	8000b58 <__aeabi_d2iz>
 800da8e:	1c65      	adds	r5, r4, #1
 800da90:	ab0e      	add	r3, sp, #56	; 0x38
 800da92:	f10a 0a18 	add.w	sl, sl, #24
 800da96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800da9a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800da9e:	e720      	b.n	800d8e2 <__kernel_rem_pio2+0x2a2>
 800daa0:	4630      	mov	r0, r6
 800daa2:	4639      	mov	r1, r7
 800daa4:	f7f3 f858 	bl	8000b58 <__aeabi_d2iz>
 800daa8:	ab0e      	add	r3, sp, #56	; 0x38
 800daaa:	4625      	mov	r5, r4
 800daac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dab0:	e717      	b.n	800d8e2 <__kernel_rem_pio2+0x2a2>
 800dab2:	ab0e      	add	r3, sp, #56	; 0x38
 800dab4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800dab8:	f7f2 fd34 	bl	8000524 <__aeabi_i2d>
 800dabc:	4632      	mov	r2, r6
 800dabe:	463b      	mov	r3, r7
 800dac0:	f7f2 fd9a 	bl	80005f8 <__aeabi_dmul>
 800dac4:	4b84      	ldr	r3, [pc, #528]	; (800dcd8 <__kernel_rem_pio2+0x698>)
 800dac6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800daca:	2200      	movs	r2, #0
 800dacc:	4630      	mov	r0, r6
 800dace:	4639      	mov	r1, r7
 800dad0:	f7f2 fd92 	bl	80005f8 <__aeabi_dmul>
 800dad4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dad8:	4606      	mov	r6, r0
 800dada:	460f      	mov	r7, r1
 800dadc:	e70f      	b.n	800d8fe <__kernel_rem_pio2+0x2be>
 800dade:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800dae2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800dae6:	f7f2 fd87 	bl	80005f8 <__aeabi_dmul>
 800daea:	4602      	mov	r2, r0
 800daec:	460b      	mov	r3, r1
 800daee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800daf2:	f7f2 fbcb 	bl	800028c <__adddf3>
 800daf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dafa:	f108 0801 	add.w	r8, r8, #1
 800dafe:	9b02      	ldr	r3, [sp, #8]
 800db00:	4598      	cmp	r8, r3
 800db02:	dc01      	bgt.n	800db08 <__kernel_rem_pio2+0x4c8>
 800db04:	45b8      	cmp	r8, r7
 800db06:	ddea      	ble.n	800dade <__kernel_rem_pio2+0x49e>
 800db08:	ed9d 7b06 	vldr	d7, [sp, #24]
 800db0c:	ab4a      	add	r3, sp, #296	; 0x128
 800db0e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800db12:	ed87 7b00 	vstr	d7, [r7]
 800db16:	3e01      	subs	r6, #1
 800db18:	e6f8      	b.n	800d90c <__kernel_rem_pio2+0x2cc>
 800db1a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800db1c:	2b02      	cmp	r3, #2
 800db1e:	dc0b      	bgt.n	800db38 <__kernel_rem_pio2+0x4f8>
 800db20:	2b00      	cmp	r3, #0
 800db22:	dc35      	bgt.n	800db90 <__kernel_rem_pio2+0x550>
 800db24:	d059      	beq.n	800dbda <__kernel_rem_pio2+0x59a>
 800db26:	9b04      	ldr	r3, [sp, #16]
 800db28:	f003 0007 	and.w	r0, r3, #7
 800db2c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800db30:	ecbd 8b02 	vpop	{d8}
 800db34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db38:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800db3a:	2b03      	cmp	r3, #3
 800db3c:	d1f3      	bne.n	800db26 <__kernel_rem_pio2+0x4e6>
 800db3e:	ab4a      	add	r3, sp, #296	; 0x128
 800db40:	4423      	add	r3, r4
 800db42:	9306      	str	r3, [sp, #24]
 800db44:	461c      	mov	r4, r3
 800db46:	469a      	mov	sl, r3
 800db48:	9502      	str	r5, [sp, #8]
 800db4a:	9b02      	ldr	r3, [sp, #8]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	f1aa 0a08 	sub.w	sl, sl, #8
 800db52:	dc6b      	bgt.n	800dc2c <__kernel_rem_pio2+0x5ec>
 800db54:	46aa      	mov	sl, r5
 800db56:	f1ba 0f01 	cmp.w	sl, #1
 800db5a:	f1a4 0408 	sub.w	r4, r4, #8
 800db5e:	f300 8085 	bgt.w	800dc6c <__kernel_rem_pio2+0x62c>
 800db62:	9c06      	ldr	r4, [sp, #24]
 800db64:	2000      	movs	r0, #0
 800db66:	3408      	adds	r4, #8
 800db68:	2100      	movs	r1, #0
 800db6a:	2d01      	cmp	r5, #1
 800db6c:	f300 809d 	bgt.w	800dcaa <__kernel_rem_pio2+0x66a>
 800db70:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800db74:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800db78:	f1bb 0f00 	cmp.w	fp, #0
 800db7c:	f040 809b 	bne.w	800dcb6 <__kernel_rem_pio2+0x676>
 800db80:	9b01      	ldr	r3, [sp, #4]
 800db82:	e9c3 5600 	strd	r5, r6, [r3]
 800db86:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800db8a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800db8e:	e7ca      	b.n	800db26 <__kernel_rem_pio2+0x4e6>
 800db90:	3408      	adds	r4, #8
 800db92:	ab4a      	add	r3, sp, #296	; 0x128
 800db94:	441c      	add	r4, r3
 800db96:	462e      	mov	r6, r5
 800db98:	2000      	movs	r0, #0
 800db9a:	2100      	movs	r1, #0
 800db9c:	2e00      	cmp	r6, #0
 800db9e:	da36      	bge.n	800dc0e <__kernel_rem_pio2+0x5ce>
 800dba0:	f1bb 0f00 	cmp.w	fp, #0
 800dba4:	d039      	beq.n	800dc1a <__kernel_rem_pio2+0x5da>
 800dba6:	4602      	mov	r2, r0
 800dba8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbac:	9c01      	ldr	r4, [sp, #4]
 800dbae:	e9c4 2300 	strd	r2, r3, [r4]
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800dbba:	f7f2 fb65 	bl	8000288 <__aeabi_dsub>
 800dbbe:	ae4c      	add	r6, sp, #304	; 0x130
 800dbc0:	2401      	movs	r4, #1
 800dbc2:	42a5      	cmp	r5, r4
 800dbc4:	da2c      	bge.n	800dc20 <__kernel_rem_pio2+0x5e0>
 800dbc6:	f1bb 0f00 	cmp.w	fp, #0
 800dbca:	d002      	beq.n	800dbd2 <__kernel_rem_pio2+0x592>
 800dbcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	9b01      	ldr	r3, [sp, #4]
 800dbd4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dbd8:	e7a5      	b.n	800db26 <__kernel_rem_pio2+0x4e6>
 800dbda:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800dbde:	eb0d 0403 	add.w	r4, sp, r3
 800dbe2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	2100      	movs	r1, #0
 800dbea:	2d00      	cmp	r5, #0
 800dbec:	da09      	bge.n	800dc02 <__kernel_rem_pio2+0x5c2>
 800dbee:	f1bb 0f00 	cmp.w	fp, #0
 800dbf2:	d002      	beq.n	800dbfa <__kernel_rem_pio2+0x5ba>
 800dbf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	9b01      	ldr	r3, [sp, #4]
 800dbfc:	e9c3 0100 	strd	r0, r1, [r3]
 800dc00:	e791      	b.n	800db26 <__kernel_rem_pio2+0x4e6>
 800dc02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dc06:	f7f2 fb41 	bl	800028c <__adddf3>
 800dc0a:	3d01      	subs	r5, #1
 800dc0c:	e7ed      	b.n	800dbea <__kernel_rem_pio2+0x5aa>
 800dc0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dc12:	f7f2 fb3b 	bl	800028c <__adddf3>
 800dc16:	3e01      	subs	r6, #1
 800dc18:	e7c0      	b.n	800db9c <__kernel_rem_pio2+0x55c>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	e7c5      	b.n	800dbac <__kernel_rem_pio2+0x56c>
 800dc20:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800dc24:	f7f2 fb32 	bl	800028c <__adddf3>
 800dc28:	3401      	adds	r4, #1
 800dc2a:	e7ca      	b.n	800dbc2 <__kernel_rem_pio2+0x582>
 800dc2c:	e9da 8900 	ldrd	r8, r9, [sl]
 800dc30:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800dc34:	9b02      	ldr	r3, [sp, #8]
 800dc36:	3b01      	subs	r3, #1
 800dc38:	9302      	str	r3, [sp, #8]
 800dc3a:	4632      	mov	r2, r6
 800dc3c:	463b      	mov	r3, r7
 800dc3e:	4640      	mov	r0, r8
 800dc40:	4649      	mov	r1, r9
 800dc42:	f7f2 fb23 	bl	800028c <__adddf3>
 800dc46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	4640      	mov	r0, r8
 800dc50:	4649      	mov	r1, r9
 800dc52:	f7f2 fb19 	bl	8000288 <__aeabi_dsub>
 800dc56:	4632      	mov	r2, r6
 800dc58:	463b      	mov	r3, r7
 800dc5a:	f7f2 fb17 	bl	800028c <__adddf3>
 800dc5e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800dc62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dc66:	ed8a 7b00 	vstr	d7, [sl]
 800dc6a:	e76e      	b.n	800db4a <__kernel_rem_pio2+0x50a>
 800dc6c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800dc70:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800dc74:	4640      	mov	r0, r8
 800dc76:	4632      	mov	r2, r6
 800dc78:	463b      	mov	r3, r7
 800dc7a:	4649      	mov	r1, r9
 800dc7c:	f7f2 fb06 	bl	800028c <__adddf3>
 800dc80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc84:	4602      	mov	r2, r0
 800dc86:	460b      	mov	r3, r1
 800dc88:	4640      	mov	r0, r8
 800dc8a:	4649      	mov	r1, r9
 800dc8c:	f7f2 fafc 	bl	8000288 <__aeabi_dsub>
 800dc90:	4632      	mov	r2, r6
 800dc92:	463b      	mov	r3, r7
 800dc94:	f7f2 fafa 	bl	800028c <__adddf3>
 800dc98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dca0:	ed84 7b00 	vstr	d7, [r4]
 800dca4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dca8:	e755      	b.n	800db56 <__kernel_rem_pio2+0x516>
 800dcaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dcae:	f7f2 faed 	bl	800028c <__adddf3>
 800dcb2:	3d01      	subs	r5, #1
 800dcb4:	e759      	b.n	800db6a <__kernel_rem_pio2+0x52a>
 800dcb6:	9b01      	ldr	r3, [sp, #4]
 800dcb8:	9a01      	ldr	r2, [sp, #4]
 800dcba:	601d      	str	r5, [r3, #0]
 800dcbc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800dcc0:	605c      	str	r4, [r3, #4]
 800dcc2:	609f      	str	r7, [r3, #8]
 800dcc4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800dcc8:	60d3      	str	r3, [r2, #12]
 800dcca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dcce:	6110      	str	r0, [r2, #16]
 800dcd0:	6153      	str	r3, [r2, #20]
 800dcd2:	e728      	b.n	800db26 <__kernel_rem_pio2+0x4e6>
 800dcd4:	41700000 	.word	0x41700000
 800dcd8:	3e700000 	.word	0x3e700000
 800dcdc:	00000000 	.word	0x00000000

0800dce0 <__kernel_sin>:
 800dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce4:	ed2d 8b04 	vpush	{d8-d9}
 800dce8:	eeb0 8a41 	vmov.f32	s16, s2
 800dcec:	eef0 8a61 	vmov.f32	s17, s3
 800dcf0:	ec55 4b10 	vmov	r4, r5, d0
 800dcf4:	b083      	sub	sp, #12
 800dcf6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dcfa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dcfe:	9001      	str	r0, [sp, #4]
 800dd00:	da06      	bge.n	800dd10 <__kernel_sin+0x30>
 800dd02:	ee10 0a10 	vmov	r0, s0
 800dd06:	4629      	mov	r1, r5
 800dd08:	f7f2 ff26 	bl	8000b58 <__aeabi_d2iz>
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	d051      	beq.n	800ddb4 <__kernel_sin+0xd4>
 800dd10:	4622      	mov	r2, r4
 800dd12:	462b      	mov	r3, r5
 800dd14:	4620      	mov	r0, r4
 800dd16:	4629      	mov	r1, r5
 800dd18:	f7f2 fc6e 	bl	80005f8 <__aeabi_dmul>
 800dd1c:	4682      	mov	sl, r0
 800dd1e:	468b      	mov	fp, r1
 800dd20:	4602      	mov	r2, r0
 800dd22:	460b      	mov	r3, r1
 800dd24:	4620      	mov	r0, r4
 800dd26:	4629      	mov	r1, r5
 800dd28:	f7f2 fc66 	bl	80005f8 <__aeabi_dmul>
 800dd2c:	a341      	add	r3, pc, #260	; (adr r3, 800de34 <__kernel_sin+0x154>)
 800dd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd32:	4680      	mov	r8, r0
 800dd34:	4689      	mov	r9, r1
 800dd36:	4650      	mov	r0, sl
 800dd38:	4659      	mov	r1, fp
 800dd3a:	f7f2 fc5d 	bl	80005f8 <__aeabi_dmul>
 800dd3e:	a33f      	add	r3, pc, #252	; (adr r3, 800de3c <__kernel_sin+0x15c>)
 800dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd44:	f7f2 faa0 	bl	8000288 <__aeabi_dsub>
 800dd48:	4652      	mov	r2, sl
 800dd4a:	465b      	mov	r3, fp
 800dd4c:	f7f2 fc54 	bl	80005f8 <__aeabi_dmul>
 800dd50:	a33c      	add	r3, pc, #240	; (adr r3, 800de44 <__kernel_sin+0x164>)
 800dd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd56:	f7f2 fa99 	bl	800028c <__adddf3>
 800dd5a:	4652      	mov	r2, sl
 800dd5c:	465b      	mov	r3, fp
 800dd5e:	f7f2 fc4b 	bl	80005f8 <__aeabi_dmul>
 800dd62:	a33a      	add	r3, pc, #232	; (adr r3, 800de4c <__kernel_sin+0x16c>)
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	f7f2 fa8e 	bl	8000288 <__aeabi_dsub>
 800dd6c:	4652      	mov	r2, sl
 800dd6e:	465b      	mov	r3, fp
 800dd70:	f7f2 fc42 	bl	80005f8 <__aeabi_dmul>
 800dd74:	a337      	add	r3, pc, #220	; (adr r3, 800de54 <__kernel_sin+0x174>)
 800dd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7a:	f7f2 fa87 	bl	800028c <__adddf3>
 800dd7e:	9b01      	ldr	r3, [sp, #4]
 800dd80:	4606      	mov	r6, r0
 800dd82:	460f      	mov	r7, r1
 800dd84:	b9eb      	cbnz	r3, 800ddc2 <__kernel_sin+0xe2>
 800dd86:	4602      	mov	r2, r0
 800dd88:	460b      	mov	r3, r1
 800dd8a:	4650      	mov	r0, sl
 800dd8c:	4659      	mov	r1, fp
 800dd8e:	f7f2 fc33 	bl	80005f8 <__aeabi_dmul>
 800dd92:	a325      	add	r3, pc, #148	; (adr r3, 800de28 <__kernel_sin+0x148>)
 800dd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd98:	f7f2 fa76 	bl	8000288 <__aeabi_dsub>
 800dd9c:	4642      	mov	r2, r8
 800dd9e:	464b      	mov	r3, r9
 800dda0:	f7f2 fc2a 	bl	80005f8 <__aeabi_dmul>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	4620      	mov	r0, r4
 800ddaa:	4629      	mov	r1, r5
 800ddac:	f7f2 fa6e 	bl	800028c <__adddf3>
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	460d      	mov	r5, r1
 800ddb4:	ec45 4b10 	vmov	d0, r4, r5
 800ddb8:	b003      	add	sp, #12
 800ddba:	ecbd 8b04 	vpop	{d8-d9}
 800ddbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc2:	4b1b      	ldr	r3, [pc, #108]	; (800de30 <__kernel_sin+0x150>)
 800ddc4:	ec51 0b18 	vmov	r0, r1, d8
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f7f2 fc15 	bl	80005f8 <__aeabi_dmul>
 800ddce:	4632      	mov	r2, r6
 800ddd0:	ec41 0b19 	vmov	d9, r0, r1
 800ddd4:	463b      	mov	r3, r7
 800ddd6:	4640      	mov	r0, r8
 800ddd8:	4649      	mov	r1, r9
 800ddda:	f7f2 fc0d 	bl	80005f8 <__aeabi_dmul>
 800ddde:	4602      	mov	r2, r0
 800dde0:	460b      	mov	r3, r1
 800dde2:	ec51 0b19 	vmov	r0, r1, d9
 800dde6:	f7f2 fa4f 	bl	8000288 <__aeabi_dsub>
 800ddea:	4652      	mov	r2, sl
 800ddec:	465b      	mov	r3, fp
 800ddee:	f7f2 fc03 	bl	80005f8 <__aeabi_dmul>
 800ddf2:	ec53 2b18 	vmov	r2, r3, d8
 800ddf6:	f7f2 fa47 	bl	8000288 <__aeabi_dsub>
 800ddfa:	a30b      	add	r3, pc, #44	; (adr r3, 800de28 <__kernel_sin+0x148>)
 800ddfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de00:	4606      	mov	r6, r0
 800de02:	460f      	mov	r7, r1
 800de04:	4640      	mov	r0, r8
 800de06:	4649      	mov	r1, r9
 800de08:	f7f2 fbf6 	bl	80005f8 <__aeabi_dmul>
 800de0c:	4602      	mov	r2, r0
 800de0e:	460b      	mov	r3, r1
 800de10:	4630      	mov	r0, r6
 800de12:	4639      	mov	r1, r7
 800de14:	f7f2 fa3a 	bl	800028c <__adddf3>
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	4620      	mov	r0, r4
 800de1e:	4629      	mov	r1, r5
 800de20:	f7f2 fa32 	bl	8000288 <__aeabi_dsub>
 800de24:	e7c4      	b.n	800ddb0 <__kernel_sin+0xd0>
 800de26:	bf00      	nop
 800de28:	55555549 	.word	0x55555549
 800de2c:	3fc55555 	.word	0x3fc55555
 800de30:	3fe00000 	.word	0x3fe00000
 800de34:	5acfd57c 	.word	0x5acfd57c
 800de38:	3de5d93a 	.word	0x3de5d93a
 800de3c:	8a2b9ceb 	.word	0x8a2b9ceb
 800de40:	3e5ae5e6 	.word	0x3e5ae5e6
 800de44:	57b1fe7d 	.word	0x57b1fe7d
 800de48:	3ec71de3 	.word	0x3ec71de3
 800de4c:	19c161d5 	.word	0x19c161d5
 800de50:	3f2a01a0 	.word	0x3f2a01a0
 800de54:	1110f8a6 	.word	0x1110f8a6
 800de58:	3f811111 	.word	0x3f811111

0800de5c <fabs>:
 800de5c:	ec51 0b10 	vmov	r0, r1, d0
 800de60:	ee10 2a10 	vmov	r2, s0
 800de64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800de68:	ec43 2b10 	vmov	d0, r2, r3
 800de6c:	4770      	bx	lr
	...

0800de70 <floor>:
 800de70:	ec51 0b10 	vmov	r0, r1, d0
 800de74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de78:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800de7c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800de80:	2e13      	cmp	r6, #19
 800de82:	ee10 5a10 	vmov	r5, s0
 800de86:	ee10 8a10 	vmov	r8, s0
 800de8a:	460c      	mov	r4, r1
 800de8c:	dc32      	bgt.n	800def4 <floor+0x84>
 800de8e:	2e00      	cmp	r6, #0
 800de90:	da14      	bge.n	800debc <floor+0x4c>
 800de92:	a333      	add	r3, pc, #204	; (adr r3, 800df60 <floor+0xf0>)
 800de94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de98:	f7f2 f9f8 	bl	800028c <__adddf3>
 800de9c:	2200      	movs	r2, #0
 800de9e:	2300      	movs	r3, #0
 800dea0:	f7f2 fe3a 	bl	8000b18 <__aeabi_dcmpgt>
 800dea4:	b138      	cbz	r0, 800deb6 <floor+0x46>
 800dea6:	2c00      	cmp	r4, #0
 800dea8:	da57      	bge.n	800df5a <floor+0xea>
 800deaa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800deae:	431d      	orrs	r5, r3
 800deb0:	d001      	beq.n	800deb6 <floor+0x46>
 800deb2:	4c2d      	ldr	r4, [pc, #180]	; (800df68 <floor+0xf8>)
 800deb4:	2500      	movs	r5, #0
 800deb6:	4621      	mov	r1, r4
 800deb8:	4628      	mov	r0, r5
 800deba:	e025      	b.n	800df08 <floor+0x98>
 800debc:	4f2b      	ldr	r7, [pc, #172]	; (800df6c <floor+0xfc>)
 800debe:	4137      	asrs	r7, r6
 800dec0:	ea01 0307 	and.w	r3, r1, r7
 800dec4:	4303      	orrs	r3, r0
 800dec6:	d01f      	beq.n	800df08 <floor+0x98>
 800dec8:	a325      	add	r3, pc, #148	; (adr r3, 800df60 <floor+0xf0>)
 800deca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dece:	f7f2 f9dd 	bl	800028c <__adddf3>
 800ded2:	2200      	movs	r2, #0
 800ded4:	2300      	movs	r3, #0
 800ded6:	f7f2 fe1f 	bl	8000b18 <__aeabi_dcmpgt>
 800deda:	2800      	cmp	r0, #0
 800dedc:	d0eb      	beq.n	800deb6 <floor+0x46>
 800dede:	2c00      	cmp	r4, #0
 800dee0:	bfbe      	ittt	lt
 800dee2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dee6:	fa43 f606 	asrlt.w	r6, r3, r6
 800deea:	19a4      	addlt	r4, r4, r6
 800deec:	ea24 0407 	bic.w	r4, r4, r7
 800def0:	2500      	movs	r5, #0
 800def2:	e7e0      	b.n	800deb6 <floor+0x46>
 800def4:	2e33      	cmp	r6, #51	; 0x33
 800def6:	dd0b      	ble.n	800df10 <floor+0xa0>
 800def8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800defc:	d104      	bne.n	800df08 <floor+0x98>
 800defe:	ee10 2a10 	vmov	r2, s0
 800df02:	460b      	mov	r3, r1
 800df04:	f7f2 f9c2 	bl	800028c <__adddf3>
 800df08:	ec41 0b10 	vmov	d0, r0, r1
 800df0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df10:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800df14:	f04f 33ff 	mov.w	r3, #4294967295
 800df18:	fa23 f707 	lsr.w	r7, r3, r7
 800df1c:	4207      	tst	r7, r0
 800df1e:	d0f3      	beq.n	800df08 <floor+0x98>
 800df20:	a30f      	add	r3, pc, #60	; (adr r3, 800df60 <floor+0xf0>)
 800df22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df26:	f7f2 f9b1 	bl	800028c <__adddf3>
 800df2a:	2200      	movs	r2, #0
 800df2c:	2300      	movs	r3, #0
 800df2e:	f7f2 fdf3 	bl	8000b18 <__aeabi_dcmpgt>
 800df32:	2800      	cmp	r0, #0
 800df34:	d0bf      	beq.n	800deb6 <floor+0x46>
 800df36:	2c00      	cmp	r4, #0
 800df38:	da02      	bge.n	800df40 <floor+0xd0>
 800df3a:	2e14      	cmp	r6, #20
 800df3c:	d103      	bne.n	800df46 <floor+0xd6>
 800df3e:	3401      	adds	r4, #1
 800df40:	ea25 0507 	bic.w	r5, r5, r7
 800df44:	e7b7      	b.n	800deb6 <floor+0x46>
 800df46:	2301      	movs	r3, #1
 800df48:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800df4c:	fa03 f606 	lsl.w	r6, r3, r6
 800df50:	4435      	add	r5, r6
 800df52:	4545      	cmp	r5, r8
 800df54:	bf38      	it	cc
 800df56:	18e4      	addcc	r4, r4, r3
 800df58:	e7f2      	b.n	800df40 <floor+0xd0>
 800df5a:	2500      	movs	r5, #0
 800df5c:	462c      	mov	r4, r5
 800df5e:	e7aa      	b.n	800deb6 <floor+0x46>
 800df60:	8800759c 	.word	0x8800759c
 800df64:	7e37e43c 	.word	0x7e37e43c
 800df68:	bff00000 	.word	0xbff00000
 800df6c:	000fffff 	.word	0x000fffff

0800df70 <scalbn>:
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	ec55 4b10 	vmov	r4, r5, d0
 800df76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800df7a:	4606      	mov	r6, r0
 800df7c:	462b      	mov	r3, r5
 800df7e:	b99a      	cbnz	r2, 800dfa8 <scalbn+0x38>
 800df80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800df84:	4323      	orrs	r3, r4
 800df86:	d036      	beq.n	800dff6 <scalbn+0x86>
 800df88:	4b39      	ldr	r3, [pc, #228]	; (800e070 <scalbn+0x100>)
 800df8a:	4629      	mov	r1, r5
 800df8c:	ee10 0a10 	vmov	r0, s0
 800df90:	2200      	movs	r2, #0
 800df92:	f7f2 fb31 	bl	80005f8 <__aeabi_dmul>
 800df96:	4b37      	ldr	r3, [pc, #220]	; (800e074 <scalbn+0x104>)
 800df98:	429e      	cmp	r6, r3
 800df9a:	4604      	mov	r4, r0
 800df9c:	460d      	mov	r5, r1
 800df9e:	da10      	bge.n	800dfc2 <scalbn+0x52>
 800dfa0:	a32b      	add	r3, pc, #172	; (adr r3, 800e050 <scalbn+0xe0>)
 800dfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa6:	e03a      	b.n	800e01e <scalbn+0xae>
 800dfa8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dfac:	428a      	cmp	r2, r1
 800dfae:	d10c      	bne.n	800dfca <scalbn+0x5a>
 800dfb0:	ee10 2a10 	vmov	r2, s0
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	4629      	mov	r1, r5
 800dfb8:	f7f2 f968 	bl	800028c <__adddf3>
 800dfbc:	4604      	mov	r4, r0
 800dfbe:	460d      	mov	r5, r1
 800dfc0:	e019      	b.n	800dff6 <scalbn+0x86>
 800dfc2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	3a36      	subs	r2, #54	; 0x36
 800dfca:	4432      	add	r2, r6
 800dfcc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dfd0:	428a      	cmp	r2, r1
 800dfd2:	dd08      	ble.n	800dfe6 <scalbn+0x76>
 800dfd4:	2d00      	cmp	r5, #0
 800dfd6:	a120      	add	r1, pc, #128	; (adr r1, 800e058 <scalbn+0xe8>)
 800dfd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfdc:	da1c      	bge.n	800e018 <scalbn+0xa8>
 800dfde:	a120      	add	r1, pc, #128	; (adr r1, 800e060 <scalbn+0xf0>)
 800dfe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfe4:	e018      	b.n	800e018 <scalbn+0xa8>
 800dfe6:	2a00      	cmp	r2, #0
 800dfe8:	dd08      	ble.n	800dffc <scalbn+0x8c>
 800dfea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dfee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dff2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dff6:	ec45 4b10 	vmov	d0, r4, r5
 800dffa:	bd70      	pop	{r4, r5, r6, pc}
 800dffc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e000:	da19      	bge.n	800e036 <scalbn+0xc6>
 800e002:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e006:	429e      	cmp	r6, r3
 800e008:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e00c:	dd0a      	ble.n	800e024 <scalbn+0xb4>
 800e00e:	a112      	add	r1, pc, #72	; (adr r1, 800e058 <scalbn+0xe8>)
 800e010:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d1e2      	bne.n	800dfde <scalbn+0x6e>
 800e018:	a30f      	add	r3, pc, #60	; (adr r3, 800e058 <scalbn+0xe8>)
 800e01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01e:	f7f2 faeb 	bl	80005f8 <__aeabi_dmul>
 800e022:	e7cb      	b.n	800dfbc <scalbn+0x4c>
 800e024:	a10a      	add	r1, pc, #40	; (adr r1, 800e050 <scalbn+0xe0>)
 800e026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d0b8      	beq.n	800dfa0 <scalbn+0x30>
 800e02e:	a10e      	add	r1, pc, #56	; (adr r1, 800e068 <scalbn+0xf8>)
 800e030:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e034:	e7b4      	b.n	800dfa0 <scalbn+0x30>
 800e036:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e03a:	3236      	adds	r2, #54	; 0x36
 800e03c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e040:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e044:	4620      	mov	r0, r4
 800e046:	4b0c      	ldr	r3, [pc, #48]	; (800e078 <scalbn+0x108>)
 800e048:	2200      	movs	r2, #0
 800e04a:	e7e8      	b.n	800e01e <scalbn+0xae>
 800e04c:	f3af 8000 	nop.w
 800e050:	c2f8f359 	.word	0xc2f8f359
 800e054:	01a56e1f 	.word	0x01a56e1f
 800e058:	8800759c 	.word	0x8800759c
 800e05c:	7e37e43c 	.word	0x7e37e43c
 800e060:	8800759c 	.word	0x8800759c
 800e064:	fe37e43c 	.word	0xfe37e43c
 800e068:	c2f8f359 	.word	0xc2f8f359
 800e06c:	81a56e1f 	.word	0x81a56e1f
 800e070:	43500000 	.word	0x43500000
 800e074:	ffff3cb0 	.word	0xffff3cb0
 800e078:	3c900000 	.word	0x3c900000

0800e07c <nanf>:
 800e07c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e084 <nanf+0x8>
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	7fc00000 	.word	0x7fc00000

0800e088 <__ieee754_logf>:
 800e088:	ee10 3a10 	vmov	r3, s0
 800e08c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e090:	d106      	bne.n	800e0a0 <__ieee754_logf+0x18>
 800e092:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800e228 <__ieee754_logf+0x1a0>
 800e096:	eddf 7a65 	vldr	s15, [pc, #404]	; 800e22c <__ieee754_logf+0x1a4>
 800e09a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800e09e:	4770      	bx	lr
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	da02      	bge.n	800e0aa <__ieee754_logf+0x22>
 800e0a4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800e0a8:	e7f5      	b.n	800e096 <__ieee754_logf+0xe>
 800e0aa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e0ae:	db02      	blt.n	800e0b6 <__ieee754_logf+0x2e>
 800e0b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e0b4:	4770      	bx	lr
 800e0b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e0ba:	bfb8      	it	lt
 800e0bc:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800e230 <__ieee754_logf+0x1a8>
 800e0c0:	485c      	ldr	r0, [pc, #368]	; (800e234 <__ieee754_logf+0x1ac>)
 800e0c2:	bfbe      	ittt	lt
 800e0c4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e0c8:	f06f 0118 	mvnlt.w	r1, #24
 800e0cc:	ee17 3a90 	vmovlt	r3, s15
 800e0d0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800e0d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e0d8:	4418      	add	r0, r3
 800e0da:	bfa8      	it	ge
 800e0dc:	2100      	movge	r1, #0
 800e0de:	3a7f      	subs	r2, #127	; 0x7f
 800e0e0:	440a      	add	r2, r1
 800e0e2:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800e0e6:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800e0ea:	4319      	orrs	r1, r3
 800e0ec:	ee00 1a10 	vmov	s0, r1
 800e0f0:	4951      	ldr	r1, [pc, #324]	; (800e238 <__ieee754_logf+0x1b0>)
 800e0f2:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800e0f6:	f103 000f 	add.w	r0, r3, #15
 800e0fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e0fe:	4001      	ands	r1, r0
 800e100:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e104:	bb89      	cbnz	r1, 800e16a <__ieee754_logf+0xe2>
 800e106:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e10e:	d10f      	bne.n	800e130 <__ieee754_logf+0xa8>
 800e110:	2a00      	cmp	r2, #0
 800e112:	f000 8085 	beq.w	800e220 <__ieee754_logf+0x198>
 800e116:	ee07 2a90 	vmov	s15, r2
 800e11a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800e23c <__ieee754_logf+0x1b4>
 800e11e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e240 <__ieee754_logf+0x1b8>
 800e122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e126:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e12a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800e12e:	4770      	bx	lr
 800e130:	eddf 6a44 	vldr	s13, [pc, #272]	; 800e244 <__ieee754_logf+0x1bc>
 800e134:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e138:	eee0 7a66 	vfms.f32	s15, s0, s13
 800e13c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e140:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e144:	b912      	cbnz	r2, 800e14c <__ieee754_logf+0xc4>
 800e146:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e14a:	4770      	bx	lr
 800e14c:	ee07 2a90 	vmov	s15, r2
 800e150:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800e23c <__ieee754_logf+0x1b4>
 800e154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e158:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800e15c:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e160:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800e240 <__ieee754_logf+0x1b8>
 800e164:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800e168:	4770      	bx	lr
 800e16a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e16e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e172:	eddf 5a35 	vldr	s11, [pc, #212]	; 800e248 <__ieee754_logf+0x1c0>
 800e176:	eddf 4a35 	vldr	s9, [pc, #212]	; 800e24c <__ieee754_logf+0x1c4>
 800e17a:	4935      	ldr	r1, [pc, #212]	; (800e250 <__ieee754_logf+0x1c8>)
 800e17c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800e180:	4419      	add	r1, r3
 800e182:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800e186:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e18a:	430b      	orrs	r3, r1
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	ee07 2a90 	vmov	s15, r2
 800e192:	ee26 5a06 	vmul.f32	s10, s12, s12
 800e196:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e19a:	ee25 7a05 	vmul.f32	s14, s10, s10
 800e19e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800e254 <__ieee754_logf+0x1cc>
 800e1a2:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e1a6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800e258 <__ieee754_logf+0x1d0>
 800e1aa:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e1ae:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e25c <__ieee754_logf+0x1d4>
 800e1b2:	eee7 7a24 	vfma.f32	s15, s14, s9
 800e1b6:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800e260 <__ieee754_logf+0x1d8>
 800e1ba:	eee7 4a87 	vfma.f32	s9, s15, s14
 800e1be:	eddf 7a29 	vldr	s15, [pc, #164]	; 800e264 <__ieee754_logf+0x1dc>
 800e1c2:	eee4 7a87 	vfma.f32	s15, s9, s14
 800e1c6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e1ca:	eee5 7a87 	vfma.f32	s15, s11, s14
 800e1ce:	dd1c      	ble.n	800e20a <__ieee754_logf+0x182>
 800e1d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e1d4:	ee20 7a07 	vmul.f32	s14, s0, s14
 800e1d8:	ee27 7a00 	vmul.f32	s14, s14, s0
 800e1dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e1e4:	b922      	cbnz	r2, 800e1f0 <__ieee754_logf+0x168>
 800e1e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e1ee:	4770      	bx	lr
 800e1f0:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800e23c <__ieee754_logf+0x1b4>
 800e1f4:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e1f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1fc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e200:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800e240 <__ieee754_logf+0x1b8>
 800e204:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800e208:	4770      	bx	lr
 800e20a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e20e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e212:	2a00      	cmp	r2, #0
 800e214:	d0e9      	beq.n	800e1ea <__ieee754_logf+0x162>
 800e216:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800e23c <__ieee754_logf+0x1b4>
 800e21a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e21e:	e7ed      	b.n	800e1fc <__ieee754_logf+0x174>
 800e220:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800e22c <__ieee754_logf+0x1a4>
 800e224:	4770      	bx	lr
 800e226:	bf00      	nop
 800e228:	cc000000 	.word	0xcc000000
 800e22c:	00000000 	.word	0x00000000
 800e230:	4c000000 	.word	0x4c000000
 800e234:	004afb20 	.word	0x004afb20
 800e238:	007ffff0 	.word	0x007ffff0
 800e23c:	3717f7d1 	.word	0x3717f7d1
 800e240:	3f317180 	.word	0x3f317180
 800e244:	3eaaaaab 	.word	0x3eaaaaab
 800e248:	3e1cd04f 	.word	0x3e1cd04f
 800e24c:	3e178897 	.word	0x3e178897
 800e250:	ffcf5c30 	.word	0xffcf5c30
 800e254:	3e638e29 	.word	0x3e638e29
 800e258:	3ecccccd 	.word	0x3ecccccd
 800e25c:	3e3a3325 	.word	0x3e3a3325
 800e260:	3e924925 	.word	0x3e924925
 800e264:	3f2aaaab 	.word	0x3f2aaaab

0800e268 <_init>:
 800e268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e26a:	bf00      	nop
 800e26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e26e:	bc08      	pop	{r3}
 800e270:	469e      	mov	lr, r3
 800e272:	4770      	bx	lr

0800e274 <_fini>:
 800e274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e276:	bf00      	nop
 800e278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e27a:	bc08      	pop	{r3}
 800e27c:	469e      	mov	lr, r3
 800e27e:	4770      	bx	lr
